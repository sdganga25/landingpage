{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sort/sort.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle-config.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/list/list.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion-base.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Inject,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase: CanColorCtor & typeof MatToolbarBase =\n    mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkNestedTreeNode, CdkTree, CdkTreeNode, CdkTreeNodeDef} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTreeNodeDef = CdkTreeNodeDef;\n\nexport const _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode =\n    mixinTabIndex(mixinDisabled(CdkTreeNode));\n\nexport const _MatNestedTreeNodeMixinBase:\n    HasTabIndexCtor & CanDisableCtor & typeof CdkNestedTreeNode =\n        mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends _CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTreeNodePadding = CdkTreeNodePadding;\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends _CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTree = CdkTree;\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends _CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTreeNodeToggle = CdkTreeNodeToggle;\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends _CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]> | T[]) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (Array.isArray(childrenNodes)) {\n        this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n      } else {\n        childrenNodes.pipe(take(1)).subscribe(children => {\n          this._flattenChildren(children, level, resultNodes, parentMap);\n        });\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange!,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('7.0.0-beta.1-3cc9c67');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /**\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n        document.activeElement !== this._element.nativeElement || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef<HTMLInputElement>, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 7.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {\n\n    if (typeof window !== 'undefined') {\n      _zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._getOutsideClickStream(),\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent<MouseEvent>(this._document, 'click'),\n      fromEvent<TouchEvent>(this._document, 'touchend')\n    )\n    .pipe(filter(event => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value && document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen()) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the panel width and direction, in case anything has changed.\n      this._overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom',\n\n          // The overlay edge connected to the trigger should have squared corners, while\n          // the opposite end has rounded corners. We apply a CSS class to swap the\n          // border-radius based on the overlay position.\n          panelClass: 'mat-autocomplete-panel-above'\n        }\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being`void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed, void', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed, void => collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nexport let SELECT_MULTIPLE_PANEL_PADDING_X = 0;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanDisableRippleCtor &\n    CanUpdateErrorStateCtor &\n    typeof MatSelectBase =\n        mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    '[class.mat-select-empty]': 'empty',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange!.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._setPseudoCheckboxPaddingSize();\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\n  /** Sets the pseudo checkbox padding size based on the width of the pseudo checkbox. */\n  private _setPseudoCheckboxPaddingSize() {\n    if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\n      const pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\n      if (pseudoCheckbox) {\n        SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\n      }\n    }\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number | undefined, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n      this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions) {\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!_platform.IOS && !_platform.ANDROID) {\n      this._manualListeners\n        .set('mouseenter', () => this.show())\n        .set('mouseleave', () => this.hide())\n        .forEach((listener, event) => element.addEventListener(event, listener));\n    }\n\n    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n      // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n      // behavior for text fields, we always clear the `user-select` to avoid such issues.\n      element.style.webkitUserSelect = element.style.userSelect = element.style.msUserSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && element.style['webkitUserDrag'] === 'none') {\n      element.style['webkitUserDrag'] = '';\n    }\n\n    _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) =>\n        this._elementRef.nativeElement.removeEventListener(event, listener));\n\n      this._manualListeners.clear();\n    }\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withTransformOriginOn('.mat-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null|void> = this._sort ?\n        merge<Sort|void>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null|void> = this._paginator ?\n        merge<PageEvent|void>(this._paginator.page, this._paginator.initialized) :\n        observableOf(null);\n\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n// TODO(devversion): Workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkPortal = CdkPortal;\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends _CdkPortal {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabContent} from './tab-content';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase: CanDisableCtor & typeof MatTabBase =\n    mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality,\n              /**\n               * @breaking-change 7.0.0 changeDetectorRef to be made required.\n               */\n              changeDetectorRef?: ChangeDetectorRef) {\n\n    if (this._dir && changeDetectorRef) {\n      this._dirChangeSubscription = this._dir.change.subscribe(dir => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase: CanDisableCtor & typeof MatTabLabelWrapperBase =\n    mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, CanDisableRippleCtor, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase: CanDisableRippleCtor & typeof MatTabHeaderBase =\n    mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality,\n              // @breaking-change 8.0.0 `_ngZone` parameter to be made required.\n              private _ngZone?: NgZone) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    const zoneCallback = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n      this._changeDetectorRef.markForCheck();\n    };\n\n    // The content observer runs outside the `NgZone` by default, which\n    // means that we need to bring the callback back in ourselves.\n    // @breaking-change 8.0.0 Remove null check for `_ngZone` once it's a required parameter.\n    this._ngZone ? this._ngZone.run(zoneCallback) : zoneCallback();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/material2/issues/10276\n    this._tabList.nativeElement.style.transform = `translateX(${translateX}px)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper!);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase: CanColorCtor & CanDisableRippleCtor & typeof MatTabGroupBase =\n    mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HasTabIndex, HasTabIndexCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase: CanDisableRippleCtor & CanColorCtor & typeof MatTabNavBase =\n    mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef<HTMLElement> | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 7.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @breaking-change 7.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase:\n    HasTabIndexCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatTabLinkBase =\n        mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      this._ripplesGloballyDisabled;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string,\n              /**\n               * @deprecated\n               * @breaking-change 7.0.0 `_focusMonitor` parameter to be made required.\n               */\n              private _focusMonitor?: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n      };\n    }\n\n    if (_focusMonitor) {\n      _focusMonitor.monitor(_elementRef);\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase: CanDisableCtor & typeof MatSortHeaderBase =\n    mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkStepLabel = CdkStepLabel;\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends _CdkStepLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\nimport {StepState} from '@angular/cdk/stepper';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: StepState;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Error message to display when there's an error. */\n  @Input() errorMessage: string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef<HTMLElement>,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  focus() {\n    this._getHostElement().focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\nimport {StepState} from '@angular/cdk/stepper';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: StepState;\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  CdkStep,\n  CdkStepper,\n  StepContentPositionState,\n  MAT_STEPPER_GLOBAL_OPTIONS,\n  StepperOptions\n} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {DOCUMENT} from '@angular/common';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkStepper = CdkStepper;\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher,\n              @Optional() @Inject(MAT_STEPPER_GLOBAL_OPTIONS) stepperOptions?: StepperOptions) {\n    super(stepper, stepperOptions);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends _CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  ngAfterContentInit() {\n    const icons = this._icons.toArray();\n    icons.forEach(({name, templateRef}) => this._iconOverrides[name] = templateRef);\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n\n  _animationDone(event: AnimationEvent) {\n    if ((event.toState as StepContentPositionState) === 'current') {\n      this.animationDone.emit();\n    }\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef?: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) _document?: any) {\n    super(dir, changeDetectorRef, elementRef, _document);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkStepperNext = CdkStepperNext;\nexport const _CdkStepperPrevious = CdkStepperPrevious;\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends _CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends _CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTable = CdkTable;\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends _CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkCellDef = CdkCellDef;\nexport const _CdkHeaderCellDef = CdkHeaderCellDef;\nexport const _CdkFooterCellDef = CdkFooterCellDef;\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends _CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends _CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends _CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkHeaderRowDef = CdkHeaderRowDef;\nexport const _CdkFooterRowDef = CdkFooterRowDef;\nexport const _CdkRowDef = CdkRowDef;\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends _CdkHeaderRowDef {}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends _CdkFooterRowDef {}\n\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends _CdkRowDef<T> {}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  HammerInput,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof MatSliderBase =\n        mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private _shouldInvertMouseCoords() {\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 7.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: {message: string, action: string};\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('void, hidden', style({\n      transform: 'scale(0.8)',\n      opacity: 0,\n    })),\n    state('visible', style({\n      transform: 'scale(1)',\n      opacity: 1,\n    })),\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n      opacity: 0\n    }))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  OnDestroy,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar implements OnDestroy {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasInitialized,\n  HasInitializedCtor,\n  mixinDisabled,\n  mixinInitialized,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError,\n} from './sort-errors';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase =\n    mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {debounceTime, filter, map, startWith, take, takeUntil} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent<KeyboardEvent>(this._elementRef.nativeElement, 'keydown').pipe(\n            filter(event => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe(event => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HammerInput,\n  HasTabIndex, HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatSlideToggleBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event always fire when user toggle the slide toggle, but does not mean the slide toggle's\n   * value is changed. The event does not fire when user drag to change the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event always fire when user drag the slide toggle to make a change that greater than 50%.\n   * It does not mean the slide toggle's value is changed. The event does not fire when user toggle\n   * the slide toggle to change the slide toggle's value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @breaking-change 7.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this.onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n    // slide-toggle component will be only marked for check, but no actual change detection runs\n    // automatically. Instead of going back into the zone in order to trigger a change detection\n    // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n    // we only trigger an explicit change detection for the slide-toggle view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Output,\n  EventEmitter,\n  Optional,\n  NgZone,\n  ViewEncapsulation,\n  AfterViewInit,\n  ViewChild,\n  OnDestroy,\n  InjectionToken,\n  inject,\n} from '@angular/core';\nimport {fromEvent, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {DOCUMENT} from '@angular/common';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n  value: number;\n}\n\nexport const _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase =\n    mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  pathname: string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n  const pathname = (_document && _document.location && _document.location.pathname) || '';\n  return {pathname};\n}\n\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_isNoopAnimation`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor,\n                                                      AfterViewInit, OnDestroy {\n  constructor(public _elementRef: ElementRef, private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location && location.pathname ? location.pathname.split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\n  }\n\n  /** Flag that indicates whether NoopAnimations mode is set to true. */\n  _isNoopAnimation = false;\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) {\n    this._value = clamp(v || 0);\n\n    // When noop animation is set to true, trigger animationEnd directly.\n    if (this._isNoopAnimation) {\n      this.emitAnimationEnd();\n    }\n  }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  @ViewChild('primaryValueBar') _primaryValueBar: ElementRef;\n\n  /**\n   * Event emitted when animation of the primary progress bar completes. This event will not\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n   * animations (indeterminate and query).\n   */\n  @Output() animationEnd = new EventEmitter<ProgressAnimationEnd>();\n\n  /** Reference to animation end subscription to be unsubscribed on destroy. */\n  private _animationEndSubscription: Subscription = Subscription.EMPTY;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n\n  ngAfterViewInit() {\n    if (!this._isNoopAnimation) {\n      // Run outside angular so change detection didn't get triggered on every transition end\n      // instead only on the animation that we care about (primary value bar's transitionend)\n      this._ngZone.runOutsideAngular((() => {\n        this._animationEndSubscription =\n            fromEvent<TransitionEvent>(this._primaryValueBar.nativeElement, 'transitionend')\n            .pipe(filter(((e: TransitionEvent) =>\n              e.target === this._primaryValueBar.nativeElement)))\n            .subscribe(_ => this._ngZone.run(() => this.emitAnimationEnd()));\n      }));\n    }\n  }\n\n  ngOnDestroy() {\n    this._animationEndSubscription.unsubscribe();\n  }\n\n  /** Emit an animationEnd event if in determinate or buffer mode. */\n  private emitAnimationEnd(): void {\n    if (this.mode === 'determinate' || this.mode === 'buffer') {\n      this.animationEnd.next({value: this.value});\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase =\n    mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\n      !!this.defaults && !this.defaults._forceAnimations);\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @breaking-changes 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase: CanDisableCtor & typeof MatRadioGroupBase =\n    mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase:\n    CanColorCtor & CanDisableRippleCtor & HasTabIndexCtor & typeof MatRadioButtonBase =\n        mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin && this.radioGroup) {\n          this.radioGroup._touch();\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream to emit from when labels are changed. Use this to notify components when the labels have\n   * changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {\n  HasInitialized,\n  HasInitializedCtor,\n  mixinInitialized,\n  ThemePalette,\n} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 7.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase: HasInitializedCtor & typeof MatPaginatorBase =\n    mixinInitialized(MatPaginatorBase);\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** Theme color to be used for the underlying form controls. */\n  @Input() color: ThemePalette;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages();\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = this.getNumberOfPages();\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    return Math.ceil(this.length / this.pageSize) - 1;\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(0.8)'\n    })),\n    transition('void => enter', group([\n      query('.mat-menu-content', animate('100ms linear', style({opacity: 1}))),\n      animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'})),\n    ])),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatMenuItemBase =\n    mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 7.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._elementRef, false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 7.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 7.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 7.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 7.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n\n    // Scroll the content element to the top once the animation is done. This is necessary, because\n    // we move focus to the first item while it's still being animated, which can throw the browser\n    // off when it determines the scroll position. Alternatively we can move focus when the\n    // animation is done, however moving focus asynchronously will interrupt screen readers\n    // which are in the process of reading out the menu already. We take the `element` from\n    // the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef<HTMLElement>,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 7.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._checkMenu();\n\n    const overlayRef = this._createOverlay();\n    this._setPosition(overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayRef.attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe(() => menu.lazyContent!.detach(), undefined, () => {\n            // No matter whether the content got re-attached, reset the menu.\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withLockedPosition()\n          .withTransformOriginOn('.mat-menu-panel'),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedByMouse = true;\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0.8)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   * @deprecated Not used anymore. To be removed.\n   * @breaking-change 8.0.0\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW, A} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple, CanDisableRippleCtor,\n  MatLine,\n  MatLineSetter,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange!.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        this._toggleFocusedOption();\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      case HOME:\n      case END:\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case A:\n        if (event.ctrlKey) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => {\n        return this.options.find(option =>\n            this.compareWith ? this.compareWith(option.value, value) : option.value === value);\n      })\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  MatLineSetter,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase =\n    mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 7.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n    if (element.nodeName && element.nodeName.toLowerCase() === 'button'\n        && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value || ''}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = `${value || ''}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase: CanColorCtor & typeof MatIconBase =\n    mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef<HTMLElement>,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  DateAdapter,\n  mixinColor,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase =\n    mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats, ThemePalette} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLInputElement>,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n    if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    // Clear out the native tabindex here since we forward it to the underlying button\n    '[attr.tabindex]': 'null',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {MAT_ACCORDION, MatAccordionBase} from './accordion-base';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkAccordionItem = CdkAccordionItem;\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n\n  // @breaking-change 8.0.0 Remove `| undefined` from here\n  // when the `_document` constructor param is required.\n  private _document: Document | undefined;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body') _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              // @breaking-change 8.0.0 _document and _animationMode to be made required\n              @Inject(DOCUMENT) _document?: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith<void>(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n\n  _bodyAnimation(event: AnimationEvent) {\n    const classList = event.element.classList;\n    const cssClass = 'mat-expanded';\n    const {phaseName, toState, fromState} = event;\n\n    // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\n    // order to prevent the cases where switching too early would cause the animation to jump.\n    // Note that we do it directly on the DOM element to avoid the slight delay that comes\n    // with doing it via change detection.\n    if (phaseName === 'done' && toState === 'expanded') {\n      classList.add(cssClass);\n    }\n    if (phaseName === 'start' && toState === 'collapsed') {\n      classList.remove(cssClass);\n    }\n\n    if (phaseName === 'done' && toState === 'expanded' && fromState !== 'void') {\n      this.afterExpand.emit();\n    }\n    if (phaseName === 'done' && toState === 'collapsed' && fromState !== 'void') {\n      this.afterCollapse.emit();\n    }\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body && this._document) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanel} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef) {\n\n    const accordionHideToggleChange = panel.accordion ?\n      panel.accordion._stateChanges.pipe(filter(changes => !!changes.hideToggle)) : EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      accordionHideToggleChange,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    _focusMonitor.monitor(_element).subscribe(origin => {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(this);\n      }\n    });\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program') {\n    this._focusMonitor.focusVia(this._element, origin);\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {HOME, END} from '@angular/cdk/keycodes';\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionDisplayMode} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const {keyCode} = event;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME) {\n      manager.setFirstItemActive();\n      event.preventDefault();\n    } else if (keyCode === END) {\n      manager.setLastItemActive();\n      event.preventDefault();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        const activeCell: HTMLElement | null =\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n        if (activeCell) {\n          activeCell.focus();\n        }\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n      case SPACE:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n      case SPACE:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n      case SPACE:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material datepicker. */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(1, 0.8)'\n    })),\n    transition('void => enter',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1, 1)'\n    }))),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, END, HOME} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase =\n    mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  private _lastDestroyedChipIndex: number | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.disabled = this._disabled);\n    }\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  protected _updateFocusForDestroyedChips() {\n    if (this._lastDestroyedChipIndex != null && this.chips.length) {\n      const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n      this._keyManager.setActiveItem(newChipIndex);\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this._hasFocusedChip()) {\n      this._keyManager.setActiveItem(-1);\n    }\n\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  private _originatesFromChip(event: Event): boolean {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n\n  /** Checks whether any of the chips is focused. */\n  private _hasFocusedChip() {\n    return this.chips.some(chip => chip._hasFocus);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Input, Output, Inject, OnChanges} from '@angular/core';\nimport {MatChipList} from './chip-list';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n  }\n})\nexport class MatChipInput implements OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event.keyCode)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._inputElement.focus();\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(keyCode: number) {\n    const separators = this.separatorKeyCodes;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\nconst animationBody = [\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\n  state('enter', style({transform: 'none'})),\n  transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)',\n      style({transform: 'none', opacity: 1}))),\n  transition('* => void, * => exit',\n      animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0}))),\n];\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly dialogContainer: AnimationTriggerMetadata;\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', animationBody),\n\n  /** @deprecated @breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead. */\n  slideDialog: trigger('slideDialog', animationBody)\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.dialogContainer],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@dialogContainer]': '_state',\n    '(@dialogContainer.start)': '_onAnimationStart($event)',\n    '(@dialogContainer.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject, Subscription, SubscriptionLike} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  afterOpen(): Observable<void> {\n    return this.afterOpened();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * @breaking-change 8.0.0\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this.beforeClosed();\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): ()  => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog implements OnDestroy {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this.afterOpened;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    this._closeDialogs(this.openDialogs);\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  ngOnDestroy() {\n    // Only close the dialogs at this level on destroy\n    // since the parent service may still be active.\n    this._closeDialogs(this._openDialogsAtThisLevel);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n\n  /** Closes all of the dialogs in an array. */\n  private _closeDialogs(dialogs: MatDialogRef<any>[]) {\n    let i = dialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      dialogs[i].close();\n    }\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n// TODO(devversion): Workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTextareaAutosize = CdkTextareaAutosize;\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 7.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends _CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase =\n    mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 7.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /** Whether the component is a native html select. */\n  _isNativeSelect = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      (this._elementRef.nativeElement as HTMLInputElement).type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    protected _platform: Platform,\n    /** @docs-private */\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n    private _autofillMonitor: AutofillMonitor,\n    ngZone: NgZone) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = this._elementRef.nativeElement.nodeName.toLowerCase() === 'select';\n  }\n\n  ngOnInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement as HTMLSelectElement;\n\n      return selectElement.multiple || !this.empty || !!selectElement.options[0].label ||\n          this.focused;\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/material2/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewChecked,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n// TODO(josephperrott): Revert to constants for ripple radius once 2018 Checkbox updates have\n// landed.\n// The radius for the checkbox's ripple, in pixels.\nlet calculatedRippleRadius = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewChecked, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    this._focusMonitor.monitor(elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => this._onTouched());\n      }\n    });\n  }\n\n  ngAfterViewChecked() {\n    this._calculateRippleRadius();\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    if (value != this.disabled) {\n      this._disabled = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  // TODO(josephperrott): Revert to constants for ripple radius once 2018 Checkbox updates have\n  // landed.\n  /**\n   * Calculate the radius for the ripple based on the ripple elements width.  Only calculated once\n   * for the application.\n   */\n  private _calculateRippleRadius() {\n    if (!calculatedRippleRadius) {\n      const rippleWidth =\n          this._elementRef.nativeElement.querySelector('.mat-checkbox-ripple').clientWidth || 0;\n      calculatedRippleRadius = rippleWidth / 2;\n    }\n    this.ripple.radius = calculatedRippleRadius;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase:\n    CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatChipBase =\n        mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._ripplesGloballyDisabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Handles click events on the chip. */\n  _handleClick(event: Event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocus = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick($event)',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {}\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event: Event): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  CanColorCtor,\n  CanDisableCtor,\n  CanDisableRippleCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatButtonMixinBase:\n    CanDisableRippleCtor & CanDisableCtor & CanColorCtor & typeof MatButtonBase =\n        mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @breaking-change 7.0.0\n               */\n              // tslint:disable-next-line:no-unused-variable\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @breaking-change 7.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  mixinDisableRipple,\n  CanDisableRippleCtor,\n} from '@angular/material/core';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 7.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[attr.aria-disabled]': 'disabled',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n\n  private _vertical = false;\n  private _multiple = false;\n  private _disabled = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether multiple button toggle group is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {}\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase: CanDisableRippleCtor & typeof MatButtonToggleBase =\n    mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    // Clear out the native tabindex here since we forward it to the underlying button\n    '[attr.tabindex]': 'null',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase =\n    mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Renderer2,\n} from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\n\n\nlet nextId = 0;\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n  },\n})\nexport class MatBadge implements OnDestroy {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(value: string) {\n    this._content = value;\n    this._hasContent = value != null && `${value}`.trim().length > 0;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      /** @breaking-change 8.0.0 Make _renderer a required param and remove _document. */\n      private _renderer?: Renderer2) {}\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    // @breaking-change 8.0.0 Remove null check for _renderer\n    const rootNode = this._renderer || this._document;\n    const badgeElement = rootNode.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /** Whether the bottom sheet should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  /** Whether the bottom sheet should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'hidden') {\n      this._restoreFocus();\n    } else if (event.toState === 'visible' && this.bottomSheetConfig.autoFocus) {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject, SubscriptionLike, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    location?: Location) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._locationChanges.unsubscribe();\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n\n    if (location) {\n      this._locationChanges = location.subscribe(() => {\n        if (containerInstance.bottomSheetConfig.closeOnNavigation) {\n          this.dismiss();\n        }\n      });\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf, TemplateRef} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config = _applyConfigDefaults(config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...new MatBottomSheetConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** The unique ID of the option. */\n  @Input() id: string = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {EMPTY, fromEvent, merge} from 'rxjs';\nimport {startWith, take} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase: CanColorCtor & typeof MatFormFieldBase =\n    mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options form the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n    '../input/input.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n  private _outlineGapCalculationNeeded = false;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance { return this._appearance; }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n\n    this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n\n    if (this._appearance === 'outline' && oldValue !== value) {\n      // @breaking-change 7.0.0 Remove this check and else block once _ngZone is required.\n      if (this._ngZone) {\n        this._ngZone!.onStable.pipe(take(1)).subscribe(() => {\n          this._ngZone!.runOutsideAngular(() => this.updateOutlineGap());\n        });\n      } else {\n        Promise.resolve().then(() => this.updateOutlineGap());\n      }\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS)\n          private _defaults: MatFormFieldDefaultOptions,\n      // @breaking-change 7.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n\n    // Set the default through here so we invoke the setter on the first run.\n    this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith<void>(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value, prefix, or suffix changes.\n    const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n    merge(valueChanges, this._prefixChildren.changes, this._suffixChildren.changes)\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (this._outlineGapCalculationNeeded) {\n      this.updateOutlineGap();\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n        !labelEl.textContent.trim()) {\n      return;\n    }\n\n    if (this._platform && !this._platform.isBrowser) {\n      // getBoundingClientRect isn't available on the server.\n      return;\n    }\n    // If the element is not present in the DOM, the outline gap will need to be calculated\n    // the next time it is checked and in the DOM.\n    if (!document.documentElement.contains(this._elementRef.nativeElement)) {\n      this._outlineGapCalculationNeeded = true;\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n    const startEls = this._connectionContainerRef.nativeElement.querySelectorAll(\n      '.mat-form-field-outline-start');\n    const gapEls = this._connectionContainerRef.nativeElement.querySelectorAll(\n        '.mat-form-field-outline-gap');\n    if (this._label && this._label.nativeElement.children.length) {\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n\n      for (const child of labelEl.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n\n    this._outlineGapCalculationNeeded = false;\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (this._document && this._document.body && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T, defaultColor?: ThemePalette): CanColorCtor & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableRippleCtor = Constructor<CanDisableRipple>;\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T): CanDisableRippleCtor & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** @docs-private */\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : HasTabIndexCtor & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {Constructor} from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: CanUpdateErrorStateCtor & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** @docs-private */\nexport type HasInitializedCtor = Constructor<HasInitialized>;\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    HasInitializedCtor & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n  /**\n   * @deprecated Use the `animation` property instead.\n   * @breaking-change 7.0.0\n   */\n  speedFactor?: number;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef<HTMLElement>,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents\n        .set('mousedown', this.onMousedown)\n        .set('mouseup', this.onPointerUp)\n        .set('mouseleave', this.onPointerUp)\n\n        .set('touchstart', this.onTouchStart)\n        .set('touchend', this.onPointerUp)\n        .set('touchcancel', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration / (config.speedFactor || 1);\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches;\n\n      for (let i = 0; i < touches.length; i++) {\n        this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n      }\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 7.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Since the slide event threshold is set to zero, the slide recognizer can fire and\n    // accidentally reset the longpress recognizer. In order to make sure that the two\n    // recognizers can run simultaneously but don't affect each other, we allow the slide\n    // recognizer to recognize while a longpress is being processed.\n    // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124\n    longpress.recognizeWith(slide);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef<HTMLElement>) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   * @deprecated Use the `animation` global option instead.\n   * @breaking-change 7.0.0\n   */\n  baseSpeedFactor?: number;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   * @deprecated Use the [matRippleAnimation] binding instead.\n   * @breaking-change 7.0.0\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '../common-behaviors/disabled';\n\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase: CanDisableCtor & typeof MatOptgroupBase =\n    mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["this","_toolbarRows","changes","subscribe","_this","_checkToolbarMixedModes","MatToolbar","prototype","length","slice","call","_elementRef","nativeElement","childNodes","filter","node","classList","contains","nodeType","_document","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","type","Component","args","selector","exportAs","template","styles","inputs","host","class","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","undefined","decorators","Inject","DOCUMENT","propDecorators","NgModule","imports","MatCommonModule","exports","MatToolbarRow","declarations","MatToolbarModule","MatTreeNodeOutlet","viewContainer","Directive","ViewContainerRef","_CdkTreeNodeDef","CdkTreeNodeDef","_MatTreeNodeMixinBase","mixinTabIndex","mixinDisabled","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_tree","tabIndex","_super","role","Number","tslib_1.__extends","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","providers","provide","useExisting","ElementRef","CdkTree","String","Attribute","Input","MatTreeNodeDef","data","MatNestedTreeNode","_differs","ngAfterContentInit","ngOnDestroy","IterableDiffers","nodeOutlet","ContentChildren","_CdkTreeNodePadding","CdkTreeNodePadding","MatTreeNodePadding","level","indent","_CdkTree","MatTree","_CdkTreeNodeToggle","CdkTreeNodeToggle","recursive","MatTreeNodeToggle","(click)","MAT_TREE_DIRECTIVES","CdkTreeModule","CommonModule","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","take","children","forEach","child","index","childParentMap","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","Object","defineProperty","value","next","dataNodes","connect","collectionViewer","viewChange","expansionModel","merge","apply","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","paginator","_updatePaginator","filteredData","MatTableDataSource","_orderData","sort","sortData","_pageData","startIndex","pageIndex","pageSize","splice","filteredDataLength","Promise","resolve","then","lastPageIndex","Math","ceil","min","_renderData","_MAT_INK_BAR_POSITIONER","InjectionToken","providedIn","factory","_MAT_INK_BAR_POSITIONER_FACTORY","MatInkBar","_ngZone","_inkBarPositioner","alignToElement","element","show","requestAnimationFrame","runOutsideAngular","_setStyles","style","visibility","hide","positions","inkBar","left","width","NgZone","MatTabContent","TemplateRef","_CdkPortal","CdkPortal","MatTabLabel","MatTabBase","_MatTabMixinBase","MatTab","_viewContainerRef","textLabel","_contentPortal","_stateChanges","Subject","position","origin","isActive","ngOnChanges","hasOwnProperty","complete","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","ViewChild","ariaLabel","ariaLabelledby","matTabsAnimations","translateTab","trigger","state","transform","minHeight","transition","animate","MatTabBodyPortal","componentFactoryResolver","viewContainerRef","_host","_centeringSub","Subscription","EMPTY","_leavingSub","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","unsubscribe","ComponentFactoryResolver","MatTabBody","forwardRef","CdkPortalOutlet","_dir","changeDetectorRef","_dirChangeSubscription","_onCentering","EventEmitter","_onCentered","change","dir","_computePositionAnimationState","markForCheck","_positionIndex","_computePositionFromOrigin","_onTranslateTabStarted","e","toState","emit","clientHeight","_onTranslateTabComplete","fromState","_getLayoutDirection","animations","ChangeDetectorRef","Output","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","MatTabLabelWrapper","elementRef","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","[class.mat-tab-disabled]","[attr.aria-disabled]","MatTabHeaderBase","_MatTabHeaderMixinBase","mixinDisableRipple","MatTabHeader","_changeDetectorRef","_viewportRuler","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_selectedIndex","selectFocusedIndex","indexFocused","coerceNumberProperty","_keyManager","updateActiveItemIndex","ngAfterContentChecked","_tabLabelCount","_labelWrappers","_updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","event","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","dirChange","observableOf","resize","realign","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","takeUntil","newFocusIndex","_setTabFocus","_onContentChanges","zoneCallback","run","_checkPaginationEnabled","_isValidIndex","setActiveItem","tab","toArray","disabled","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","translateX","_tabList","v","max","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","selectedIndex","_inkBar","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","Optional","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","MatTabGroup","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","_backgroundColor","remove","backgroundColor","add","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","_tabs","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","_getTabIndex","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_onDestroy","updateActiveLink","_activeLinkChanged","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","MatTabLinkBase","_MatTabLinkMixinBase","_tabNavBar","_focusMonitor","_tabLinkRipple","setupTriggerEvents","parseInt","globalOptions","_ripplesGloballyDisabled","terminateOnPointerUp","speedFactor","baseSpeedFactor","animation","monitor","get","_isActive","enumerable","configurable","stopMonitoring","MatTabLink","[attr.aria-current]","[attr.tabIndex]","[class.mat-tab-label-active]","Platform","MAT_RIPPLE_GLOBAL_OPTIONS","FocusMonitor","PortalModule","MatRippleModule","ObserversModule","A11yModule","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","_platform","document","ngAfterViewInit","isDevMode","isBrowser","SORT_ANIMATION_TRANSITION","keyframes","allowChildren","query","animateChild","optional","sortButtonLabel","id","Injectable","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","SkipSelf","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","_sort","_cdkColumnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","arrowPosition","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","sortChange","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_disableClear","name","register","deregister","_setIndicatorHintVisible","visible","_isDisabled","viewState","direction","_getArrowDirectionState","_getArrowViewState","start","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","MatSort","CdkColumnDef","disableClear","MatSortModule","_CdkStepLabel","CdkStepLabel","MatStepLabel","optionalLabel","MatStepperIntl","MatStepHeader","_element","_intlSubscription","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","errorMessage","iconOverrides","selected","matStepperAnimations","horizontalStepTransition","verticalStepTransition","MatStepperIcon","templateRef","_CdkStepper","CdkStepper","MatStep","stepper","_errorStateMatcher","stepperOptions","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","MAT_STEPPER_GLOBAL_OPTIONS","MatStepper","arguments","_icons","_a","_iconOverrides","_steps","_stateChanged","MatHorizontalStepper","aria-orientation","MatVerticalStepper","ctorParameters","_CdkStepperNext","CdkStepperNext","_CdkStepperPrevious","CdkStepperPrevious","MatStepperNext","[type]","MatStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","MatStepperModule","_CdkTable","CdkTable","stickyCssClass","MatTable","CDK_TABLE_TEMPLATE","_CdkCellDef","CdkCellDef","_CdkHeaderCellDef","CdkHeaderCellDef","_CdkFooterCellDef","CdkFooterCellDef","MatCellDef","MatHeaderCellDef","MatFooterCellDef","MatColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","_CdkHeaderRowDef","CdkHeaderRowDef","_CdkFooterRowDef","CdkFooterRowDef","_CdkRowDef","CdkRowDef","MatHeaderRowDef","MatFooterRowDef","MatRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","CdkFooterRow","MatFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","CdkTableModule","MatTableModule","MAX_SAFE_INTEGER","_filter","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_paginator","initialized","pageChange","page","dataStream","combineLatest","_filterData","orderedData","paginatedData","obj","_tickInterval","MatSlider","_value","_min","_roundToDecimal","parseFloat","toFixed","_percent","_calculatePercentage","_vertical","displayWith","_focusHostElement","blur","_blurHostElement","_clamp","vertical","invert","percent","_isMinValue","thumbLabel","axis","scale","_shouldInvertMouseCoords","_thumbGap","_getDirection","_tickIntervalPercent","tickSize","backgroundSize","sign","rotate","_invertAxis","detectChanges","_onMouseenter","_sliderDimensions","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_isSliding","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_emitChangeEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","onTouched","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","step","pos","offset","top","size","posComponent","exactValue","_calculateValue","closestValue","round","_controlValueAccessorChangeFn","valueChange","input","tickInterval","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","MatSliderChange","source","percentage","_sliderWrapper","getBoundingClientRect","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","MAT_SLIDER_VALUE_ACCESSOR","(focus)","(blur)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","[class._mat-animation-noopable]","ANIMATION_MODULE_TYPE","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSliderModule","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","action","matSnackBarAnimations","snackBarState","opacity","MatSnackBarContainer","snackBarConfig","_animationState","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","_completeExit","onEnter_1","enter","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","OverlayModule","entryComponents","MatSnackBarModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","bottom","create","Overlay","LiveAnnouncer","Injector","BreakpointObserver","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","_direction","getSortInvalidDirectionError","sortable","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","delete","getNextSortDirection","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","openedChange","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","stopPropagation","MatDrawer","onPositionChanged","_modeChanged","mode","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","focusVia","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","_openedStream","openedStart","_closedStream","closedStart","_animationMode","backdropClick","_doCheckSubject","_autosize","defaultAutosize","MatDrawerContainer","_backdropOverride","_drawers","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","_width","_contentMarginChanges","_contentMargins","[class.mat-drawer-container-explicit-backdrop]","ContentChild","MatDrawerContent","_userContent","autosize","MatSidenavContent","scrollDispatcher","ngZone","[style.margin-left.px]","[style.margin-right.px]","ScrollDispatcher","MatSidenav","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","fixedTopGap","MatSidenavContainer","MatSidenavModule","ScrollingModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","onChange","_","_uniqueId","_required","_checked","_dragging","labelPosition","toggleChange","dragChange","focusOrigin","_onChangeEvent","_inputElement","_onInputClick","toggle","_getDragPercentage","distance","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","required","MatSlideToggleModule","MatSliderBase","_MatSliderMixinBase","_invert","_max","_step","_thumbLabel","toString","split","pop","MAT_PROGRESS_BAR_LOCATION","MatProgressBar","_primaryValueBar","animationEnd","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","MatProgressSpinner","platform","animationMode","_fallbackAnimation","_noopAnimations","_forceAnimations","_diameter","EDGE","TRIDENT","diameter","strokeWidth","animationClass","diameters","_attachStyleNode","_strokeWidth","newValue","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","[style.width.px]","[style.height.px]","[attr.mode]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","disableRipple","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_focusTrapFactory","_offsetY","_calculateOverlayOffsetY","selectedOptionOffset","scrollBuffer","maxScroll","_checkOverlayWithinViewport","MatSelect","_calculateOverlayScroll","itemHeight","_getItemHeight","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","placeholder","_getAriaLabelledby","_parentFormField","_hasFloatingLabel","_labelId","_getAriaActiveDescendant","panelOpen","activeItem","_calculateOverlayOffsetX","offsetX","overlayRect","overlayDir","viewportSize","getViewportSize","_isRtl","paddingWidth","multiple","SELECT_MULTIPLE_PANEL_PADDING_X","_selectionModel","options","first","group","leftOverflow","rightOverflow","updatePosition","optionOffsetFromPanelTop","optionHeightAdjustment","_triggerRect","maxOptionsDisplayed","floor","_disableOptionCentering","_scrollTop","firstDisplayedIndex","_getItemCount","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_transformOrigin","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","optionGroups","_triggerFontSize","setDescribedByIds","ids","_ariaDescribedby","join","onContainerClick","_panelOpen","empty","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","[class.mat-select-empty]","matSelectAnimations","transformPanel","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","Self","MAT_SELECT_SCROLL_STRATEGY","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","MatSelectTrigger","disableOptionCentering","compareWith","errorStateMatcher","sortComparator","selectionChange","MatOptionModule","MatFormFieldModule","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MatSelectModule","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","_scrollStrategy","_defaultOptions","showDelay","hideDelay","_message","_manualListeners","IOS","ANDROID","listener","addEventListener","nodeName","webkitUserSelect","userSelect","msUserSelect","draggable","_updatePosition","_tooltipInstance","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","clear","delay","_detach","_portal","TooltipComponent","afterHidden","isVisible","ESCAPE","_handleTouchend","touchendHideDelay","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","scrollStrategy","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","AriaDescriber","_visibility","_closeOnInteraction","_onHide","_isHandset","_hideTimeoutId","_showTimeoutId","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","numberOfPages","_changePageSize","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","MAT_PROGRESS_BAR_LOCATION_FACTORY","progressbarId","location","_isNoopAnimation","_bufferValue","_animationEndSubscription","path","pathname","_rectangleFillValue","clamp","emitAnimationEnd","_primaryTransform","_bufferTransform","bufferValue","fromEvent","target","aria-valuemin","aria-valuemax","_attached","MatMenuContent","context","_template","_outlet","DomPortalOutlet","_componentFactoryResolver","_appRef","insertBefore","outletElement","isAttached","ApplicationRef","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_PANEL","MatMenuItemBase","_MatMenuItemMixinBase","MatMenuItem","_parentMenu","_hovered","_highlighted","_triggersSubmenu","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_DEFAULT_OPTIONS_FACTORY","MatMenu","_xPosition","xPosition","_yPosition","yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","backdropClass","_overlapTrigger","overlapTrigger","_hasBackdrop","hasBackdrop","throwMatMenuInvalidPositionX","setPositionClasses","throwMatMenuInvalidPositionY","classes","className","withTypeAhead","tabOut","switchMap","items","item","parentMenu","setFocusOrigin","focusFirstItem","lazyContent","onStable","resetActiveItem","setElevation","depth","newElevation","customElevation","c","startsWith","_previousElevation","posX","posY","_startAnimation","_resetAnimation","_onAnimationDone","_isAnimating","activeItemIndex","scrollTop","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","MatMenuTrigger","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_handleHover","_cleanUpSubscriptions","toggleMenu","closeMenu","openMenu","_setPosition","menuData","_menuClosingActions","_initMenu","menuOpen","_resetMenu","_setMenuElevation","_setIsMenuOpen","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","withLockedPosition","connectionPair","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","aria-haspopup","(mousedown)","_deprecatedMatMenuTriggerFor","MatMenuModule","minWidth","fadeInContent","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_scrollStrategyFactory","_multiple","_compareWith","o1","o2","_uid","_destroy","_onChange","_onTouched","_optionIds","_panelDoneAnimatingStream","_positions","_focused","controlType","optionSelectionChanges","defer","option","onSelectionChange","o","valueAccessor","_placeholder","stateChanges","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","distinctUntilChanged","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","getComputedStyle","_calculateOverlayPosition","_highlightCorrectOption","fontSize","_setSelectionByValue","selectedOptions","viewValue","reverse","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","manager","A","ctrlKey","hasDeselectedOptions_1","opt","previouslyFocusedIndex","shiftKey","_selectViaInteraction","_onAttached","positionChange","_setPseudoCheckboxPaddingSize","panel","_getPanelTheme","color","pseudoCheckbox","querySelector","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withVerticalOrientation","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","_getOptionScrollPosition","_getOptionIndex","result","current","panelHeight","scrollContainerHeight","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatSelectionList","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","checkboxPosition","_setSelected","_reportValueChange","MatLineSetter","_lines","_removeOptionFromList","_text","_handleFocus","_setFocusedOption","_handleBlur","tabindex","[class.mat-list-item-disabled]","[attr.aria-selected]","MatLine","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","optionIndex","setNextItemActive","previousFocusIndex","_toggleFocusedOption","selectAll","deselectAll","_getSelectedOptionValues","values","Boolean","focusedOption","focusedIndex","hasChanged","_MatListMixinBase","_navList","_isNavList","hasAttribute","MatGridTile","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","_rowspan","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","_setStyle","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","styleTags","querySelectorAll","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","[class.mat-icon-inline]","MatListBase","MatListItemBase","_MatListItemMixinBase","_dateAdapter","createMissingDateImplError","MatDatepicker","_datepickerInput","_getThemePalette","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","sameDate","_selectedChanged","date","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","_dialog","MatDatepickerContent","afterClosed","componentInstance","datepicker","_setColor","_createPopup","keydownEvents","withPush","MatDialog","MAT_DATEPICKER_SCROLL_STRATEGY","DateAdapter","calendarHeaderComponent","startAt","yearSelected","monthSelected","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","getConnectedOverlayOrigin","isAltDownArrow","readOnly","_onInput","parse","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","defaultTabIndex","parsedTabIndex","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-accent]","[class.mat-warn]","_customIcon","MatDialogModule","MatCalendar","MatCalendarBody","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","MAT_ACCORDION","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelContent","_CdkAccordionItem","CdkAccordionItem","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_hideToggle","afterExpand","afterCollapse","_inputChanges","_headerId","hideToggle","_hasSpacing","expanded","displayMode","_getExpandedState","_lazyContent","_bodyAnimation","phaseName","_containsFocus","_body","focusedElement","bodyElement","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","accordionHideToggleChange","_handleHeaderFocus","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","_handleHeaderKeydown","[attr.aria-controls]","[@expansionHeight]","MatExpansionPanelDescription","MatExpansionPanelTitle","MatAccordion","_headers","header","CdkAccordion","CdkAccordionModule","MatExpansionModule","_colspan","property","selectedValue","labelMinRequiredCells","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","selectedChange","_userSelection","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","_activeDate","today","oldActiveDate","validDate","clampDate","minDate","maxDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","dateFilter","_focusActiveCell","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","MatCalendarCell","d1","d2","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","focusActiveCell","view","_getCurrentViewComponent","monthView","headerComponent","yearView","multiYearView","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_calendar","[@transformPanel]","[class.mat-datepicker-content-touch]","MatChipList","ariaOrientation","selectable","chips","MatChip","MatChipInput","focused","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","_blur","addOnBlur","_focus","_isSeparatorKey","separators","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","ɵ0","useValue","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","autoFocus","restoreFocus","closeOnNavigation","animationBody","matDialogAnimations","dialogContainer","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_onAnimationStart","_startExitAnimation","aria-modal","[@dialogContainer]","(@dialogContainer.start)","(@dialogContainer.done)","MatDialogRef","_containerInstance","_afterClosed","_beforeClosed","_locationChanges","_result","dialogResult","detachBackdrop","beforeClosed","_getPositionStrategy","centerVertically","updateSize","afterOpen","beforeClose","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","_closeDialogs","dialog","dialogConfig","maxHeight","injectionTokens","previousValue","overlayContainer","getContainerElement","parentElement","siblings","sibling","getAttribute","dialogs","Location","OverlayContainer","dialogElementUid","MatDialogClose","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","_CdkTextareaAutosize","CdkTextareaAutosize","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","_isServer","_isNativeSelect","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","selectElement","[class.mat-input-server]","[required]","[attr.readonly]","AutofillMonitor","TextFieldModule","MatInputModule","calendarLabel","openCalendarLabel","displayValue","_cellClicked","_isActiveCell","cellNumber","_firstRowOffset","aria-readonly","todayValue","MatCheckbox","_getAriaChecked","indeterminate","_transitionCheckState","newState","oldState","_currentCheckState","_currentAnimationClass","_getAnimationClassForCheckStateTransition","animationClass_1","MatCheckboxChange","_clickAction","_indeterminate","indeterminateChange","TransitionCheckState","Checked","Unchecked","_onInteractionEvent","animSuffix","Init","Indeterminate","_calculateRippleRadius","calculatedRippleRadius","rippleWidth","ripple","radius","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MAT_CHECKBOX_CLICK_ACTION","MatRipple","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","rippleConfig","_hasFocus","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","CHIP_ATTRIBUTE_NAMES_1","attr","tagName","chip","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","_lastDestroyedChipIndex","_tabIndex","_userTabIndex","_chipInput","_hasFocusedChip","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_dropSubscriptions","inputElement","_originatesFromChip","_focusInput","_isInputEmpty","newChipIndex","_clearSelection","correspondingChip","skip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","chipFocusChanges","chipIndex","chipBlurChanges","chipRemoveChanges","currentElement","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatButton","stopImmediatePropagation","MatAnchor","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","MatCardContent","MatCardTitle","MatCardSubtitle","align","[class.mat-card-actions-align-end]","MatCardActions","MatCardFooter","MatCardImage","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardXlImage","MatCardAvatar","MatCard","MatCardHeader","MatCardTitleGroup","MatCardModule","MatCheckboxBase","_MatCheckboxMixinBase","ngAfterViewChecked","changed","MatAutocomplete","_setVisibility","_setScrollTop","_getScrollTop","showPanel","_emitSelectEvent","MatAutocompleteSelectedEvent","optionSelected","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","autoActiveFirstOption","panelWidth","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","window","_destroyPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_isOpen","_closingActionsSubscription","_getOutsideClickStream","MatOptionSelectionChange","clickTarget","formField","_setTriggerValue","_resetActiveItem","activeOption","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","newScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","_getPanelWidth","wasOpen","_getConnectedElement","connectedTo","_getHostWidth","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadge","_renderer","_hasContent","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","_badgeElement","_createBadgeElement","rootNode","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","Renderer2","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","COMPLEX","ACCELERATION_CURVE","EXITING","DECELERATION_CURVE","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attributes","attribute","_parent","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_defaults","_outlineGapCalculationNeeded","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","appearance","_appearance","updateOutlineGap","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_prefixChildren","_suffixChildren","_hintChildren","_errorChildren","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","labelEl","documentElement","startWidth","gapWidth","startEls","gapEls","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","_uniqueAutocompleteIdCounter","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","_autoActiveFirstOption","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","optionHeight","currentScrollPosition","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","defaultOptions","provider","exp","match","parentRegistry","httpClient","sanitizer","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","body","testElement","computedStyle","_checkHammerIsAvailable","BidiModule","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","test","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","Hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","_setLineClass","count","_resetClasses","_setClass","isAdd","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","RippleState","RippleRef","fadeOut","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isFakeMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","changedTouches","onPointerUp","persistent","_containerElement","containerRect","_containerRect","animationConfig","centered","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","launch","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]"],"mappings":";;;;;;;i/DiKuBA,SAAgByyF,GAAUC,EAAG1pE,GAEzB,QAAS2pE,KAAO3yF,KAAK4yF,YAAcF,EADnCG,GAAcH,EAAG1pE,GAEjB0pE,EAAEnyF,UAAkB,OAANyoB,EAAa5f,OAAOowB,OAAOxQ,IAAM2pE,EAAGpyF,UAAYyoB,EAAEzoB,UAAW,GAAIoyF,ICPnF,QAAgBG,KACd,OAAO,ECCT,QAAgB/uF,GAAyCgvF,GACvD,MAAF,UAAAzuF,GAMI,QAAJ0uF,KAAA,IAAgB,GAAhBrxF,MAAAmqD,EAAA,EAAgBA,EAAhBvnC,UAAA/jB,OAAgBsrD,IAAAnqD,EAAhBmqD,GAAAvnC,UAAAunC,EAAI,IAAJ1rD,GAAAkE,EAAAwF,MAAA9J,KAA2C2B,IAA3C3B,WALAI,GAAA8nC,WAAiC,IAvBjC,MAsBuBzjC,GAAvBuuF,EAAA1uF,GAGI8E,OAAJC,eAAQ2pF,EAARzyF,UAAA,gBAAI,WAAiB,MAAOP,MAAKkoC,eAC7B,SAAa5+B,GAActJ,KAAKkoC,UAAY5uB,EAAAA,sBAAsBhQ,oCA1BtE0pF,GAsBuBD,GCOvB,QAAgBt6E,GACZs6E,EAASE,GACX,MAAF,UAAA3uF,GAmBI,QAAJ0uF,KAAA,IAAgB,GAAhBrxF,MAAAmqD,EAAA,EAAgBA,EAAhBvnC,UAAA/jB,OAAgBsrD,IAAAnqD,EAAhBmqD,GAAAvnC,UAAAunC,EAAI,IAAJ1rD,GAAAkE,EAAAwF,MAAA9J,KACe2B,IADf3B,WAIMI,GAAKgnD,MAAQ6rC,IAtDnB,MA+BuBxuF,GAAvBuuF,EAAA1uF,GAGI8E,OAAJC,eAAQ2pF,EAARzyF,UAAA,aAAI,WAA4B,MAAOP,MAAKmnF,YACxC,SAAU79E,GACR,GAAM6+E,GAAe7+E,GAAS2pF,CAE1B9K,KAAiBnoF,KAAKmnF,SACpBnnF,KAAKmnF,QACPnnF,KAAKW,YAAYC,cAAcI,UAAUwY,OAAO,OAAOxZ,KAAKmnF,QAE1DgB,GACFnoF,KAAKW,YAAYC,cAAcI,UAAU0Y,IAAI,OAAOyuE,GAGtDnoF,KAAKmnF,OAASgB,oCA9CtB6K,GA+BuBD,GCVvB,QAAgB//E,GAA8C+/E,GAC5D,MAAF,UAAAzuF,GAOI,QAAJ0uF,KAAA,IAAgB,GAAhBrxF,MAAAmqD,EAAA,EAAgBA,EAAhBvnC,UAAA/jB,OAAgBsrD,IAAAnqD,EAAhBmqD,GAAAvnC,UAAAunC,EAAI,IAAJ1rD,GAAAkE,EAAAwF,MAAA9J,KAA2C2B,IAA3C3B,WANAI,GAAA8yF,gBAAsC,IAvBtC,MAsBuBzuF,GAAvBuuF,EAAA1uF,GAII8E,OAAJC,eAAQ2pF,EAARzyF,UAAA,qBAAI,WAAsB,MAAOP,MAAKkzF,oBAClC,SAAkB5pF,GAActJ,KAAKkzF,eAAiB55E,EAAAA,sBAAsBhQ,oCA3BhF0pF,GAsBuBD,GCAvB,QAAgBjvF,GAAiDivF,EAAS/yB,GAExE,WAFF,KAAAA,IAA0EA,EAA1E,GAEA,SAAA17D,GASI,QAAJ0uF,KAAA,IAAgB,GAAhBrxF,MAAAmqD,EAAA,EAAgBA,EAAhBvnC,UAAA/jB,OAAgBsrD,IAAAnqD,EAAhBmqD,GAAAvnC,UAAAunC,EAAI,IAAJ1rD,GAAAkE,EAAAwF,MAAA9J,KACe2B,IADf3B,WARAI,GAAA68E,UAAgCjd,IAzBhC,MAwBuBv7D,GAAvBuuF,EAAA1uF,GAGI8E,OAAJC,eAAQ2pF,EAARzyF,UAAA,gBAAI,WAAyB,MAAOP,MAAKwW,UAAY,EAAIxW,KAAKi9E,eAC1D,SAAa3zE,GAEXtJ,KAAKi9E,UAAqB,MAAT3zE,EAAgBA,EAAQ02D,mCA9B/CgzB,GAwBuBD,GCavB,QAAgBxvC,GAAsDwvC,GAEpE,MAAF,UAAAzuF,GAyBI,QAAJ0uF,KAAA,IAAgB,GAAhBrxF,MAAAmqD,EAAA,EAAgBA,EAAhBvnC,UAAA/jB,OAAgBsrD,IAAAnqD,EAAhBmqD,GAAAvnC,UAAAunC,EAAI,IAAJ1rD,GAAAkE,EAAAwF,MAAA9J,KACe2B,IADf3B,WAvBAI,GAAAmvF,YAA0B,EAM1BnvF,EAAAykD,aAA4B,GAAIh3C,GAAAA,UA/ChC,MAuCuBpJ,GAAvBuuF,EAAA1uF,GAYI0uF,EAAJzyF,UAAAmlD,iBAAI,WACE,GAAMmzB,GAAW74E,KAAKuvF,WAChB74D,EAAS12B,KAAKojD,kBAAoBpjD,KAAKmjD,YACvCgwC,EAAUnzF,KAAK2wC,mBAAqB3wC,KAAKkjD,0BACzCp/B,EAAU9jB,KAAKqjD,UAAYrjD,KAAKqjD,UAAgC,QAAG,KACnEu1B,EAAWua,EAAQtvE,aAAaC,EAAS4S,EAE3CkiD,KAAaC,IACf74E,KAAKuvF,WAAa3W,EAClB54E,KAAK6kD,aAAat7C,SA5D1BypF,GAuCuBD,GCJvB,QAAgBh5D,GAA4Cg5D,GAE1D,MAAF,UAAAzuF,GAyBI,QAAJ0uF,KAAA,IAAgB,GAAhBrxF,MAAAmqD,EAAA,EAAgBA,EAAhBvnC,UAAA/jB,OAAgBsrD,IAAAnqD,EAAhBmqD,GAAAvnC,UAAAunC,EAAI,IAAJ1rD,GAAAkE,EAAAwF,MAAA9J,KAA2C2B,IAA3C3B,WAvBAI,GAAA4nC,gBAAqB,EAOrB5nC,EAAAgzF,uBAMAhzF,EAAA4pB,YAAkB,GAAIqpE,GAAAA,WAAiB,SAAAC,GAG7BlzF,EAAK4nC,eACP5nC,EAAKmzF,kBAAkBD,GAEvBlzF,EAAwB,oBAAEmH,KAAK+rF,OA1DvC,MAqCuB7uF,GAAvBuuF,EAAA1uF,GAgCI0uF,EAAJzyF,UAAAu6B,iBAAI,WACE,GAAI96B,KAAKgoC,eACP,KAAMtS,OAAM,wFAId11B,MAAKgoC,gBAAiB,EAEtBhoC,KAAwB,oBAAE+H,QAAQ/H,KAAKuzF,mBACvCvzF,KAAKozF,oBAAsB,MAI7BJ,EAAJzyF,UAAAgzF,kBAAI,SAAkBD,GAChBA,EAAW/pF,OACX+pF,EAAWnlF,YApFjB6kF,GAqCuBD,GCnBvB,QAAgBS,KACd,MAAOC,GAAAA,OAAOC,EAAAA,WC+BhB,QAASC,GAASnzF,EAAgBozF,GAEhC,IAAK,GADCC,GAAcpsF,MAAMjH,GACjBmI,EAAI,EAAGA,EAAInI,EAAQmI,IAC1BkrF,EAAYlrF,GAAKirF,EAAcjrF,EAEjC,OAAOkrF,GCwQT,QAASC,GAA0B1nF,GAIjC23E,OAAOp+B,iBAAiBv5C,GAAS2nF,iBAAiB,WAMpD,QAASC,GAAyB/mE,EAAWE,EAAW2jE,GACtD,GAAMmD,GAAQ1oF,KAAK0L,IAAI1L,KAAKoiC,IAAI1gB,EAAI6jE,EAAKhkF,MAAOvB,KAAKoiC,IAAI1gB,EAAI6jE,EAAKz3D,QAC5D66D,EAAQ3oF,KAAK0L,IAAI1L,KAAKoiC,IAAIxgB,EAAI2jE,EAAKliE,KAAMrjB,KAAKoiC,IAAIxgB,EAAI2jE,EAAKv3D,QACjE,OAAOhuB,MAAK4oF,KAAKF,EAAQA,EAAQC,EAAQA,yCvBhE3CE,GAAyB7nD,EAAzBh2B,UACQ89E,EAARjmD,EAA8B73B,UACtB+9E,EAAR,gBACAF,EAAyBzrF,GAAzB8jC,OAAA2nD,EAAAzrF,GAAA8jC,QAAA4nD,EAAAC,IAEAA,GAGA,OAAAA,GAGA,MAAA,uBAcA,GAAAC,GAAAxoC,EAAAyoC,aAEAD,EAGIA,EAAJC,EAAAC,EAAArrC,EACA79C,KAAA0L,IAAA,EAAAs9E,EAAAnrC,EAAAorC,GAGAC,EwBrSA,QAAgBhF,KACd,MAAO/5D,OAAM,gEAIf,QAAgBq6D,GAAmC/O,GACjD,MAAOtrD,OAAM,4CAA2CsrD,EAA1D,QAIA,QAAgBkP,KACd,MAAOx6D,OAAM,sDnCqDf,QAAgB68D,KACd,OAAQ5P,uBAAuB,G9HRjC,QAAgBK,GAAyCnuC,GACvD,MAAO,YAAM,MAAAA,GAAQm2C,iBAAiB0J,cAwBxC,QAAgBtO,KACd,MAAO1wD,OAAM,6MwImFf,QAASs9C,GAAqBl8C,GAC5B,MAAFM,OAAa,GAAI8xD,IAA2BpyD,GhCzI5C,QAAgB25C,KACd,KAAM/6C,OAAM,yEEOd,QAAgBi/D,GAAmC9/C,GACjD,MAAO,YAAM,MAAAA,GAAQm2C,iBAAiBC,SAIxC,QAAgB7Y,GAA4Cv9B,GAE1D,MAAO,YAAM,MAAAA,GAAQm2C,iBAAiBC,SAuUxC,QAASjY,GACLl8C,EAA0B89D,GAC5B,MAAFx9D,OAAaw9D,EAAmB99D,GC3PhC,QAAS29C,GAAiBroE,EAAkCymE,GAG1D,IAFA,GAAIn8C,GAA6BtqB,EAAQxL,cAAcozE,cAEhDt9C,IAAWA,EAAO11B,UAAUC,SAAS,yBAC1Cy1B,EAASA,EAAOs9C,aAGlB,OAAOt9C,GAASm8C,EAAY/2D,KAAK,SAAA23D,GAAU,MAAAA,GAAO30D,KAApD,EAAmEA,KAAM,KuDlIzE,QAAgBq4D,GAAgC11E,GAC9C,MAAOi0B,OAAM,eAAej0B,EAA9B,mCCDA,QAAgBq4D,GAA2B+6B,GACzC,MAAOn/D,OACH,wCAAwCm/D,EAD9C,0JlFmDA,QAAgBrnB,IAAuC34B,GACrD,MAAO,YAAM,MAAAA,GAAQm2C,iBAAiB0J,cNqNxC,QAASjlC,IAAKqlC,GAAuB,MAAO,QAAQA,EAApD,IAIA,QAAS5lC,IAAe5lD,GACtB,MAAQA,GAAMyrF,MAAM,aAAgBzrF,EAAQA,EAAQ,KG5PtD,QAAgBisD,IAA4BvC,GAC1C,MAAOt9B,OAAM,sCAAsCs9B,EAArD,KASA,QAAgBiE,MACd,MAAOvhC,OAAM,8JAWf,QAAgBi/B,IAAmCtC,GACjD,MAAO38B,OAAM,yHACkD28B,EAAjE,MAQA,QAAgBsB,IAAuCR,GACrD,MAAOz9B,OAAM,2HACkDy9B,EAAjE,MAihBA,QAAgBwE,IACdq9B,EACAC,EACAC,EACA/2E,GACA,MAAO62E,IAAkB,GAAI1iC,IAAgB2iC,EAAYC,EAAW/2E,GAiBtE,QAAS02C,IAASG,GAChB,MAAOA,GAAIyB,WAAU,GAIvB,QAASvB,IAAQ7B,EAAmB7yC,GAClC,MAAO6yC,GAAY,IAAM7yC,EsF/lB3B,QAAgB8gC,MACd,KAAM5rB,OAAM,0KAYd,QAAgB8nB,MACd,KAAM9nB,OAAM,kIASd,QAAgBgoB,MACd,KAAMhoB,OAAM,gIlGiCd,QAAgB8mB,MACd,OACEa,gBAAgB,EAChBV,UAAW,QACXE,UAAW,QACXM,cAAe,oCC1BnB,QAAgBsC,IAAiC5K,GAC/C,MAAO,YAAM,MAAAA,GAAQm2C,iBAAiB0J,ckGpCxC,QAAgB5vC,MACd,MAAOpvB,OAAM,iEASf,QAAgB8xB,MACd,MAAO9xB,OAAM,sDAQf,QAAgBqvB,MACd,MAAOrvB,OAAM,qClK6Gf,QAAgBqtB,IAA4ClO,GAE1D,MAAO,YAAM,MAAAA,GAAQm2C,iBAAiB0J,cCtFxC,QAAgBp/C,IAAkCxnC,GAChD,MAAO4nB,OAAM,qBAAqB5nB,EAApC,iBAQA,QAAgByjC,IAAoCsD,GAClD,MAAO,YAAM,MAAAA,GAAQm2C,iBAAiB0J,YAAYS,eAAgB/jD,MAyBpE,QAAgBK,MACd,OACEM,UAAW,EACXC,UAAW,EACX8B,kBAAmB,MuDxCvB,QAAgBmD,IAAoCm+C,GAClD,MAAOA,IAAc,GAAIr+C,IVQ3B,QAAgBmC,MACd,GAAM/3C,GAAYsyF,EAAAA,OAAO3wF,EAAAA,SAEzB,QAAQ22C,SADUt4C,GAAaA,EAAUi4C,UAAYj4C,EAAUi4C,SAASK,UAAa,uBAkJ7D,6BAAF,KAAxBxiC,IAA4CA,EAA5C,KAAA1L,KAAA0L,IAAAxL,EAAAF,KAAAE,IAAAwL,EAAAD,IEjJA,QAAgBouB,MACd,OAAQW,SAAUf,IRtBpB,QAAgB/F,IAA8BnxB,GAC5C,KAAM4nB,OAAM,iDAAgD5nB,EAA9D,OAeA,QAAgBq8B,MACd,OAAO,EFzBT,QAAgBlU,MACd,MAAO,IAAInC,I6HhCb,QAAgByG,IAAgCzb,GAC9C,MAAO4W,OAAM,kDAAkD5W,EAAjE,MAIA,QAAgBkB,MACd,MAAO0V,OAAM,oFAIf,QAAgB2E,MACd,MAAO3E,OAAM,oDAIf,QAAgByE,IAA6BpZ,GAC3C,MAAO2U,OAAS3U,EAAlB,qD5HkJA,QAAS6Z,IAAsB1Z,EACAc,GAC7B,GAAIqzE,IAA8B,MAAO,OAIzC,OAHa,QAATn0E,GAAmBm0E,EAAUnvC,UAC5BlkC,GAAgBqzE,EAAU9tF,KAAK,IAE7B8tF,ExBpJT,QAAgBh2E,IAAsC+1E,GACpD,MAAOA,IAAc,GAAIp2E,IZC3B,QAAgBjT,MAMd,MALe,UAACK,GAAyB,OACvCU,KAAMV,GAAWA,EAAQqG,YAAc,GAAK,KAAO,IACnD1F,MAAOX,GAAWA,EAAQuG,aAAe,GAAK,KAAO,kOgJlBzD,GAAIkgF,IAAgB,SAASH,EAAG1pE,GAI5B,OAHA6pE,GAAgBzpF,OAAOksF,iBAChBC,uBAA2B9tF,QAAS,SAAUirF,EAAG1pE,GAAK0pE,EAAE6C,UAAYvsE,IACvE,SAAU0pE,EAAG1pE,GAAK,IAAK,GAAI8uB,KAAK9uB,GAAOA,EAAE9a,eAAe4pC,KAAI46C,EAAE56C,GAAK9uB,EAAE8uB,MACpD46C,EAAG1pE,IASjBwsE,GAAW,WAQlB,MAPAA,IAAWpsF,OAAOqsF,QAAU,SAAkBpf,GAC1C,IAAK,GAAIqf,GAAG/sF,EAAI,EAAGgtF,EAAIpxE,UAAU/jB,OAAQmI,EAAIgtF,EAAGhtF,IAAK,CACjD+sF,EAAInxE,UAAU5b,EACd,KAAK,GAAImvC,KAAK49C,GAAOtsF,OAAO7I,UAAU2N,eAAexN,KAAKg1F,EAAG59C,KAAIu+B,EAAEv+B,GAAK49C,EAAE59C,IAE9E,MAAOu+B,IAEJmf,GAAS1rF,MAAM9J,KAAMukB,wCiBrChC,MAUA0W,GAAAC,eAA0B,8BAC1BD,EAAAuuD,mBAA8B,8BAC9BvuD,EAAAquD,mBAA8B,4BAC9BruD,EAAA26D,YAAuB,8BAbvB36D,iCAAA,MAmBAF,GAAAsuD,QAAmB,QACnBtuD,EAAAC,SAAoB,QACpBD,EAAAwuD,QAAmB,QArBnBxuD,KhBaa86D,GAAyB,GAAIjqF,GAAAA,eAAwB,qBAChEC,WAAY,OACZC,QAASgnF,kBA+BT,QAAF5vF,GAAkE4yF,GAAA91F,KAAlE81F,qBAAkEA,EAXlE91F,KAAA+1F,sBAAiC,EAGjC/1F,KAAAg2F,mBAA8B,EAG9Bh2F,KAAAmB,UAA0C,gBAAbgd,WAAyBA,SAAWA,SAAW,KAG5Ene,KAAAi2F,QAAsC,gBAAXlS,SAAuBA,OAASA,OAAS,KAG5D/jF,KAAKk2F,sBAAwBl2F,KAAK+1F,uBACpC/1F,KAAKm2F,yBACLn2F,KAAKo2F,uBACLp2F,KAAK+1F,sBAAuB,GAlDlC,MAuDU7yF,GAAV3C,UAAA21F,6BACI,MAAOl2F,MAAK81F,sBAAwBz3E,EAAAA,cAAgBre,KAAKq2F,cAInDnzF,EAAV3C,UAAA81F,sBACI,MAAOr2F,MAAKi2F,UAAYj2F,KAAKi2F,QAAmB,WAAKj2F,KAAKi2F,QAAiB,UAGrE/yF,EAAV3C,UAAA41F,kCACQn2F,KAAKmB,YAAcnB,KAAKmB,UAAUm1F,SACpCxuC,QAAQC,KACN,yHAME7kD,EAAV3C,UAAA61F,gCAGI,GAAIp2F,KAAKmB,WAAanB,KAAKmB,UAAUo1F,MAAoC,kBAArB5wC,kBAAiC,CACnF,GAAM6wC,GAAcx2F,KAAKmB,UAAUwlC,cAAc,MAEjD6vD,GAAYx1F,UAAU0Y,IAAI,2BAC1B1Z,KAAKmB,UAAUo1F,KAAK1vD,YAAY2vD,EAEhC,IAAMC,GAAgB9wC,iBAAiB6wC,EAKnCC,IAA2C,SAA1BA,EAAct3B,SACjCrX,QAAQC,KACN,sLAMJ/nD,KAAKmB,UAAUo1F,KAAKr9B,YAAYs9B,KAKpCtzF,EAAF3C,UAAAm2F,wBAAE,YACM12F,KAAKg2F,mBAAsBh2F,KAAKi2F,UAIhCj2F,KAAKk2F,sBAAwBl2F,KAAKi2F,QAAgB,QACpDnuC,QAAQC,KACN,wFAEJ/nD,KAAKg2F,mBAAoB,mBAhF7Bv0F,KAACuB,EAAAA,SAADrB,OACEsB,SAAU0zF,EAAAA,YACVxzF,SAAUwzF,EAAAA,oDAeZl1F,KAAA8qD,QAAA3pD,aAAAnB,KAAe2W,EAAAA,WAAf3W,KAA2BoB,EAAAA,OAA3BlB,MAAkCk0F,SA9ClC3yF,KOYa0zF,GAAkB,GAAIhrF,GAAAA,eAAuB,mBACxDC,WAAY,OACZC,QAAS0nF,IAcEqD,IAA4B/xF,QAAS8xF,GAAiB7xF,YAAa2uF,EAAAA,WAGhF53B,GAAA,wBAMA97D,KAAA82F,eAA6B,GAAIjpF,GAAAA,QArCjC,MAoCEzE,QAAFC,eAAMyyD,EAANv7D,UAAA,qBAAE,WAAwC,MAAOP,MAAK82F,gDAqLpDh7B,EAAFv7D,UAAAi9D,YAAE,SAAYl0D,GACV,MAAa,OAATA,GAAiBtJ,KAAKo/D,eAAe91D,IAAUtJ,KAAKu+D,QAAQj1D,GACvDA,EAEFtJ,KAAKkkB,WAOd43C,EAAFv7D,UAAAw2F,UAAE,SAAUC,GACRh3F,KAAKg3F,OAASA,EACdh3F,KAAK82F,eAAevtF,QAUtBuyD,EAAFv7D,UAAAk9D,YAAE,SAAYjxB,EAAUyqD,GACpB,MAAOj3F,MAAKqnE,QAAQ76B,GAASxsC,KAAKqnE,QAAQ4vB,IACtCj3F,KAAKwnE,SAASh7B,GAASxsC,KAAKwnE,SAASyvB,IACrCj3F,KAAK6nE,QAAQr7B,GAASxsC,KAAK6nE,QAAQovB,IAUzCn7B,EAAFv7D,UAAA+5D,SAAE,SAAS9tB,EAAiByqD,GACxB,GAAIzqD,GAASyqD,EAAQ,CACnB,GAAIC,GAAal3F,KAAKu+D,QAAQ/xB,GAC1B2qD,EAAcn3F,KAAKu+D,QAAQ04B,EAC/B,OAAIC,IAAcC,GACRn3F,KAAKy9D,YAAYjxB,EAAOyqD,GAE3BC,GAAcC,EAEvB,MAAO3qD,IAASyqD,GAWlBn7B,EAAFv7D,UAAAmmE,UAAE,SAAUlM,EAAS/uD,EAAgBwL,GACjC,MAAIxL,IAAOzL,KAAKy9D,YAAYjD,EAAM/uD,GAAO,EAChCA,EAELwL,GAAOjX,KAAKy9D,YAAYjD,EAAMvjD,GAAO,EAChCA,EAEFujD,GAxRXsB,KUwBa8D,GAAmB,GAAIh0D,GAAAA,eAA+B,oBTV7DwrF,GAAmC,mBAARC,MAI3BC,IACJpxB,MACE,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAC1E,UAAW,WAAY,YAEzBqxB,OAAU,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OACvFpxB,QAAW,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAKpEoJ,GAAqC,SAAA5mE,GAAK,MAAAzD,QAAOyD,EAAI,IAA/C6uF,GAAqB7D,EAAM,GAAjCpkB,IAIMkoB,IACJvxB,MAAS,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAC3EqxB,OAAU,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OACpDpxB,QAAW,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MASrCuxB,GACF,oGA+BF,QAAFC,GAAmDC,EAAuBryD,GAAxE,GAAFnlC,GACIkE,EADJ5D,KAAAV,OAAAA,WAFAI,GAAAy3F,kBAA8B,EAI1BvzF,EAAJ/D,UAAUw2F,UAAVr2F,KAAAN,EAAoBw3F,GAGhBx3F,EAAKy3F,kBAAoBtyD,EAASO,QAClC1lC,EAAK03F,WAAavyD,EAASO,SAAWP,EAASM,OAnFnD,MA4DuCphC,GAAvCkzF,EAAArzF,GA0BEqzF,EAAFp3F,UAAA8mE,QAAE,SAAQ7M,GACN,MAAOA,GAAKu9B,eAGdJ,EAAFp3F,UAAAinE,SAAE,SAAShN,GACP,MAAOA,GAAKgN,YAGdmwB,EAAFp3F,UAAAsnE,QAAE,SAAQrN,GACN,MAAOA,GAAKqN,WAGd8vB,EAAFp3F,UAAAkoE,aAAE,SAAajO,GACX,MAAOA,GAAKw9B,UAGdL,EAAFp3F,UAAA8nE,cAAE,SAAc57D,GAAd,GAAFrM,GAAAJ,IACI,IAAIo3F,GAAmB,CACrB,GAAMa,GAAM,GAAIZ,MAAKa,eAAel4F,KAAKg3F,QAASltB,MAAOr9D,EAAO0rF,SAAU,OAC1E,OAAOxE,GAAM,GAAI,SAAAhrF,GACb,MAAAvI,GAAKg4F,+BAA+Bh4F,EAAKi4F,QAAQJ,EAAK,GAAIK,MAAK,KAAM3vF,EAAG,OAE9E,MAAO2uF,IAAoB7qF,IAG7BkrF,EAAFp3F,UAAAuoE,aAAE,WAAA,GAAF1oE,GAAAJ,IACI,IAAIo3F,GAAmB,CACrB,GAAMmB,GAAM,GAAIlB,MAAKa,eAAel4F,KAAKg3F,QAASwB,IAAK,UAAWL,SAAU,OAC5E,OAAOxE,GAAM,GAAI,SAAAhrF,GAAK,MAAAvI,GAAKg4F,+BACvBh4F,EAAKi4F,QAAQE,EAAK,GAAID,MAAK,KAAM,EAAG3vF,EAAI,OAE9C,MAAO6uF,KAGTG,EAAFp3F,UAAAwlE,kBAAE,SAAkBt5D,GAAlB,GAAFrM,GAAAJ,IACI,IAAIo3F,GAAmB,CACrB,GAAMqB,GAAM,GAAIpB,MAAKa,eAAel4F,KAAKg3F,QAAS0B,QAASjsF,EAAO0rF,SAAU,OAC5E,OAAOxE,GAAM,EAAG,SAAAhrF,GAAK,MAAAvI,GAAKg4F,+BACtBh4F,EAAKi4F,QAAQI,EAAK,GAAIH,MAAK,KAAM,EAAG3vF,EAAI,OAE9C,MAAO8uF,IAA0BhrF,IAGnCkrF,EAAFp3F,UAAA2pE,YAAE,SAAY1P,GACV,GAAI48B,GAAmB,CACrB,GAAMuB,GAAM,GAAItB,MAAKa,eAAel4F,KAAKg3F,QAASrtB,KAAM,UAAWwuB,SAAU,OAC7E,OAAOn4F,MAAKo4F,+BAA+Bp4F,KAAKq4F,QAAQM,EAAKn+B,IAE/D,MAAOt1D,QAAOlF,KAAKqnE,QAAQ7M,KAG7Bm9B,EAAFp3F,UAAAslE,kBAAE,WAEE,MAAO,IAGT8xB,EAAFp3F,UAAAunE,kBAAE,SAAkBtN,GAChB,MAAOx6D,MAAK6nE,QAAQ7nE,KAAK44F,wBACrB54F,KAAKqnE,QAAQ7M,GAAOx6D,KAAKwnE,SAAShN,GAAQ,EAAG,KAGnDm9B,EAAFp3F,UAAAs4F,MAAE,SAAMr+B,GACJ,MAAOx6D,MAAK0nE,WAAW1nE,KAAKqnE,QAAQ7M,GAAOx6D,KAAKwnE,SAAShN,GAAOx6D,KAAK6nE,QAAQrN,KAG/Em9B,EAAFp3F,UAAAmnE,WAAE,SAAWiC,EAAcG,EAAetP,GAGtC,GAAIsP,EAAQ,GAAKA,EAAQ,GACvB,KAAMp0C,OAAM,wBAAwBo0C,EAA1C,6CAGI,IAAItP,EAAO,EACT,KAAM9kC,OAAM,iBAAiB8kC,EAAnC,oCAGI,IAAItR,GAASlpD,KAAK44F,wBAAwBjvB,EAAMG,EAAOtP,EAEvD,IAAItR,EAAOse,YAAcsC,EACvB,KAAMp0C,OAAM,iBAAiB8kC,EAAnC,2BAAkEsP,EAAlE,KAGI,OAAO5gB,IAGTyuC,EAAFp3F,UAAAgmE,MAAE,WACE,MAAO,IAAI+xB,OAGbX,EAAFp3F,UAAA0+D,MAAE,SAAM31D,GAGJ,MAAoB,gBAATA,GACF,GAAIgvF,MAAKhvF,GAEXA,EAAQ,GAAIgvF,MAAKA,KAAKr5B,MAAM31D,IAAU,MAG/CquF,EAAFp3F,UAAA2+D,OAAE,SAAO1E,EAAYs+B,GACjB,IAAK94F,KAAKu+D,QAAQ/D,GAChB,KAAM9kC,OAAM,iDAGd,IAAI0hE,GAAmB,CAGjBp3F,KAAK83F,aAAet9B,EAAKu9B,cAAgB,GAAKv9B,EAAKu9B,cAAgB,QACrEv9B,EAAOx6D,KAAK64F,MAAMr+B,GAClBA,EAAKu+B,YAAYxtF,KAAK0L,IAAI,EAAG1L,KAAKE,IAAI,KAAM+uD,EAAKu9B,kBAGnDe,EAAN1hE,MAA0B0hE,GAAeX,SAAU,OAE7C,IAAMQ,GAAM,GAAItB,MAAKa,eAAel4F,KAAKg3F,OAAQ8B,EACjD,OAAO94F,MAAKo4F,+BAA+Bp4F,KAAKq4F,QAAQM,EAAKn+B,IAE/D,MAAOx6D,MAAKo4F,+BAA+B59B,EAAKw+B,iBAGlDrB,EAAFp3F,UAAAwnE,iBAAE,SAAiBvN,EAAYy+B,GAC3B,MAAOj5F,MAAKgoE,kBAAkBxN,EAAc,GAARy+B,IAGtCtB,EAAFp3F,UAAAynE,kBAAE,SAAkBxN,EAAY0+B,GAC5B,GAAIC,GAAUn5F,KAAK44F,wBACf54F,KAAKqnE,QAAQ7M,GAAOx6D,KAAKwnE,SAAShN,GAAQ0+B,EAAQl5F,KAAK6nE,QAAQrN,GAUnE,OAJIx6D,MAAKwnE,SAAS2xB,MAAcn5F,KAAKwnE,SAAShN,GAAQ0+B,GAAU,GAAK,IAAM,KACzEC,EAAUn5F,KAAK44F,wBAAwB54F,KAAKqnE,QAAQ8xB,GAAUn5F,KAAKwnE,SAAS2xB,GAAU,IAGjFA,GAGTxB,EAAFp3F,UAAAqnE,gBAAE,SAAgBpN,EAAY4+B,GAC1B,MAAOp5F,MAAK44F,wBACR54F,KAAKqnE,QAAQ7M,GAAOx6D,KAAKwnE,SAAShN,GAAOx6D,KAAK6nE,QAAQrN,GAAQ4+B,IAGpEzB,EAAFp3F,UAAA84F,UAAE,SAAU7+B,GACR,OACEA,EAAK8+B,iBACLt5F,KAAKu5F,QAAQ/+B,EAAKg/B,cAAgB,GAClCx5F,KAAKu5F,QAAQ/+B,EAAKi/B,eAClBhrD,KAAK,MAQTkpD,EAAFp3F,UAAAi9D,YAAE,SAAYl0D,GACV,GAAqB,gBAAVA,GAAoB,CAC7B,IAAKA,EACH,MAAO,KAIT,IAAIouF,GAAegC,KAAKpwF,GAAQ,CAC9B,GAAIkxD,GAAO,GAAI89B,MAAKhvF,EACpB,IAAItJ,KAAKu+D,QAAQ/D,GACf,MAAOA,IAIb,MAAOl2D,GAAX/D,UAAiBi9D,YAAjB98D,KAAAV,KAA6BsJ,IAG3BquF,EAAFp3F,UAAA6+D,eAAE,SAAe50C,GACb,MAAOA,aAAe8tE,OAGxBX,EAAFp3F,UAAAg+D,QAAE,SAAQ/D,GACN,OAAQm/B,MAAMn/B,EAAKo/B,YAGrBjC,EAAFp3F,UAAA2jB,QAAE,WACE,MAAO,IAAIo0E,MAAKuB,MAIVlC,EAAVp3F,UAAAq4F,wBAAA,SAAkCjvB,EAAcG,EAAetP,GAC3D,GAAMtR,GAAS,GAAIovC,MAAK3uB,EAAMG,EAAOtP,EAOrC,OAHImP,IAAQ,GAAKA,EAAO,KACtBzgB,EAAO6vC,YAAY/4F,KAAKqnE,QAAQne,GAAU,MAErCA,GAQDyuC,EAAVp3F,UAAAg5F,QAAA,SAAkB5D,GACd,OAAQ,KAAOA,GAAGl1F,OAAO,IAUnBk3F,EAAVp3F,UAAA63F,+BAAA,SAAyCxhC,GACrC,MAAOA,GAAI3vB,QAAQ,kBAAmB,KAchC0wD,EAAVp3F,UAAA83F,QAAA,SAAkBM,EAA0Bn+B,GACxC,GAAMk4B,GAAI,GAAI4F,MAAKA,KAAKwB,IACpBt/B,EAAKu9B,cAAev9B,EAAKgN,WAAYhN,EAAKqN,UAAWrN,EAAKu/B,WAC1Dv/B,EAAKw/B,aAAcx/B,EAAKy/B,aAAcz/B,EAAK0/B,mBAC/C,OAAOvB,GAAIz5B,OAAOwzB,mBAnQtBjxF,KAACsd,EAAAA,iDAkBDtd,KAAAyD,OAAAtC,aAAAnB,KAAe2W,EAAAA,WAAf3W,KAA2BoB,EAAAA,OAA3BlB,MAAkCi1F,QArElCn1F,KAAQ+b,EAAAA,YARRm6E,GA4DuC77B,IUjD1Bq+B,IACXl7B,OACErC,UAAW,MAEbuC,SACEvC,WAAY+M,KAAM,UAAWG,MAAO,UAAW0uB,IAAK,WACpD/sB,gBAAiB9B,KAAM,UAAWG,MAAO,SACzCZ,eAAgBS,KAAM,UAAWG,MAAO,OAAQ0uB,IAAK,WACrDztB,oBAAqBpB,KAAM,UAAWG,MAAO,sCCnBjD,sBAqBAroE,KAACuB,EAAAA,SAADrB,OACEsB,SAAU+9B,EAAAA,gBACVn8B,YACGC,QAASg3D,GAAa/pC,SAAU4lE,SAxBrCyC,KAgCA7qB,GAAoD4qB,+BAhCpD,sBA8BA14F,KAACuB,EAAAA,SAADrB,OACEsB,SAAUm3F,IACVv1F,YAAaC,QAAS86D,GAAkB4P,SAA1CD,SAhCA8qB,iCCAA,MAcEC,GAAF/5F,UAAAsjB,aAAE,SAAaC,EAA6BC,GACxC,SAAUD,GAAWA,EAAQI,UAAYJ,EAAQy2E,OAAUx2E,GAAQA,EAAKy2E,4BAH5E/4F,KAACsd,EAAAA,aAZDu7E,iCAAA,MAsBEl2E,GAAF7jB,UAAAsjB,aAAE,SAAaC,EAA6BC,GACxC,SAAUD,GAAWA,EAAQI,UAAYJ,EAAQ22E,SAAY12E,GAAQA,EAAKy2E,4BAH9E/4F,KAACsd,EAAAA,WAADpd,OAAakK,WAAY,8GApBzBuY,KCuBas2E,GAAqB,GAAI9uF,GAAAA,eAA8B,sBAE9D+uF,IACJ,YACA,QACA,aACA,WACA,aACA,aAQFprB,GAAM,aAANqrB,GACO,aAFDC,IACJC,GAAFvrB,GACEwrB,IAAFH,mBASE,QAAF5oE,GACoDgpE,EACpCC,GAFd,GAAF76F,GAGIkE,EAHJ5D,KAAAV,OAAAA,WACoDI,GAApD46F,eAAoDA,EAHpD56F,EAAA86F,OAAWP,GAMHM,GACFA,EAAavE,4BAtDnB,MA6CmCjyF,GAAnCutB,EAAA1tB,GA0BE0tB,EAAFzxB,UAAA46F,YAAE,SAAY/uF,GACV,GAAMgvF,GAAyC,mBAAXrX,QAAyB,OAAgBsX,OAAS,IAEtF,KAAKD,EASH,MAAOP,GAGT,IAAMS,GAAK,GAAIF,GAAOhvF,EAASpM,KAAKg7F,oBAAkBr4F,IAGhD44F,EAAM,GAAIH,GAAOI,IACjBC,EAAQ,GAAIL,GAAOM,MACnBC,EAAQ,GAAIP,GAAOQ,MAKnBC,EAAQ77F,KAAK87F,kBAAkBP,GAAM7mF,MAAO,QAASqnF,UAAW,GAAIN,GACpEO,EAAYh8F,KAAK87F,kBAAkBH,GAAQjnF,MAAO,YAAaunF,KAAM,KAe3E,OAZAV,GAAIW,cAAcT,GAOlBO,EAAUE,cAAcL,GAGxBP,EAAG5hF,KAAK+hF,EAAOE,EAAOJ,EAAKM,EAAOG,IAElC,GAIMhqE,EAAVzxB,UAAAu7F,kBAAA,SAA4B/I,EAAkBxmD,GAA9C,IAA4D,GAA5D4vD,MAAArwC,EAAA,EAA4DA,EAA5DvnC,UAAA/jB,OAA4DsrD,IAAAqwC,EAA5DrwC,EAAA,GAAAvnC,UAAAunC,EACI,IAAIswC,GAAa,GAAKrJ,GAAoC,YAAExmD,EAK5D,OAHA4vD,GAAa50F,KAAKwrF,GAClBoJ,EAAap0F,QAAQ,SAAAk2C,GAAQ,MAAAm+C,GAAWF,cAAcj+C,KAE/Cm+C,kBA9EX36F,KAACsd,EAAAA,iDAMDtd,SAAAkB,GAAAC,aAAAnB,KAAK2W,EAAAA,WAAL3W,KAAiBoB,EAAAA,OAAjBlB,MAAwB+4F,QAxCxBj5F,KAAQyB,GAARN,aAAAnB,KAyCK2W,EAAAA,cAnDL4Z,GA6CmCqqE,EAAAA,iDC7CnC,sBAsBA56F,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,wBACVK,MAAOC,MAAS,gBAxBlBupD,KAgCAV,GAAA,WACE,QAAFA,GAAsBC,EAAoCxoC,GAAxD,GAAFpiB,GAAAJ,IAAsBA,MAAtBgrD,OAAsBA,EAAoChrD,KAA1DwiB,SAA0DA,EACtDxiB,KAAKs8F,cAAct8F,KAAKgrD,OAAOxqD,QAE/BR,KAAKgrD,OAAO9qD,QAAQC,UAAU,WAC5BC,EAAKk8F,cAAcl8F,EAAK4qD,OAAOxqD,UArCrC,MAyCUuqD,GAAVxqD,UAAA+7F,cAAA,SAAwBC,GACpBv8F,KAAKw8F,gBACS,IAAVD,GAAyB,IAAVA,EACjBv8F,KAAKy8F,UAAU,OAAOF,EAA5B,SAA0C,GAC3BA,EAAQ,GACjBv8F,KAAKy8F,UAAU,kBAAkB,IAI7B1xC,EAAVxqD,UAAAi8F,yBACIx8F,KAAKy8F,UAAU,cAAc,GAC7Bz8F,KAAKy8F,UAAU,cAAc,GAC7Bz8F,KAAKy8F,UAAU,kBAAkB,IAG3B1xC,EAAVxqD,UAAAk8F,UAAA,SAAoB7+C,EAAmB8+C,GAC/BA,EACF18F,KAAKwiB,SAAS5hB,cAAcI,UAAU0Y,IAAIkkC,GAE1C59C,KAAKwiB,SAAS5hB,cAAcI,UAAUwY,OAAOokC,IA5DnDmN,iCAAA,sBAkEAtpD,KAACuB,EAAAA,SAADrB,OACEsB,SAAUC,IACVC,SAAUsoD,GAASvoD,IACnBG,cAAeooD,QArEjB/B,SCYEizC,UAAF,EAAaC,QAAb,EAAsBC,WAAtB,EAAkCC,OAAlC,EAAAC,IAAAA,GAAEJ,WAAF,YAAAI,GAAAA,GAAaH,SAAb,UAAAG,GAAAA,GAAsBF,YAAtB,aAAAE,GAAAA,GAAkCD,QAAlC,QAMA,IAAAE,IAAA,WAKE,QAAFA,GACY/V,EAED76E,EAEA0qB,GAJC92B,KAAZinF,UAAYA,EAEDjnF,KAAXoM,QAAWA,EAEApM,KAAX82B,OAAWA,EAPX92B,KAAA8O,MAAuBiuF,GAAYD,OArBnC,MAgCEE,GAAFz8F,UAAA08F,QAAE,WACEj9F,KAAKinF,UAAUiW,cAAcl9F,OAjCjCg9F,KdqDaG,IACXC,cAAe,IACfC,aAAc,KAOVC,GAA2B,IASjC5hB,GAAA,WA+BE,QAAFA,GAAsB6hB,EACAtxF,EACRqG,EACAizB,GAHZ,GAAFnlC,GAAAJ,IAAsBA,MAAtBu9F,QAAsBA,EACAv9F,KAAtBiM,QAAsBA,EAxBtBjM,KAAAw9F,gBAA2B,EAG3Bx9F,KAAAy9F,eAA2B,GAAIxjE,KAG/Bj6B,KAAA09F,eAA2B,GAAIx2D,KAS/BlnC,KAAA29F,gBAA0BC,EAAAA,kCAAoCC,SAAS,GA4JvE79F,KAAA89F,YAAwB,SAACppF,GAGrB,GAAMqpF,GAAkBx7C,EAAAA,gCAAgC7tC,GAClDspF,EAAmB59F,EAAK69F,sBAC1B3F,KAAK4F,MAAQ99F,EAAK69F,qBAAuBX,EAExCl9F,GAAKm9F,QAAQY,gBAAmBJ,GAAoBC,IACvD59F,EAAKo9F,gBAAiB,EACtBp9F,EAAKg+F,aAAa1pF,EAAMwY,QAASxY,EAAM0Y,QAAShtB,EAAKm9F,QAAQriB,gBAKnEl7E,KAAAq+F,aAAyB,SAAC3pF,GACtB,IAAKtU,EAAKm9F,QAAQY,eAAgB,CAIhC/9F,EAAK69F,qBAAuB3F,KAAK4F,MACjC99F,EAAKo9F,gBAAiB,CAMtB,KAAK,GAFCc,GAAU5pF,EAAM6pF,eAEb51F,EAAI,EAAGA,EAAI21F,EAAQ99F,OAAQmI,IAClCvI,EAAKg+F,aAAaE,EAAQ31F,GAAGukB,QAASoxE,EAAQ31F,GAAGykB,QAAShtB,EAAKm9F,QAAQriB,gBAM/El7E,KAAAw+F,YAAwB,WACfp+F,EAAKo9F,iBAIVp9F,EAAKo9F,gBAAiB,EAGtBp9F,EAAKs9F,eAAe31F,QAAQ,SAAAiyE,GAG1B,GAAMrmC,GAAYqmC,EAAOlrE,QAAUiuF,GAAYH,SAC7C5iB,EAAOljD,OAAOpa,sBAAwBs9D,EAAOlrE,QAAUiuF,GAAYJ,WAEhE3iB,EAAOljD,OAAO2nE,YAAc9qD,GAC/BqmC,EAAOijB,cA9LP13D,EAASjnB,YACXte,KAAK0+F,kBAAoBpsF,EAAW1R,cAGpCZ,KAAKy9F,eACFjjE,IAAI,YAAax6B,KAAK89F,aACtBtjE,IAAI,UAAWx6B,KAAKw+F,aACpBhkE,IAAI,aAAcx6B,KAAKw+F,aAEvBhkE,IAAI,aAAcx6B,KAAKq+F,cACvB7jE,IAAI,WAAYx6B,KAAKw+F,aACrBhkE,IAAI,cAAex6B,KAAKw+F,cAvHjC,MAiIE9iB,GAAFn7E,UAAA69F,aAAE,SAAanxE,EAAWE,EAAW2J,GAAnC,GAAF12B,GAAAJ,SAAA,KAAA82B,IAAqCA,KACjC,IAAM6nE,GAAgB3+F,KAAK4+F,eACL5+F,KAAK4+F,gBAAkB5+F,KAAK0+F,kBAAkB3uE,wBAC9D8uE,EAAVznE,MAAgC+lE,GAAiCrmE,EAAOja,UAEhEia,GAAOgoE,WACT7xE,EAAI0xE,EAAc7xF,KAAO6xF,EAAc5xF,MAAQ,EAC/CogB,EAAIwxE,EAAc/vE,IAAM+vE,EAAchkF,OAAS,EAGjD,IAAMs/D,GAASnjD,EAAOmjD,QAAU+Z,EAAyB/mE,EAAGE,EAAGwxE,GACzD9yD,EAAU5e,EAAI0xE,EAAc7xF,KAC5Bo1C,EAAU/0B,EAAIwxE,EAAc/vE,IAC5BwE,EAAWyrE,EAAgBzB,eAAiBtmE,EAAOna,aAAe,GAElEq9D,EAAS77D,SAASwoB,cAAc,MACtCqzC,GAAOh5E,UAAU0Y,IAAI,sBAErBsgE,EAAOvtE,MAAMK,KAAU++B,EAAUouC,EAArC,KACID,EAAOvtE,MAAMmiB,IAASszB,EAAU+3B,EAApC,KACID,EAAOvtE,MAAMkO,OAAqB,EAATs/D,EAA7B,KACID,EAAOvtE,MAAMM,MAAoB,EAATktE,EAA5B,KAGID,EAAOvtE,MAAMgN,gBAAkBqd,EAAOswB,OAAS,KAC/C4yB,EAAOvtE,MAAMsyF,mBAAwB3rE,EAAzC,KAEIpzB,KAAK0+F,kBAAkB73D,YAAYmzC,GAInC8Z,EAA0B9Z,GAE1BA,EAAOvtE,MAAMsC,UAAY,UAGzB,IAAMiwF,GAAY,GAAIhC,IAAUh9F,KAAMg6E,EAAQljD,EA2B9C,OAzBAkoE,GAAUlwF,MAAQiuF,GAAYJ,UAG9B38F,KAAK09F,eAAehkF,IAAIslF,GAEnBloE,EAAO2nE,aACVz+F,KAAKi/F,2BAA6BD,GAKpCh/F,KAAKk/F,sBAAsB,WACzB,GAAMC,GAA8BH,IAAc5+F,EAAK6+F,0BAEvDD,GAAUlwF,MAAQiuF,GAAYH,QAMzB9lE,EAAO2nE,YAAgBU,GAAgC/+F,EAAKo9F,gBAC/DwB,EAAU/B,WAEX7pE,GAEI4rE,GAITtjB,EAAFn7E,UAAA28F,cAAE,SAAc8B,GACZ,GAAMI,GAAYp/F,KAAK09F,eAAejjE,OAAOukE,EAY7C,IAVIA,IAAch/F,KAAKi/F,6BACrBj/F,KAAKi/F,2BAA6B,MAI/Bj/F,KAAK09F,eAAe7uE,OACvB7uB,KAAK4+F,eAAiB,MAInBQ,EAAL,CAIA,GAAMC,GAAWL,EAAU5yF,QACrByyF,EAAVznE,MAAgC+lE,GAAiC6B,EAAUloE,OAAOja,UAE9EwiF,GAAS5yF,MAAMsyF,mBAAwBF,EAAgBxB,aAA3D,KACIgC,EAAS5yF,MAAM+nB,QAAU,IACzBwqE,EAAUlwF,MAAQiuF,GAAYF,WAG9B78F,KAAKk/F,sBAAsB,WACzBF,EAAUlwF,MAAQiuF,GAAYD,OAC9BuC,EAAmB,WAAEnmC,YAAYmmC,IAChCR,EAAgBxB,gBAIrB3hB,EAAFn7E,UAAA++F,WAAE,WACEt/F,KAAK09F,eAAe31F,QAAQ,SAAAiyE,GAAU,MAAAA,GAAOijB,aAI/CvhB,EAAFn7E,UAAA+b,mBAAE,SAAmBlQ,GAAnB,GAAFhM,GAAAJ,IACSoM,IAAWA,IAAYpM,KAAKu/F,kBAKjCv/F,KAAK+7E,uBAEL/7E,KAAKiM,QAAQM,kBAAkB,WAC7BnM,EAAKq9F,eAAe11F,QAAQ,SAACmoB,EAAIzuB,GAC7B,MAAA2K,GAAQkmC,iBAAiB7wC,EAAMyuB,EAAI9vB,EAAKu9F,mBAG9C39F,KAAKu/F,gBAAkBnzF,IA0DjBsvE,EAAVn7E,UAAA2+F,sBAAA,SAAgChvE,EAAcojB,OAA9C,KAAAA,IAA8CA,EAA9C,GACItzC,KAAKiM,QAAQM,kBAAkB,WAAM,MAAA8mB,YAAWnD,EAAIojB,MAItDooC,EAAFn7E,UAAAw7E,qBAAE,WAAA,GAAF37E,GAAAJ,IACQA,MAAKu/F,iBACPv/F,KAAKy9F,eAAe11F,QAAQ,SAACmoB,EAAIzuB,GAC/BrB,EAAoB,gBAAEgzC,oBAAoB3xC,EAAMyuB,EAAI9vB,EAAKu9F,kBAxTjEjiB,KewDaj+D,GACT,GAAI7R,GAAAA,eAAoC,2CAgF1C,QAAF4uE,GAAsB75E,EACRu/B,EACAqF,EAC+C/oB,EACJgpB,GAJnCxlC,KAAtBW,YAAsBA,EAnDtBX,KAAAi6E,OAA6C,EAS7Cj6E,KAAA2c,YAAuD,EAmBvD3c,KAAAkoC,WAA+B,EAqB/BloC,KAAAgoC,gBAAoC,EAQhChoC,KAAKw/F,eAAiBhjF,MACtBxc,KAAKy/F,gBAAkB,GAAI/jB,IAAe17E,KAAMkgC,EAAQv/B,EAAa4kC,GAE/C,mBAAlBC,IACFxlC,KAAKw/F,eAAe3iF,WAAaugF,cAAe,EAAGC,aAAc,IAnJvE,MA4GEj0F,QAAFC,eACMmxE,EADNj6E,UAAA,gBAAE,WACiB,MAAOP,MAAKkoC,eAC7B,SAAa5+B,GACXtJ,KAAKkoC,UAAY5+B,EACjBtJ,KAAK0/F,gEAQPt2F,OAAFC,eACMmxE,EADNj6E,UAAA,eAAE,WACgB,MAAOP,MAAK2/F,UAAY3/F,KAAKW,YAAYC,mBACzD,SAAYiO,GACV7O,KAAK2/F,SAAW9wF,EAChB7O,KAAK0/F,gEA2BPllB,EAAFj6E,UAAA6N,SAAE,WACEpO,KAAKgoC,gBAAiB,EACtBhoC,KAAK0/F,gCAGPllB,EAAFj6E,UAAAmF,YAAE,WACE1F,KAAKy/F,gBAAgB1jB,wBAIvBvB,EAAFj6E,UAAA++F,WAAE,WACEt/F,KAAKy/F,gBAAgBH,cAOvBl2F,OAAFC,eAAMmxE,EAANj6E,UAAA,oBAAE,WACE,OACEu+F,SAAU9+F,KAAK8+F,SACf7kB,OAAQj6E,KAAKi6E,OACb7yB,MAAOpnD,KAAKonD,MACZvqC,UAANua,MAAqBp3B,KAAKw/F,eAAe3iF,UAAc7c,KAAK6c,WACtDH,qBAAsB1c,KAAKw/F,eAAe9iF,qBAC1CC,YAAa3c,KAAK2c,aAAe3c,KAAKw/F,eAAe5iF,iBAAmB,qCAQ5ExT,OAAFC,eAAMmxE,EAANj6E,UAAA,sBAAE,WACE,MAAOP,MAAKwW,YAAcxW,KAAKw/F,eAAehpF,0CAIxCgkE,EAAVj6E,UAAAm/F,yCACS1/F,KAAKwW,UAAYxW,KAAKgoC,gBACzBhoC,KAAKy/F,gBAAgBnjF,mBAAmBtc,KAAK6O,UAmBjD2rE,EAAFj6E,UAAAq/F,OAAE,SAAOC,EAAkC1yE,EAAe2J,GACtD,WADJ,KAAA3J,IAA2CA,EAA3C,GAC6B,gBAAd0yE,GACF7/F,KAAKy/F,gBAAgBrB,aAAayB,EAAW1yE,EAA1DiK,MAAiEp3B,KAAKk7E,aAAiBpkD,IAE1E92B,KAAKy/F,gBAAgBrB,aAAa,EAAG,EAAlDhnE,MAAyDp3B,KAAKk7E,aAAiB2kB,oBA3J/Ep+F,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,4BACVC,SAAU,YACVI,MACEC,MAAS,aACT49F,+BAAgC,qDArDpCr+F,KAAEuD,EAAAA,aAIFvD,KAAEuL,EAAAA,SAPFvL,KAAQ+b,EAAAA,WAoIR/b,SAAAkB,GAAAC,aAAAnB,KAAe2W,EAAAA,WAAf3W,KAA2BoB,EAAAA,OAA3BlB,MAAkC8b,QAClChc,KAAAyD,OAAAtC,aAAAnB,KAAe2W,EAAAA,WAAf3W,KAA2BoB,EAAAA,OAA3BlB,MAAkCkwB,EAAAA,8CAvElCu1B,QAAA3lD,KAAG2D,EAAAA,MAAHzD,MAAS,oBAGTo+F,YAAAt+F,KAAG2D,EAAAA,MAAHzD,MAAS,wBAMTm9F,WAAAr9F,KAAG2D,EAAAA,MAAHzD,MAAS,uBAOTs4E,SAAAx4E,KAAG2D,EAAAA,MAAHzD,MAAS,qBASTgb,cAAAlb,KAAG2D,EAAAA,MAAHzD,MAAS,0BAOTkb,YAAApb,KAAG2D,EAAAA,MAAHzD,MAAS,wBAMT6U,WAAA/U,KAAG2D,EAAAA,MAAHzD,MAAS,uBAYTkN,UAAApN,KAAG2D,EAAAA,MAAHzD,MAAS,uBAxHT64E,iCCAA,sBAiBA/4E,KAACuB,EAAAA,SAADrB,OACEsB,SAAUC,GAAiB89B,EAAAA,gBAC3B79B,SAAUq3E,GAAWt3E,IACrBG,cAAem3E,QApBjB58D,mBC2DE,QAAFoiF,GAAgEliE,GAAA99B,KAAhE89B,eAAgEA,EALhE99B,KAAA8O,MAA2C,YAG3C9O,KAAAwW,UAA+B,EAA/B,sBApBA/U,KAACC,EAAAA,UAADC,OAAAa,cAAAC,EAAAA,kBAAAC,KACEL,gBAAiBC,EAAAA,wBAAnBC,OACEX,SAAF,sBACEG,QAAF,2jCACED,SAAU,GACVG,MACFC,MAAA,sBACM+9F,4CAAN,4BACIC,sCAAJ,sBACIC,uCAAJ,WACIvuE,kCAAJ,4KAYAouE,EAAAj9F,kEAFAi9F,iCCzDA,sBAYAv+F,KAACuB,EAAAA,SAADrB,OACEwB,SAAU68F,IACV38F,cAAe28F,QAdjBr2C,KCcAy2C,GAAA,yBAdA,MAAAA,MAeaC,GACTt8F,EAAcq8F,IAGdE,GAA2B,kFA2B/BlgG,GAAAorC,SAAqB,sBAAsB80D,OAH3C,MAFiC77F,GAAjC6rC,EAAAhsC,kBAjBA7C,KAACC,EAAAA,UAADC,OAAAC,SAAA,eACEC,SAAU,cACVC,SAAU,mIACVU,cAAFC,EAAAA,kBAAAC,KACEL,gBAAFC,EAAAA,wBAAAC,OACEP,QAAF,YACED,QAAF,mkBACEE,MACFC,MAAA,eACMqC,KAAN,QACIg8F,gCAAJ,WACI1tF,uBAAJ,sBACIk8B,yBAAJ,gBAIAuB,EAAAvtC,wCAGAutC,O1CVIkvC,GAAmB,EAGvBiF,GAAA,WACE,QAAFA,GAEW70D,EAEAy4B,sBAFAroD,KAAX4vB,OAAWA,EAEA5vB,KAAXqoD,YAAWA,EAzCX,MAAAo8B,MAyDa50C,GACT,GAAIjkC,GAAAA,eAAyC,6CA6D/C,QAAFykC,GACY7tB,EACAtP,EACiD04E,EACpCn/C,GAHbzsC,KAAZwiB,SAAYA,EACAxiB,KAAZkT,mBAAYA,EACiDlT,KAA7D4rF,QAA6DA,EACpC5rF,KAAzBysC,MAAyBA,EApCzBzsC,KAAA+nC,WAAsB,EACtB/nC,KAAA6rF,SAAoB,EACpB7rF,KAAAkoC,WAAsB,EACtBloC,KAAAisF,qBAAiC,GAYjCjsF,KAAA8e,GAAwB,cAAc0gE,KAYtCx/E,KAAAykD,kBAAyC,GAAI3zC,GAAAA,aAG7C9Q,KAAA4N,cAA2B,GAAIC,GAAAA,QAH/B,MArBEzE,QAAFC,eAAMgnC,EAAN9vC,UAAA,gBAAE,WAAiB,MAAOP,MAAK4rF,SAAW5rF,KAAK4rF,QAAQx/C,0CAGrDhjC,OAAFC,eAAMgnC,EAAN9vC,UAAA,gBAAE,WAA0B,MAAOP,MAAK+nC,2CAStC3+B,OAAFC,eACMgnC,EADN9vC,UAAA,gBAAE,WACiB,MAAQP,MAAKysC,OAASzsC,KAAKysC,MAAMj2B,UAAaxW,KAAKkoC;4DACpE,SAAa5+B,GAActJ,KAAKkoC,UAAY5uB,EAAAA,sBAAsBhQ,oCAGlEF,OAAFC,eAAMgnC,EAAN9vC,UAAA,qBAAE,WAAsB,MAAOP,MAAK4rF,SAAW5rF,KAAK4rF,QAAQpiD,+CAqB1DpgC,OAAFC,eAAMgnC,EAAN9vC,UAAA,cAAE,WACE,MAAOP,MAAK6rF,yCAOdziF,OAAFC,eAAMgnC,EAAN9vC,UAAA,iBAAE,WAEE,OAAQP,KAAK6iB,kBAAkBvhB,aAAe,IAAIC,wCAIpD8uC,EAAF9vC,UAAA+kD,OAAE,WACOtlD,KAAK+nC,YACR/nC,KAAK+nC,WAAY,EACjB/nC,KAAKkT,mBAAmB/B,eACxBnR,KAAK8rF,8BAKTz7C,EAAF9vC,UAAAilD,SAAE,WACMxlD,KAAK+nC,YACP/nC,KAAK+nC,WAAY,EACjB/nC,KAAKkT,mBAAmB/B,eACxBnR,KAAK8rF,8BAKTz7C,EAAF9vC,UAAAgS,MAAE,WACE,GAAMnG,GAAUpM,KAAK6iB,iBAEQ,mBAAlBzW,GAAQmG,OACjBnG,EAAQmG,SASZ89B,EAAF9vC,UAAAwrF,gBAAE,WACO/rF,KAAK6rF,UACR7rF,KAAK6rF,SAAU,EACf7rF,KAAKkT,mBAAmB/B,iBAS5Bk/B,EAAF9vC,UAAAyrF,kBAAE,WACMhsF,KAAK6rF,UACP7rF,KAAK6rF,SAAU,EACf7rF,KAAKkT,mBAAmB/B,iBAK5Bk/B,EAAF9vC,UAAAw7C,SAAE,WACE,MAAO/7C,MAAKimD,WAId5V,EAAF9vC,UAAAkU,eAAE,SAAeC,GACTA,EAAMC,UAAYM,EAAAA,OAASP,EAAMC,UAAYO,EAAAA,QAC/ClV,KAAK8mD,wBAGLpyC,EAAMI,mBAQVu7B,EAAF9vC,UAAAumD,sBAAE,WACO9mD,KAAKwW,WACRxW,KAAK+nC,WAAY/nC,KAAKosC,WAAYpsC,KAAK+nC,UACvC/nC,KAAKkT,mBAAmB/B,eACxBnR,KAAK8rF,2BAA0B,KAKnCz7C,EAAF9vC,UAAA0a,aAAE,WACE,MAAOjb,MAAKwW,SAAW,KAAO,KAIhC65B,EAAF9vC,UAAAsiB,gBAAE,WACE,MAAO7iB,MAAKwiB,SAAS5hB,eAGvByvC,EAAF9vC,UAAAyhF,mBAAE,WAME,GAAIhiF,KAAK+nC,UAAW,CAClB,GAAMke,GAAYjmD,KAAKimD,SAEnBA,KAAcjmD,KAAKisF,uBACrBjsF,KAAKisF,qBAAuBhmC,EAC5BjmD,KAAK4N,cAAcrE,UAKzB8mC,EAAF9vC,UAAAmF,YAAE,WACE1F,KAAK4N,cAAcO,YAIbkiC,EAAV9vC,UAAAurF,0BAAA,SAAoCzjC,OAApC,KAAAA,IAAoCA,GAApC,GACIroD,KAAKykD,kBAAkBhzC,KAAK,GAAIgzE,IAAyBzkF,KAAMqoD,oBA/LnE5mD,KAACC,EAAAA,UAADC,OAAAC,SAAA,aACEC,SAAU,YACVI,MACFsC,KAAA,SACMsqC,kBAAN,iBACIq9C,uBAAJ,WACIC,8BAAJ,WACIC,qBAAsB,SACtBxoD,OAAJ,KACI4nB,uBAAJ,sBACI34C,uBAAJ,sBACIw5E,8BAAJ,WACI5lF,UAAJ,0BACIgqB,YAAJ,yBACIvuB,MAAS,cAEbH,QAAA,k5CACAD,SAAA,qWACEU,cAAFC,EAAAA,kBAAAC,KACEL,gBAAFC,EAAAA,wBAAAC,8FAnEAd,SAAEkB,GAAFC,aAAAnB,KAAA2W,EAAAA,WAAA3W,KAAAoB,EAAAA,OAAAlB,MAAAkuC,QAFApuC,KAAE6uC,GAAF1tC,aAAAnB,KAAA2W,EAAAA,cAcAi4B,EAAAttC,2DAwEAyT,WAAA/U,KAAA2D,EAAAA,QAGAq/C,oBAAAhjD,KAAAuQ,EAAAA,UAYAq+B,iCClHA,sBAgBA5uC,KAACuB,EAAAA,SAADrB,OACEsB,SAAU2a,GAAiBhX,EAAAA,aAAc+iD,IACzCxmD,SAAUktC,GAAWC,IACrBjtC,cAAegtC,GAAWC,QAnB5BQ,KCWaw7C,GACX,GAAI1gF,GAAAA,eAA6B,4BCD/Bw1B,GAAe,6BAanBphC,KAAA8e,GAAwB,aAAasiB,KAxBrC,sBAeA3/B,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,YACVK,MACEC,MAAS,YACTqC,KAAQ,QACRslC,YAAa,4BAIjB/qB,KAAArd,KAAG2D,EAAAA,SAxBHmnF,KCiBaC,IAIXC,mBAAoB59E,EAAAA,QAAQ,sBAE1BC,EAAAA,MAAM,QAASrC,EAAAA,OAAQ+nB,QAAS,EAAGzlB,UAAW,oBAC9CE,EAAAA,WAAW,iBACTxC,EAAAA,OAAQ+nB,QAAS,EAAGzlB,UAAW,sBAC/BG,EAAAA,QAAQ,+CCbd0gC,GAAA,yBAbA,MAAAA,MCWIxO,GAAe,6BAgBnBphC,KAAAghF,MAAoC,QAGpChhF,KAAA8e,GAAwB,YAAYsiB,KA9BpC,sBAeA3/B,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,WACVK,MACEC,MAAS,WACTwqF,oBAAqB,iBACrB7iD,YAAa,KAEbvM,eAAgB,8BAKpB0jD,QAAAv/E,KAAG2D,EAAAA,QAGH0Z,KAAArd,KAAG2D,EAAAA,SA9BHunF,iCCAA,sBAYAlrF,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,gBAbZgrF,iCCAA,sBAiBAnrF,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,sBAlBZirF,iCCAA,sBAYAprF,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,kBAbZkrF,iCCAA,sBAYArrF,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,kBAbZmrF,KCuDI3rD,GAAe,EASnB4rD,GAAA,WACE,QAAFA,GAAqBrsF,GAAAX,KAArBW,YAAqBA,EAjErB,MAAAqsF,MAwEaC,GACTx0E,EAAWu0E,GAAkB,WAiBpBE,GACT,GAAIthF,GAAAA,eAA2C,iDAyJjD,QAAFokC,GACarvC,EACCuS,EACsCi6E,EAC1Bz8E,EAER08E,EAEJlvE,EACAjS,EACmC6xB,GAV/C,GAAF19B,GAWIkE,EAXJ5D,KAAAV,KAWUW,IAXVX,WACaI,GAAbO,YAAaA,EACCP,EAAd8S,mBAAcA,EAEY9S,EAA1BsQ,KAA0BA,EAERtQ,EAAlBgtF,UAAkBA,EAEJhtF,EAAd8d,UAAcA,EACA9d,EAAd6L,QAAcA,EA7Gd7L,EAAAitF,8BAAyC,EAgCzCjtF,EAAAktF,oBAA+B,EAW/BltF,EAAAmtF,yBAAqC,GASrCntF,EAAAotF,WAAuB,GAGvBptF,EAAAqtF,aAAyB,YAAYrsD,KAGrChhC,EAAAorC,SAAa,wBAAwBpK,KAuDjChhC,EAAKstF,cAAgBP,MACrB/sF,EAAKklF,WAAallF,EAAKstF,cAAcC,OAAS,OAC9CvtF,EAAKwtF,mBAAwC,mBAAnB9vD,EAG1B19B,EAAKytF,WAAcT,GAAaA,EAAUS,WAAcT,EAAUS,WAAa,WA3BnF,MA9FkCppF,GAAlCurC,EAAA1rC,GAME8E,OAAFC,eACM2mC,EADNzvC,UAAA,kBAAE,WAC2C,MAAOP,MAAK8tF,iBACvD,SAAexkF,GAAf,GAAFlJ,GAAAJ,KACU8sB,EAAW9sB,KAAK8tF,WAEtB9tF,MAAK8tF,YAAcxkF,GAAUtJ,KAAKotF,WAAaptF,KAAKotF,UAAUS,YAAe,SAEpD,YAArB7tF,KAAK8tF,aAA6BhhE,IAAaxjB,IAE7CtJ,KAAKiM,QACPjM,KAAY,QAAEs+C,SAAS12C,KAAKC,EAAAA,KAAK,IAAI1H,UAAU,WAC7CC,EAAY,QAAEmM,kBAAkB,WAAM,MAAAnM,GAAK2tF,uBAG7C5iF,QAAQC,UAAUC,KAAK,WAAM,MAAAjL,GAAK2tF,uDAOxC3kF,OAAFC,eACM2mC,EADNzvC,UAAA,0BAAE,WACoC,MAAOP,MAAKguF,yBAChD,SAAuB1kF,GACrBtJ,KAAKguF,oBAAsB10E,EAAAA,sBAAsBhQ,oCAQnDF,OAAFC,eAAM2mC,EAANzvC,UAAA,0BAAE,WACE,MAA2B,WAApBP,KAAKslF,aAA4BtlF,KAAKstF,oDAI/ClkF,OAAFC,eAAM2mC,EAANzvC,UAAA,sBAAE,WAAgC,MAA2B,UAApBP,KAAKslF,4CAM5Cl8E,OAAFC,eACM2mC,EADNzvC,UAAA,iBAAE,WAC0B,MAAOP,MAAKwtF,gBACtC,SAAclkF,GACZtJ,KAAKwtF,WAAalkF,EAClBtJ,KAAKiuF,iDAkBP7kF,OAAFC,eACM2mC,EADNzvC,UAAA,kBAAE,WAEE,MAA2B,WAApBP,KAAK6tF,YAAgD,UAArB7tF,KAAKmkF,YAA0B,OAASnkF,KAAKmkF,iBAEtF,SAAe76E,GACTA,IAAUtJ,KAAKmkF,cACjBnkF,KAAKmkF,YAAc76E,GAAStJ,KAAK0tF,cAAcC,OAAS,OACxD3tF,KAAKkT,mBAAmB/B,iDAkD5B6+B,EAAFzvC,UAAAs+D,0BAAE,WACE,MAAO7+D,MAAKkuF,yBAA2BluF,KAAKW,aAG9CqvC,EAAFzvC,UAAAkF,mBAAE,WAAA,GAAFrF,GAAAJ,IACIA,MAAKmuF,wBACDnuF,KAAKkmF,SAAS7hC,aAChBrkD,KAAKW,YAAYC,cAAcI,UAC1B0Y,IAAI,uBAAuB1Z,KAAKkmF,SAAS7hC,aAIhDrkD,KAAKkmF,SAASrhC,aAAaj9C,KAAKgI,EAAAA,UAAS,OAAezP,UAAU,WAChEC,EAAKguF,wBACLhuF,EAAKiuF,sBACLjuF,EAAK8S,mBAAmB/B,gBAI1B,IAAMm9E,GAAetuF,KAAKkmF,SAAS7iC,WAAarjD,KAAKkmF,SAAS7iC,UAAUirC,cAAgB7+E,EAAAA,KACxF5F,GAAAA,MAAMykF,EAActuF,KAAKuuF,gBAAgBruF,QAASF,KAAKwuF,gBAAgBtuF,SAClEC,UAAU,WAAM,MAAAC,GAAK8S,mBAAmB/B,iBAG7CnR,KAAKyuF,cAAcvuF,QAAQ0H,KAAKgI,EAAAA,UAAU,OAAOzP,UAAU,WACzDC,EAAK6tF,gBACL7tF,EAAK8S,mBAAmB/B,iBAI1BnR,KAAK0uF,eAAexuF,QAAQ0H,KAAKgI,EAAAA,UAAU,OAAOzP,UAAU,WAC1DC,EAAKiuF,sBACLjuF,EAAK8S,mBAAmB/B,kBAI5B6+B,EAAFzvC,UAAAyT,sBAAE,WACEhU,KAAKmuF,wBACDnuF,KAAKqtF,8BACPrtF,KAAK+tF,oBAIT/9C,EAAFzvC,UAAA6d,gBAAE,WAEEpe,KAAKutF,yBAA2B,QAChCvtF,KAAKkT,mBAAmBsZ,iBAI1BwjB,EAAFzvC,UAAAouF,eAAE,SAAeC,GACb,GAAMvrC,GAAYrjD,KAAKkmF,SAAWlmF,KAAKkmF,SAAS7iC,UAAY,IAC5D,OAAOA,IAAaA,EAAUurC,IAGhC5+C,EAAFzvC,UAAAsuF,gBAAE,WACE,SAAU7uF,KAAKkmF,UAAYlmF,KAAKkmF,SAAS96C,aAAeprC,KAAK8uF,oBAG/D9+C,EAAFzvC,UAAAwuF,UAAE,WACE,QAAS/uF,KAAKgvF,aAGhBh/C,EAAFzvC,UAAA0uF,kBAAE,WACE,MAAOjvF,MAAKkvF,iBAAmBlvF,KAAKkmF,SAASiJ,kBAAoBnvF,KAAKovF,qBAGxEp/C,EAAFzvC,UAAA8uF,wBAAE,WAEE,MAA2B,WAApBrvF,KAAK6tF,aAA4B7tF,KAAK+uF,aACzC/uF,KAAK+uF,cAAgB/uF,KAAKivF,qBAGhCj/C,EAAFzvC,UAAAgrC,kBAAE,WAEE,MAAOvrC,MAAK+uF,aAAmC,WAApB/uF,KAAK6tF,YAA2B7tF,KAAK6uF,mBAIlE7+C,EAAFzvC,UAAA+uF,sBAAE,WACE,MAAQtvF,MAAK0uF,gBAAkB1uF,KAAK0uF,eAAeluF,OAAS,GACxDR,KAAKkmF,SAASqJ,WAAc,QAAU,QAI5Cv/C,EAAFzvC,UAAAglF,qBAAE,WAAA,GAAFnlF,GAAAJ,IACQA,MAAKurC,qBAAuBvrC,KAAKkvF,iBAG/BlvF,KAAK4tF,qBACP5tF,KAAKstF,oBAAqB,EAE1BtzC,EAAAA,UAAUh6C,KAAKwvF,OAAO5uF,cAAe,iBAAiBgH,KAAKC,EAAAA,KAAK,IAAI1H,UAAU,WAC5EC,EAAKktF,oBAAqB,KAI9BttF,KAAKslF,WAAa,SAClBtlF,KAAKkT,mBAAmB/B,iBAQpB6+B,EAAVzvC,UAAA6tF,iCACI,GAAIpuF,KAAKkmF,SAAS96C,aAAeprC,KAAK8uF,kBACpC,KAAMW,MAKFz/C,EAAVzvC,UAAA0tF,yBACIjuF,KAAK0vF,iBACL1vF,KAAKquF,uBAOCr+C,EAAVzvC,UAAAmvF,oCACI,IAAI1vF,KAAKyuF,cAAe,CACtB,GAAIkB,OAAV,GACUC,MAAV,EACM5vF,MAAKyuF,cAAc1mF,QAAQ,SAAC8nF,GAC1B,GAAmB,UAAfA,EAAK7O,MAAmB,CAC1B,GAAI2O,GAAavvF,EAAK0vF,UACpB,KAAMC,GAAmC,QAE3CJ,GAAYE,MACP,IAAmB,QAAfA,EAAK7O,MAAiB,CAC/B,GAAI4O,EACF,KAAMG,GAAmC,MAE3CH,GAAUC,OAUV7/C,EAAVzvC,UAAA8tF,+BACI,GAAIruF,KAAKkmF,SAAU,CACjB,GAAI33C,KAEJ,IAAqC,SAAjCvuC,KAAKsvF,wBAAoC,CAC3C,GAAMU,GAAYhwF,KAAKyuF,cACnBzuF,KAAKyuF,cAAc3yE,KAAK,SAAA+zE,GAAQ,MAAe,UAAfA,EAAK7O,QAAqB,KACxDiP,EAAUjwF,KAAKyuF,cACjBzuF,KAAKyuF,cAAc3yE,KAAK,SAAA+zE,GAAQ,MAAe,QAAfA,EAAK7O,QAAmB,IAExDgP,GACFzhD,EAAIhnC,KAAKyoF,EAAUlxE,IACV9e,KAAKwtF,YACdj/C,EAAIhnC,KAAKvH,KAAKytF,cAGZwC,GACF1hD,EAAIhnC,KAAK0oF,EAAQnxE,QAEV9e,MAAK0uF,iBACdngD,EAAMvuC,KAAK0uF,eAAe3kF,IAAI,SAAA89C,GAAS,MAAAA,GAAM/oC,KAG/C9e,MAAKkmF,SAAS53C,kBAAkBC,KAK1ByB,EAAZzvC,UAAA4tF,sBAAE,WACE,IAAKnuF,KAAKkmF,SACR,KAAMgK,MAQVlgD,EAAFzvC,UAAAwtF,iBAAE,WACE,GAAMoC,GAAUnwF,KAAKwvF,OAASxvF,KAAKwvF,OAAO5uF,cAAgB,IAE1D,IAAwB,YAApBZ,KAAK6tF,YAA6BsC,GAAYA,EAAQroF,SAAStH,QAC9D2vF,EAAQ7uF,YAAYC,UAIrBvB,KAAKke,WAAcle,KAAKke,UAAUI,WAAtC,CAMA,IAAKH,SAASiyE,gBAAgBnvF,SAASjB,KAAKW,YAAYC,eAEtD,YADAZ,KAAKqtF,8BAA+B,EAItC,IAAIgD,GAAa,EACbC,EAAW,EACTC,EAAWvwF,KAAKkuF,wBAAwBttF,cAAcm4D,iBAC1D,iCACIy3B,EAASxwF,KAAKkuF,wBAAwBttF,cAAcm4D,iBACtD,8BACJ,IAAI/4D,KAAKwvF,QAAUxvF,KAAKwvF,OAAO5uF,cAAckH,SAAStH,OAAQ,CAM5D,IAAoB,GALdiwF,GAAiBzwF,KAAK0wF,aACxB1wF,KAAKkuF,wBAAwBttF,cAAcmvB,yBACzC4gE,EAAa3wF,KAAK0wF,aAAaP,EAAQroF,SAAS,GAAGioB,yBACrD6gE,EAAa,EAEvB9kC,EAAA,EAA0BrnC,EAAA0rE,EAAQroF,SAARgkD,EAA1BrnC,EAAAjkB,OAA0BsrD,IAAkB,CACpC8kC,GADRnsE,EAAAqnC,GAC4Bn5C,YAEtB09E,EAAaM,EAAaF,EA9aN,EA+apBH,EAAWM,EAAa,EAhbH,IAgbOA,EAAkCC,GAAwB,EAGxF,IAAK,GAAIloF,GAAI,EAAGA,EAAI4nF,EAAS/vF,OAAQmI,IACnC4nF,EAAStyC,KAAKt1C,GAAG8D,MAAMM,MAAWsjF,EAAxC,IAEI,KAAK,GAAI1nF,GAAI,EAAGA,EAAI6nF,EAAOhwF,OAAQmI,IACjC6nF,EAAOvyC,KAAKt1C,GAAG8D,MAAMM,MAAWujF,EAAtC,IAGItwF,MAAKqtF,8BAA+B,IAI9Br9C,EAAVzvC,UAAAmwF,aAAA,SAAuBI,GACnB,MAAO9wF,MAAK0Q,MAA4B,QAApB1Q,KAAK0Q,KAAKpH,MAAkBwnF,EAAKz3D,MAAQy3D,EAAKhkF,qBAxZtErL,KAACC,EAAAA,UAADC,OAAAC,SAAA,iBACEC,SAAU,eACVC,SAAU,qneAMVG,MACEC,MAAJ,iBACI6uF,6CAAJ,2BACIC,yCAAJ,uBACIC,4CAAJ,0BACIC,2CAAJ,yBACIC,iCAAJ,sBACAC,mCAAA,iBACAC,sCAAA,sBACMC,0CAAN,4BACIC,kCAAJ,oBACIC,oCAAJ,sBACIC,sBAAJ,mBACInxB,qBAAJ,oBACIC,mBAAJ,kBACImxB,uBAAJ,8BACIC,qBAAJ,4BACIC,sBAAJ,6BACIC,mBAAJ,0BACIC,mBAAJ,0BACIC,qBAAJ,4BACIC,qBAAJ,4BACIpgE,kCAAJ,uBAEA5vB,QAAA,SACAQ,cAAAC,EAAAA,kBAAAC,KACAL,gBAAAC,EAAAA,wBAAAC,WAIAytC,EAAAhrB,eAAA,WAAA,QACAvjB,KAAAuD,EAAAA,aACAvD,KAAAsQ,EAAAA,oBACAtQ,SAAAkB,GAAAC,aAAAnB,KAAA2W,EAAAA,WAAA3W,KAAAoB,EAAAA,OAAAlB,MAAA2qF,QACA7qF,KAAA0W,EAAAA,eAAAvV,aAAAnB,KAAmC2W,EAAAA,aACnC3W,SAAAkB,GAAAC,aAAAnB,KAAA2W,EAAAA,WAAA3W,KAAAoB,EAAAA,OAAAlB,MAAAurF,QACAzrF,KAAA+b,EAAAA,wHAxHAwyB,EAAAjtC,gBAJA8qF,aAAApsF,KAAA2D,EAAAA,QAwOA6sF,qBAAAxwF,KAAA2D,EAAAA,QA/OA0qF,YAAAruF,KAAA2D,EAAAA,QAiPAkgF,aAAA7jF,KAAA2D,EAAAA,QAtMA8sF,eAAAzwF,KAAA+M,EAAAA,UAAA7M,MAAA,eA5BAusF,0BAAAzsF,KAAA+M,EAAAA,UAAA7M,MAAA,yBAuOAwwF,qBAAA1wF,KAAA+M,EAAAA,UAAA7M,MAAA,0GA3GAmtF,oBAAArtF,KAAAm+B,EAAAA,aAAAj+B,MAAAkrF,MAqBAmC,cAAAvtF,KAAAm+B,EAAAA,aAAAj+B,MAAAirF,MAsBA8B,iBAAAjtF,KAAQoE,EAAAA,gBAARlE,MAAA4qF,MAsBAkC,gBAAAhtF,KAAAoE,EAAAA,gBAAAlE,MAAAgrF,MAmBA4B,kBAAA9sF,KAAAoE,EAAAA,gBAAAlE,MAAAmrF,MAEA0B,kBAAA/sF,KAAAoE,EAAAA,gBAAYlE,MAAZorF,OAEA/8C,GACAi9C,gCC5OA,sBAoBAxrF,KAACuB,EAAAA,SAADrB,OACE0B,cACEkpF,GACAv8C,GACA28C,GACAC,GACAC,GACAC,GACAC,IAEF9pF,SACE2D,EAAAA,aACAiX,EAAAA,iBAEF1a,SACEopF,GACAv8C,GACA28C,GACAC,GACAC,GACAC,GACAC,QAzCJh8C,KvByCIqhD,GAA+B,EAGnC5P,GAAA,WACE,QAAFA,GAEW5yD,EAEA40B,GAFAxkD,KAAX4vB,OAAWA,EAEA5vB,KAAXwkD,OAAWA,EAjDX,MAAAg+B,MAuDA6P,GAAA,yBAvDA,MAAAA,MAwDaC,GACTt/E,EAAmBq/E,IASV3P,GACT,GAAI92E,GAAAA,eAA8C,oCAChDC,WAAY,OACZC,QAASymF,mBA+Fb,QAAFrQ,GACYhvE,EACAvS,EACkCkhC,GAH5C,GAAFzhC,GAIIkE,EAJJ5D,KAAAV,OAAAA,WACYI,GAAZ8S,mBAAYA,EACA9S,EAAZO,YAAYA,EAlEZP,EAAAkiF,WAAuB,EAIvBliF,EAAAkkF,SAAqB,EAerBlkF,EAAA+qB,YAA0D,KAqB1D/qB,EAAAqiF,eAAM,GAAI3xE,GAAAA,aAGV1Q,EAAAq7B,OAAkD,GAAI3qB,GAAAA,aAGtD1Q,EAAAyyB,OAAkD,GAAI/hB,GAAAA,aAatD1Q,EAAA68C,cAGA78C,EAAA0e,GAAe,oBAAoBszE,KAQ/BhyF,EAAKoyF,yBAA2B3wD,EAAS8gD,wBAlB7C,MA3DqCl+E,GAArCy9E,EAAA59E,GAUE8E,OAAFC,eAAM64E,EAAN3hF,UAAA,cAAE,WAAwB,MAAOP,MAAKskF,SAAWtkF,KAAKsiF,2CAsBpDl5E,OAAFC,eACM64E,EADN3hF,UAAA,6BAAE,WACuC,MAAOP,MAAKwyF,4BACnD,SAA0BlpF,GACxBtJ,KAAKwyF,uBAAyBl5E,EAAAA,sBAAsBhQ,oCAwBtDF,OAAFC,eACM64E,EADN3hF,UAAA,iBAAE,SACc+I,GADd,GAAFlJ,GAAAJ,IAEQsJ,IAASA,EAAM9I,SACjB8I,EAAMm7B,MAAM,KAAK18B,QAAQ,SAAA61C,GAAa,MAAAx9C,GAAK68C,WAAWW,EAAUr8C,SAAU,IAC1EvB,KAAKW,YAAYC,cAAcg9C,UAAY;8EAiB/CskC,EAAF3hF,UAAAkF,mBAAE,WACEzF,KAAK8T,YAAc,GAAIk0C,GAAAA,2BAAsChoD,KAAKusC,SAAS52B,WAE3E3V,KAAKmiF,kBAOPD,EAAF3hF,UAAA6hF,cAAE,SAAc9iC,GACRt/C,KAAKknD,QACPlnD,KAAKknD,MAAMtmD,cAAc0+C,UAAYA,IAKzC4iC,EAAF3hF,UAAA8hF,cAAE,WACE,MAAOriF,MAAKknD,MAAQlnD,KAAKknD,MAAMtmD,cAAc0+C,UAAY,GAI3D4iC,EAAF3hF,UAAA4hF,eAAE,WACEniF,KAAKsiF,YAActiF,KAAKusC,QAAQ/rC,OAChCR,KAAKi9C,WAAW,4BAA8Bj9C,KAAKsiF,UACnDtiF,KAAKi9C,WAAW,4BAA8Bj9C,KAAKsiF,UACnDtiF,KAAKkT,mBAAmB/B,gBAI1B+wE,EAAF3hF,UAAAgiF,iBAAE,SAAiB/9B,GACf,GAAM9vC,GAAQ,GAAI8tE,IAA6BxiF,KAAMwkD,EACrDxkD,MAAKyiF,eAAehxE,KAAKiD,mBAhI7BjT,KAACC,EAAAA,UAADC,OAAAC,SAAA,mBACEE,SAAU,wJACVC,QAAF,klBACES,cAAFC,EAAAA,kBAAAC,KACEL,gBAAFC,EAAAA,wBAAAC,OACEV,SAAF,kBACEG,QAAF,iBACEC,MACFC,MAAA,oBAEA2C,YACAC,QAAA+qC,GAAA9qC,YAAAm9E,2FA3EAzgF,SAAEkB,GAAFC,aAAAnB,KAAAoB,EAAAA,OAAAlB,MAAA+gF,SA0JAR,EAAAn/E,6GA5DAwpC,UAAA9qC,KAAAoE,EAAAA,gBAAAlE,MAAA0uC,IAAAxH,aAAA,MAGAuF,eAAA3sC,KAAAoE,EAAAA,gBAAAlE,MAAA2uC,MAGAnlB,cAAA1pB,KAAA2D,EAAAA,QAGAu9E,wBAAAlhF,KAAA2D,EAAAA,QAGAw9E,aAAAnhF,KAAA2D,EAAAA,QAMAq9E,iBAAAhhF,KAAAuQ,EAAAA,SAWAypB,SAAAh6B,KAAAuQ,EAAAA,SAGA6gB,SAAApxB,KAAAuQ,EAAAA,SAIAhR,YAAAS,KAAA2D,EAAAA,MAAAzD,MAAA,YASAugF,qBCrIE,QAAFW,GAEavwE,GAAAtS,KAAbsS,WAAaA,EArBb,sBAcA7Q,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,0BACVC,SAAU,gEARZJ,KAAmBuD,EAAAA,cARnB69E,K/H8DaC,GACT,GAAIl3E,GAAAA,eAAqC,oCAQhCm3E,IACXj+E,QAASg+E,GACT5jE,MAAOua,EAAAA,SACPra,WAAY4jE,GAODC,IACXn+E,QAASw8B,EAAAA,kBACTv8B,YAAayL,EAAAA,WAAW,WAAM,MAAA0yE,MAC9B1hD,OAAO,iBA2GP,QAAF0hD,GAAsB1gE,EAAgD2T,EAChD1oB,EACA01E,EACAjwE,EAC0C2+B,EAC9BnhC,EACQgsD,EACUv7D,EAE9BgS,GATpB,GAAF/S,GAAAJ,IAAsBA,MAAtBwiB,SAAsBA,EAAgDxiB,KAAtEm2B,SAAsEA,EAChDn2B,KAAtByN,kBAAsBA,EACAzN,KAAtBmjF,MAAsBA,EACAnjF,KAAtBkT,mBAAsBA,EAC0ClT,KAAhE6xC,gBAAgEA,EAC9B7xC,KAAlC0Q,KAAkCA,EACQ1Q,KAA1C08D,WAA0CA,EACU18D,KAApDmB,UAAoDA,EAE9BnB,KAAtBmT,eAAsBA,EAhFtBnT,KAAAojF,qBAAgC,EAChCpjF,KAAAqjF,uBAAkC,EASlCrjF,KAAAsjF,wBAAmC,EAMnCtjF,KAAAujF,sBAAkC/zE,EAAAA,aAAaC,MAO/CzP,KAAAwjF,qBAAgC,EAGhCxjF,KAAAyjF,qBAA0C,GAAI51E,GAAAA,QAM9C7N,KAAA0jF,mBAA+B,WAI3BtjF,EAAKojF,oBACDrlE,SAASoe,gBAAkBn8B,EAAKoiB,SAAS5hB,eAAiBR,EAAKsrC,WAIvE1rC,KAAA+jD,UAAoC,aAGpC/jD,KAAAgkD,WAAe,aAefhkD,KAAA2jF,sBAAyD,MA6CzD3jF,KAAA4jF,kBAAsC,EAqEtC5jF,KAAA6jF,iBAAoEt/B,EAAAA,MAAM,WACtE,MAAInkD,GAAK0jF,cAAgB1jF,EAAK0jF,aAAav3C,QACnC1iC,EAAAA,MAAZC,UAAA,GAAqB1J,EAAK0jF,aAAav3C,QAAQxiC,IAAI,SAAAy6C,GAAU,MAAAA,GAAOC,qBAKzDrkD,EAAK+iF,MAAM7kC,SACb5qB,eACA9rB,KAAKC,EAAAA,KAAK,GAAIk2C,EAAAA,UAAU,WAAM,MAAA39C,GAAKyjF,sBApGlB,mBAAXE,SACTZ,EAAM52E,kBAAkB,WACtBw3E,OAAOzxC,iBAAiB,OAAQlyC,EAAKsjF,sBA5M7C,MAyLEt6E,QAAFC,eACM65E,EADN3iF,UAAA,4BAAE,WACsC,MAAOP,MAAKqjF,2BAClD,SAAyB/5E,GACvBtJ,KAAKqjF,sBAAwB/pE,EAAAA,sBAAsBhQ,oCAqBrD45E,EAAF3iF,UAAAmF,YAAE,WACwB,mBAAXq+E,SACTA,OAAO3wC,oBAAoB,OAAQpzC,KAAK0jF,oBAG1C1jF,KAAKujF,sBAAsBlzE,cAC3BrQ,KAAKojF,qBAAsB,EAC3BpjF,KAAKgkF,gBACLhkF,KAAKyjF,qBAAqBt1E,YAI5B/E,OAAFC,eAAM65E,EAAN3iF,UAAA,iBAAE,WACE,MAAOP,MAAK4jF,kBAAoB5jF,KAAK8jF,aAAaxB,2CAKpDY,EAAF3iF,UAAA0jF,UAAE,WACEjkF,KAAKkkF,iBACLlkF,KAAKmkF,eAIPjB,EAAF3iF,UAAA6jF,WAAE,WACEpkF,KAAKqkF,cAEArkF,KAAK4jF,mBAIN5jF,KAAK0rC,WAEP1rC,KAAK8jF,aAAajxD,OAAOphB,OAG3BzR,KAAK8jF,aAAaQ,QAAUtkF,KAAK4jF,kBAAmB,EAEhD5jF,KAAKoyB,aAAepyB,KAAKoyB,YAAYpiB,gBACvChQ,KAAKoyB,YAAYhiB,SACjBpQ,KAAKukF,4BAA4Bl0E,eAK9BrQ,KAAKojF,qBAKRpjF,KAAKkT,mBAAmBsZ,kBAQ5B02D,EAAF3iF,UAAAqsC,eAAE,WACM5sC,KAAK4jF,kBACP5jF,KAAgB,YAAE4sC,kBAQtBxjC,OAAFC,eAAM65E,EAAN3iF,UAAA,2BAAE,WAAA,GAAFH,GAAAJ,IACI,OAAO6J,GAAAA,MACL7J,KAAK6jF,iBACL7jF,KAAK8jF,aAAahwE,YAAYgqC,OAAOl2C,KAAK9G,EAAAA,OAAO,WAAM,MAAAV,GAAKwjF,oBAC5D5jF,KAAKyjF,qBACLzjF,KAAKwkF,yBACLxkF,KAAKoyB,YACDpyB,KAAKoyB,YAAYqG,cAAc7wB,KAAK9G,EAAAA,OAAO,WAAM,MAAAV,GAAKwjF,oBACtDtuE,EAAAA,MACJ1N,KAEAmC,EAAAA,IAAI,SAAA2K,GAAS,MAAAA,aAAiB+vE,IAA2B/vE,EAAQ,yCAkBrEtL,OAAFC,eAAM65E,EAAN3iF,UAAA,oBAAE,WACE,MAAIP,MAAK8jF,cAAgB9jF,KAAK8jF,aAAahwE,YAClC9T,KAAK8jF,aAAahwE,YAAY63B,WAGhC,sCAIDu3C,EAAV3iF,UAAAikF,4CACI,OAAKxkF,MAAKmB,UAIH0I,EAAAA,MACLmwC,EAAAA,UAAsBh6C,KAAKmB,UAAW,SACtC64C,EAAAA,UAAsBh6C,KAAKmB,UAAW,aAEvCyG,KAAK9G,EAAAA,OAAO,SAAA4T,GACX,GAAMgwE,GAAchwE,EAA2B,OACzCiwE,EAAYvkF,EAAKs8D,WACnBt8D,EAAKs8D,WAAW/7D,YAAYC,cAAgB,IAEhD,OAAOR,GAAKwjF,kBACJc,IAAgBtkF,EAAKoiB,SAAS5hB,iBAC5B+jF,IAAcA,EAAU1jF,SAASyjF,OAChCtkF,EAAKgyB,cAAgBhyB,EAAKgyB,YAAYuG,eAAe13B,SAASyjF,MAflEpvE,EAAAA,GAAa,OAoBxB4tE,EAAF3iF,UAAAyvB,WAAE,SAAW1mB,GAAX,GAAFlJ,GAAAJ,IACImL,SAAQC,QAAQ,MAAMC,KAAK,WAAM,MAAAjL,GAAKwkF,iBAAiBt7E,MAIzD45E,EAAF3iF,UAAA0vB,iBAAE,SAAiBC,GACflwB,KAAK+jD,UAAY7zB,GAInBgzD,EAAF3iF,UAAA4vB,kBAAE,SAAkBD,GAChBlwB,KAAKgkD,WAAa9zB,GAIpBgzD,EAAF3iF,UAAA6vB,iBAAE,SAAiBC,GACfrwB,KAAKwiB,SAAS5hB,cAAc4V,SAAW6Z,GAGzC6yD,EAAF3iF,UAAAkU,eAAE,SAAeC,GACb,GAAMC,GAAUD,EAAMC,OAYtB,IANIA,IAAYi/B,EAAAA,QACdl/B,EAAMI,iBAKJ9U,KAAK0rC,YAAc/2B,IAAYi/B,EAAAA,QAAWj/B,IAAYyZ,EAAAA,UAAY1Z,EAAM4xC,QAC1EtmD,KAAK6kF,mBACL7kF,KAAKyjF,qBAAqBl6E,OAC1BmL,EAAMqnB,sBACD,IAAI/7B,KAAK8kF,cAAgBnwE,IAAYM,EAAAA,OAASjV,KAAK0rC,UACxD1rC,KAAK8kF,aAAah+B,wBAClB9mD,KAAK6kF,mBACLnwE,EAAMI,qBACD,IAAI9U,KAAK8jF,aAAc,CAC5B,GAAMiB,GAAiB/kF,KAAK8jF,aAAahwE,YAAY63B,WAC/C0a,EAAa1xC,IAAYyZ,EAAAA,UAAYzZ,IAAY2Z,EAAAA,UAEnDtuB,MAAK0rC,WAAa/2B,IAAYqwE,EAAAA,IAChChlF,KAAK8jF,aAAahwE,YAAYsB,UAAUV,GAC/B2xC,GAAcrmD,KAAKilF,YAC5BjlF,KAAKikF,aAGH59B,GAAcrmD,KAAK8jF,aAAahwE,YAAY63B,aAAeo5C,IAC7D/kF,KAAKklF,oBAKXhC,EAAF3iF,UAAA4kF,aAAE,SAAazwE,GACX,GAAIulC,GAASvlC,EAAgC,OACzCpL,EAAgC2wC,EAAO3wC,KAGvB,YAAhB2wC,EAAOx4C,OACT6H,EAAiB,IAATA,EAAc,KAAOwhB,WAAWxhB,IAQtCtJ,KAAKolF,iBAAmB97E,GAAS6U,SAASoe,gBAAkB7nB,EAAMulC,SACpEj6C,KAAKolF,eAAiB97E,EACtBtJ,KAAK+jD,UAAUz6C,GAEXtJ,KAAKilF,YACPjlF,KAAKikF,cAKXf,EAAF3iF,UAAA4qD,aAAE,WACOnrD,KAAKwjF,oBAECxjF,KAAKilF,aACdjlF,KAAKolF,eAAiBplF,KAAKwiB,SAAS5hB,cAAc0I,MAClDtJ,KAAKkkF,iBACLlkF,KAAKmkF,aAAY,IAJjBnkF,KAAKwjF,qBAAsB,GAcvBN,EAAV3iF,UAAA4jF,YAAA,SAAsBkB,OAAtB,KAAAA,IAAsBA,GAAtB,GACQrlF,KAAK08D,YAA6C,SAA/B18D,KAAK08D,WAAW4oB,aACjCD,EACFrlF,KAAK08D,WAAW6oB,uBAEhBvlF,KAAK08D,WAAW4oB,WAAa,SAG/BtlF,KAAKsjF,wBAAyB,IAK1BJ,EAAV3iF,UAAA8jF,uBACQrkF,KAAKsjF,yBACPtjF,KAAK08D,WAAW4oB,WAAa,OAC7BtlF,KAAKsjF,wBAAyB,IAa1BJ,EAAV3iF,UAAA2kF,2BACI,GAAMj9E,GAAQjI,KAAK8jF,aAAahwE,YAAYurC,iBAAmB,EACzDyJ,EAAaC,EAA8B9gD,EAC7CjI,KAAK8jF,aAAav3C,QAASvsC,KAAK8jF,aAAa11C,cAE3Co3C,EAAoBx8B,EACxB/gD,EAAQ6gD,EA5Z4B,GA8ZpC9oD,KAAK8jF,aAAazB,gBA3ZiB,IA+ZrCriF,MAAK8jF,aAAa1B,cAAcoD,IAO1BtC,EAAV3iF,UAAAklF,iDACUC,EAAc1lF,KAAKmjF,MAAM7kC,SAAS5qB,eAAe9rB,KAAKC,EAAAA,KAAK,IAC3D89E,EAAgB3lF,KAAK8jF,aAAav3C,QAAQrsC,QAAQ0H,KACtDmtD,EAAAA,IAAI,WAAM,MAAA30D,GAAKwlF,kBAAkBC,wBAGjCvyC,EAAAA,MAAM,GAIR,OAAOzpC,GAAAA,MAAM67E,EAAaC,GACvB/9E,KAGCm2C,EAAAA,UAAU,WAQR,MAPA39C,GAAKykF,mBACLzkF,EAAK0jF,aAAa3B,iBAEd/hF,EAAKsrC,WACPtrC,EAAgB,YAAEwsC,iBAGbxsC,EAAK0lF,sBAGdj+E,EAAAA,KAAK,IAGN1H,UAAU,SAAAuU,GAAS,MAAAtU,GAAK2lF,kBAAkBrxE,MAIvCwuE,EAAV3iF,UAAAyjF,yBACQhkF,KAAKoyB,cACPpyB,KAAKokF,aACLpkF,KAAKoyB,YAAYmB,UACjBvzB,KAAKoyB,YAAc,OAIf8wD,EAAV3iF,UAAAqkF,iBAAA,SAA2Bt7E,GACvB,GAAM08E,GAAYhmF,KAAK8jF,cAAgB9jF,KAAK8jF,aAAa34D,YACvDnrB,KAAK8jF,aAAa34D,YAAY7hB,GAC9BA,EAII28E,EAA0B,MAAbD,EAAoBA,EAAY,EAI/ChmF,MAAK08D,WACP18D,KAAK08D,WAAWwpB,SAAS58E,MAAQ28E,EAEjCjmF,KAAKwiB,SAAS5hB,cAAc0I,MAAQ28E,GAShC/C,EAAV3iF,UAAAwlF,kBAAA,SAA4BrxE,GACpBA,GAASA,EAAMkb,SACjB5vB,KAAKmmF,6BAA6BzxE,EAAMkb,QACxC5vB,KAAK4kF,iBAAiBlwE,EAAMkb,OAAOtmB,OACnCtJ,KAAK+jD,UAAUrvC,EAAMkb,OAAOtmB,OAC5BtJ,KAAKwiB,SAAS5hB,cAAc2R,QAC5BvS,KAAK8jF,aAAavB,iBAAiB7tE,EAAMkb,SAG3C5vB,KAAKokF,cAMClB,EAAV3iF,UAAA4lF,6BAAA,SAAuCnI,GACnCh+E,KAAK8jF,aAAav3C,QAAQxkC,QAAQ,SAAAy8C,GAC5BA,GAAUw5B,GAAQx5B,EAAOvhC,UAC3BuhC,EAAOgB,cAKL09B,EAAV3iF,UAAA2jF,oCACI,KAAKlkF,KAAK8jF,aACR,KAAMsC,IAGHpmF,MAAKoyB,YAaRpyB,KAAKoyB,YAAYy/C,YAAY9kE,MAAO/M,KAAKqmF,oBAZzCrmF,KAAKwzC,QAAU,GAAInlC,GAAAA,eAAerO,KAAK8jF,aAAahiF,SAAU9B,KAAKyN,mBACnEzN,KAAKoyB,YAAcpyB,KAAKm2B,SAASqD,OAAOx5B,KAAKuhD,qBAEzCvhD,KAAKmT,iBACPnT,KAAKujF,sBAAwBvjF,KAAKmT,eAAenC,SAAS7Q,UAAU,WAC9DC,EAAKsrC,WAAatrC,EAAKgyB,aACzBhyB,EAAKgyB,YAAYy/C,YAAY9kE,MAAO3M,EAAKimF,uBAS7CrmF,KAAKoyB,cAAgBpyB,KAAKoyB,YAAYpiB,gBACxChQ,KAAKoyB,YAAYniB,OAAOjQ,KAAKwzC,SAC7BxzC,KAAKukF,4BAA8BvkF,KAAKylF,6BAG1C,IAAMa,GAAUtmF,KAAK0rC,SAErB1rC,MAAK8jF,aAAa3B,iBAClBniF,KAAK8jF,aAAaQ,QAAUtkF,KAAK4jF,kBAAmB,EAIhD5jF,KAAK0rC,WAAa46C,IAAYtmF,KAAK0rC,WACrC1rC,KAAK8jF,aAAaroD,OAAOhqB,QAIrByxE,EAAV3iF,UAAAghD,6BACI,MAAO,IAAIxoB,GAAAA,eACTC,iBAAkBh5B,KAAK80C,sBACvBJ,eAAgB10C,KAAK6xC,kBACrB9kC,MAAO/M,KAAKqmF,iBACZtlE,UAAW/gB,KAAK0Q,QAIZwyE,EAAV3iF,UAAAu0C,+BAyBI,MAxBA90C,MAAK4lF,kBAAoB5lF,KAAKm2B,SAASroB,WACpCkmC,oBAAoBh0C,KAAKumF,wBACzBryC,wBAAuB,GACvBynB,UAAS,GACT5mB,gBAEGK,QAAS,QACTC,QAAS,SACTI,SAAU,QACVC,SAAU,QAGVN,QAAS,QACTC,QAAS,MACTI,SAAU,QACVC,SAAU,SAKVlgB,WAAY,kCAIXx1B,KAAK4lF,mBAGN1C,EAAV3iF,UAAAgmF,gCACI,MAAIvmF,MAAKwmF,YACAxmF,KAAKwmF,YAAYl0E,WAGnBtS,KAAK08D,WAAa18D,KAAK08D,WAAWmC,4BAA8B7+D,KAAKwiB,UAGtE0gE,EAAV3iF,UAAA8lF,0BACI,MAAOrmF,MAAK8jF,aAAalB,YAAc5iF,KAAKymF,iBAItCvD,EAAV3iF,UAAAkmF,yBACI,MAAOzmF,MAAKumF,uBAAuB3lF,cAAcmvB,wBAAwBhjB,OAOnEm2E,EAAV3iF,UAAAskF,4BACI7kF,KAAK8jF,aAAahwE,YAAYuC,cAAcrW,KAAK8jF,aAAanB,sBAAwB,GAAK,IAIrFO,EAAV3iF,UAAA0kF,oBACI,GAAM74E,GAAUpM,KAAKwiB,SAAS5hB,aAC9B,QAAQwL,EAAQ2yD,WAAa3yD,EAAQoK,WAAaxW,KAAKqjF,sCA5jB3D5hF,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,oDACVK,MACEykF,sBAAuB,wBACvB9hF,cAAe,2CACf+hF,2BAA4B,uCAC5Bt3C,+BAAgC,mBAChC3qC,uBAAwB,qDACxBwqC,mBAAoB,iEAGpB03C,YAAa,iBACbp2D,SAAU,eACVkvC,UAAW,uBACXjvC,YAAa,0BAEf5uB,SAAU,yBACVgD,WAAYo+E,4CA5FdxhF,KAAEuD,EAAAA,aAZFvD,KAAEg4B,EAAAA,UAqBFh4B,KAAEiC,EAAAA,mBAHFjC,KAAEuL,EAAAA,SARFvL,KAAEsQ,EAAAA,oBA8KFtQ,SAAAkB,GAAAC,aAAAnB,KAAeoB,EAAAA,OAAflB,MAAsBmhF,QA5LtBrhF,KAAQ0W,EAAAA,eAARvV,aAAAnB,KA6Le2W,EAAAA,aA1Jf3W,KAAQuuC,GAARptC,aAAAnB,KA2Je2W,EAAAA,WA3Jf3W,KA2J2BolF,EAAAA,SAC3BplF,SAAAkB,GAAAC,aAAAnB,KAAe2W,EAAAA,WAAf3W,KAA2BoB,EAAAA,OAA3BlB,MAAkCmB,EAAAA,cApKlCrB,KAAQyW,EAAAA,mCAqIR4rE,eAAAriF,KAAG2D,EAAAA,MAAHzD,MAAS,qBAMT6kF,cAAA/kF,KAAG2D,EAAAA,MAAHzD,MAAS,gCAMTgiF,wBAAAliF,KAAG2D,EAAAA,MAAHzD,MAAS,kBAMTmlF,uBAAArlF,KAAG2D,EAAAA,MAAHzD,MAAS,8BAzLTuhF,iCgIAA,sBAmBAzhF,KAACuB,EAAAA,SAADrB,OACEsB,SAAU6tC,GAAiBjb,EAAAA,cAAe3yB,GAAiB0D,EAAAA,cAC3DzD,SACE++E,GACApxC,GACAoyC,GACAL,GACA3/E,IAEFG,cAAe6+E,GAAiBgB,GAAwBL,IACxDh+E,WAAYk+E,QA7BdgE,KCwBI1uE,GAAS,gBAqFX,QAAF2uE,GAC4C7lF,EAC9B8K,EACAtL,EACAixC,EAEAq1C,GAL8BjnF,KAA5CmB,UAA4CA,EAC9BnB,KAAdiM,QAAcA,EACAjM,KAAdW,YAAcA,EACAX,KAAd4xC,eAAcA,EAEA5xC,KAAdinF,UAAcA,EApEdjnF,KAAAknF,aAAgB,EAShBlnF,KAAAmnF,OAAiC,UAQjCnnF,KAAAonF,UAA8B,EAM9BpnF,KAAA8N,SAA0D,cAwB1D9N,KAAA6uB,KAA8C,SAW9C7uB,KAAAilD,IAAgB5sC,KAzGhB,MAkDEjP,QAAFC,eACM29E,EADNzmF,UAAA,aAAE,WAC4B,MAAOP,MAAKmnF,YACxC,SAAU79E,GACRtJ,KAAKw7D,UAAUlyD,GACftJ,KAAKmnF,OAAS79E,mCAKhBF,OAAFC,eACM29E,EADNzmF,UAAA,eAAE,WACyB,MAAOP,MAAKonF,cACrC,SAAYC,GACVrnF,KAAKonF,SAAW9tE,EAAAA,sBAAsB+tE,oCAWxCj+E,OAAFC,eACM29E,EADNzmF,UAAA,eAAE,WACwB,MAAOP,MAAKkQ,cACpC,SAAY5G,GACVtJ,KAAKkQ,SAAW5G,EAChBtJ,KAAKknF,YAAuB,MAAT59E,IAAiB,GAAGA,GAAQ/H,OAAOf,OAAS,EAC/DR,KAAKsnF,sDAKPl+E,OAAFC,eACM29E,EADNzmF,UAAA,mBAAE,WAC4B,MAAOP,MAAKunF,kBACxC,SAAgBC,GACVA,IAAmBxnF,KAAKunF,eAC1BvnF,KAAKynF,2BAA2BD,EAAgBxnF,KAAKunF,cACrDvnF,KAAKunF,aAAeC,oCASxBp+E,OAAFC,eACM29E,EADNzmF,UAAA,cAAE,WACwB,MAAOP,MAAK0nF,aACpC,SAAWL,GACTrnF,KAAK0nF,QAAUpuE,EAAAA,sBAAsB+tE,oCAkBvCL,EAAFzmF,UAAAonF,QAAE,WACE,OAA2C,IAApC3nF,KAAK8N,SAAS+b,QAAQ,UAI/Bm9D,EAAFzmF,UAAAqnF,QAAE,WACE,OAA4C,IAArC5nF,KAAK8N,SAAS+b,QAAQ,WAG/Bm9D,EAAFzmF,UAAAmF,YAAE,WACM1F,KAAK6nF,aAAe7nF,KAAK8nF,eAC3B9nF,KAAK4xC,eAAekB,kBAAkB9yC,KAAK8nF,cAAe9nF,KAAK6nF,cAK3Db,EAAVzmF,UAAA+mF,8BAMI,MALKtnF,MAAK8nF,cAGR9nF,KAAK8nF,cAAcxmF,YAActB,KAAK+3B,QAFtC/3B,KAAK8nF,cAAgB9nF,KAAK+nF,sBAIrB/nF,KAAK8nF,eAINd,EAAVzmF,UAAAwnF,+BAEI,GAAMC,GAAWhoF,KAAKinF,WAAajnF,KAAKmB,UAClC8mF,EAAeD,EAASrhD,cAAc,OAwB5C,OArBAshD,GAAajxB,aAAa,KAAM,qBAAqBh3D,KAAKilD,KAC1DgjC,EAAajnF,UAAU0Y,IAAI,qBAC3BuuE,EAAa3mF,YAActB,KAAK+3B,QAE5B/3B,KAAK6nF,aACPI,EAAajxB,aAAa,aAAch3D,KAAK6nF,aAG/C7nF,KAAKW,YAAYC,cAAcimC,YAAYohD,GAGN,kBAA1B37E,uBACTtM,KAAKiM,QAAQM,kBAAkB,WAC7BD,sBAAsB,WACpB27E,EAAajnF,UAAU0Y,IAhBT,wBAoBlBuuE,EAAajnF,UAAU0Y,IApBL,oBAuBbuuE,GAIDjB,EAAVzmF,UAAAknF,2BAAA,SAAqCD,EAAwBU,GAEzD,GAAMnwD,GAAU/3B,KAAKsnF,oBAEjBY,IACFloF,KAAK4xC,eAAekB,kBAAkB/a,EAASmwD,GAG7CV,GACFxnF,KAAK4xC,eAAeqB,SAASlb,EAASyvD,IAKlCR,EAAVzmF,UAAAi7D,UAAA,SAAoB2sB,GACZA,IAAiBnoF,KAAKmnF,SACpBnnF,KAAKmnF,QACPnnF,KAAKW,YAAYC,cAAcI,UAAUwY,OAAO,aAAaxZ,KAAKmnF,QAEhEgB,GACFnoF,KAAKW,YAAYC,cAAcI,UAAU0Y,IAAI,aAAayuE,oBArKlE1mF,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,aACVK,MACEC,MAAS,YACTkmF,4BAA6B,UAC7BC,0BAA2B,YAC3BC,0BAA2B,aAC3BC,2BAA4B,aAC5BC,0BAA2B,YAC3BC,0BAA2B,mBAC3BC,2BAA4B,oBAC5BC,0BAA2B,mBAC3BC,2BAA4B,kEAoEhCnnF,SAAAkB,GAAAC,aAAAnB,KAAO2W,EAAAA,WAAP3W,KAAmBoB,EAAAA,OAAnBlB,MAA0BmB,EAAAA,cA9F1BrB,KAAEuL,EAAAA,SAHFvL,KAAEuD,EAAAA,aALFvD,KAAQo0C,EAAAA,gBAWRp0C,KAAEonF,EAAAA,+BA+BFzhC,QAAA3lD,KAAG2D,EAAAA,MAAHzD,MAAS,mBASTmnF,UAAArnF,KAAG2D,EAAAA,MAAHzD,MAAS,qBAWTmM,WAAArM,KAAG2D,EAAAA,MAAHzD,MAAS,sBAGTo2B,UAAAt2B,KAAG2D,EAAAA,MAAHzD,MAAS,cAUTkmF,cAAApmF,KAAG2D,EAAAA,MAAHzD,MAAS,yBAWTktB,OAAAptB,KAAG2D,EAAAA,MAAHzD,MAAS,kBAGTonF,SAAAtnF,KAAG2D,EAAAA,MAAHzD,MAAS,qBAjGTqlF,iCCAA,sBAcAvlF,KAACuB,EAAAA,SAADrB,OACEsB,SACE6a,EAAAA,WACA5a,IAEFC,SAAU6jF,IACV3jF,cAAe2jF,QApBjBgC,KCYaC,GAAwB,GAAIr9E,GAAAA,eAAoB,sBAK7Ds9E,GAAA,wBAWAlpF,KAAAsF,KAAoB,KAGpBtF,KAAAu9C,aAA0B,EAM1Bv9C,KAAAq/B,cAA2B,EAG3Br/B,KAAAyO,UAA8B,KAG9BzO,KAAA+vE,mBAAgC,EAGhC/vE,KAAA6vE,WAAwB,EA9CxB,MAAAqZ,MCkBaC,IAIXC,iBAAkBv6E,EAAAA,QAAQ,SACxBC,EAAAA,MAAM,eAAgBrC,EAAAA,OAAOsC,UAAW,sBACxCD,EAAAA,MAAM,UAAWrC,EAAAA,OAAOsC,UAAW,oBACnCE,EAAAA,WAAW,qCACPC,EAAAA,QAAW6rB,GAAmBsuD,QADtC,IACiDpuD,GAAgBquD,qBAC7Dr6E,EAAAA,WAAW,kBACPC,EAAAA,QAAW6rB,GAAmBwuD,QADtC,IACiDtuD,GAAgBuuD,uCCyD/D,QAAFC,GACY9oF,EACAuS,EACAm3B,EACRq/C,EAC8BvrE,EAEvBwrE,GAPT,GAAFvpF,GAQIkE,EARJ5D,KAAAV,OAAAA,WACYI,GAAZO,YAAYA,EACAP,EAAZ8S,mBAAYA,EACA9S,EAAZiqC,kBAAYA,EAIDjqC,EAAXupF,kBAAWA,EAxBXvpF,EAAAu0B,gBAAmD,OAGnDv0B,EAAAmwE,uBAA2B,GAAIz/D,GAAAA,aAM/B1Q,EAAAwpF,4BAA4D,KAkBxDxpF,EAAKe,UAAYgd,EACjB/d,EAAKypF,wBAA0BH,EAC5BpxD,SAASC,EAAAA,YAAYuxD,OAAQvxD,EAAAA,YAAYwxD,MAAOxxD,EAAAA,YAAYyxD,SAC5D7pF,UAAU,WACTC,EAAK6pF,aAAa,oCACdP,EAAmBQ,UAAU3xD,EAAAA,YAAYuxD,SAC7C1pF,EAAK6pF,aAAa,mCACdP,EAAmBQ,UAAU3xD,EAAAA,YAAYwxD,QAC7C3pF,EAAK6pF,aAAa,oCACdP,EAAmBQ,UAAU3xD,EAAAA,YAAYyxD,aAvCrD,MAJ6CvlF,GAA7CglF,EAAAnlF,GAgDEmlF,EAAFlpF,UAAAq0B,sBAAE,SAAyBC,GAIvB,MAHA70B,MAAKmqF,0BACLnqF,KAAKoqF,iBACLpqF,KAAK0wE,gCACE1wE,KAAKg1B,cAAcJ,sBAAsBC,IAIlD40D,EAAFlpF,UAAA00B,qBAAE,SAAwBJ,GAItB,MAHA70B,MAAKmqF,0BACLnqF,KAAKoqF,iBACLpqF,KAAK0wE,gCACE1wE,KAAKg1B,cAAcC,qBAAqBJ,IAIjD40D,EAAFlpF,UAAA80B,MAAE,WACOr1B,KAAKsT,aACRtT,KAAK20B,gBAAkB,UACvB30B,KAAKkT,mBAAmBsZ,kBAK5Bi9D,EAAFlpF,UAAAuyB,KAAE,WACO9yB,KAAKsT,aACRtT,KAAK20B,gBAAkB,SACvB30B,KAAKkT,mBAAmB/B,iBAI5Bs4E,EAAFlpF,UAAAmF,YAAE,WACE1F,KAAK6pF,wBAAwBx5E,cAC7BrQ,KAAKsT,YAAa,GAGpBm2E,EAAFlpF,UAAA4+C,iBAAE,SAAiBzqC,GACO,WAAlBA,EAAMlD,QACRxR,KAAK67B,gBACsB,YAAlBnnB,EAAMlD,SAAyBxR,KAAK2pF,kBAAkB9Z,WAC/D7vE,KAAK47B,aAGP57B,KAAKuwE,uBAAuB9+D,KAAKiD,IAGnC+0E,EAAFlpF,UAAAqwE,kBAAE,SAAkBl8D,GAChB1U,KAAKuwE,uBAAuB9+D,KAAKiD,IAG3B+0E,EAAVlpF,UAAA0pF,aAAA,SAAuBx0D,EAAkB/b,GACrC,GAAM1Y,GAAYhB,KAAKW,YAAYC,cAAcI,SACjD0Y,GAAM1Y,EAAU0Y,IAAI+b,GAAYz0B,EAAUwY,OAAOic,IAG3Cg0D,EAAVlpF,UAAA4pF,mCACI,GAAInqF,KAAKg1B,cAAchlB,cACrB,KAAM0lB,OAAM,gFAIR+zD,EAAVlpF,UAAA6pF,0BACI,GAAMh+E,GAAuBpM,KAAKW,YAAYC,cACxC40B,EAAax1B,KAAK2pF,kBAAkBn0D,UAEtC/tB,OAAMC,QAAQ8tB,GAEhBA,EAAWztB,QAAQ,SAAA0tB,GAAY,MAAArpB,GAAQpL,UAAU0Y,IAAI+b,KAC5CD,GACTppB,EAAQpL,UAAU0Y,IAAI8b,IAMlBi0D,EAAVlpF,UAAAq7B,sBACS57B,KAAK27B,aACR37B,KAAK27B,WAAa37B,KAAKqqC,kBAAkB7Q,OAAOx5B,KAAKW,YAAYC,gBAGnEZ,KAAK27B,WAAWS,gCAIVqtD,EAAVlpF,UAAAs7B,yBACI,GAAM80C,GAAU3wE,KAAK4pF,2BAGjBjZ,IAAoC,kBAAlBA,GAAQp+D,OAC5Bo+D,EAAQp+D,QAGNvS,KAAK27B,YACP37B,KAAK27B,WAAWiB,WAKZ6sD,EAAVlpF,UAAAmwE,mDACI1wE,MAAK4pF,4BAA8B5pF,KAAKmB,UAAsC,cAG1EnB,KAAKW,YAAYC,cAAc2R,OACjCpH,QAAQC,UAAUC,KAAK,WAAM,MAAAjL,GAAKO,YAAYC,cAAc2R,0BA1KlE9Q,KAACC,EAAAA,UAADC,OAAAC,SAAA,6BACEE,SAAU,8CACVC,QAAF,0nBACEM,gBAAFC,EAAAA,wBAAAC,OACEC,cAAFC,EAAAA,kBAAAC,KACEoP,YAAFq3E,GAAAC,kBACEnnF,MACFC,MAAe,6BACTopD,SAAN,KACI/mD,KAAJ,SACIusE,aAAJ,OACIhiC,oBAAJ,+BACInZ,WAAY,kBACZ00D,iBAAJ,4BACIz0D,gBAAJ,mHA1CAn0B,KAAE6oF,EAAAA,mBAGF7oF,KAAEm4B,EAAAA,qBAiBFn4B,SAAmBkB,GAAnBC,aAAAnB,KAAA2W,EAAAA,WAAA3W,KAAAoB,EAAAA,OAAAlB,MAAAmB,EAAAA,cALArB,KAAQynF,MACRO,EAAA1mF,6EAmCA0mF,mDCjEA,sBAgBAhoF,KAACuB,EAAAA,SAADrB,OACEsB,SACE2D,EAAAA,aACAivB,EAAAA,cACA3yB,GACAya,EAAAA,cAEFxa,SAAUsmF,GAAyBvmF,IACnCG,cAAeomF,IACf3zD,iBAAkB2zD,QAzBpBc,KCmBAC,GAAA,WAsBE,QAAFA,GACIr4D,EACQC,EACRgnB,GAHF,GAAFh5C,GAAAJ,IAEYA,MAAZoyB,YAAYA,EAbZpyB,KAAAqyB,gBAAqC,GAAIxkB,GAAAA,QAGzC7N,KAAAsyB,aAAkC,GAAIzkB,GAAAA,QAMtC7N,KAAAsxE,iBAA+C9hE,EAAAA,aAAaC,MAMxDzP,KAAKmyB,kBAAoBA,EAGzBA,EAAkBo+C,uBAAuB3oE,KACvC9G,EAAAA,OAAO,SAAA4T,GAAS,MAAoB,SAApBA,EAAMyuD,WAA0C,YAAlBzuD,EAAMlD,UACpD3J,EAAAA,KAAK,IAEN1H,UAAU,WACTC,EAAKkyB,aAAa/oB,OAClBnJ,EAAKkyB,aAAankB,aAIpBgkB,EAAkBo+C,uBAAuB3oE,KACvC9G,EAAAA,OAAO,SAAA4T,GAAS,MAAoB,SAApBA,EAAMyuD,WAA0C,WAAlBzuD,EAAMlD,UACpD3J,EAAAA,KAAK,IAEN1H,UAAU,WACTC,EAAKkxE,iBAAiBjhE,cACtBjQ,EAAKgyB,YAAYmB,UACjBnzB,EAAKiyB,gBAAgB9oB,KAAKnJ,EAAKmxE,SAC/BnxE,EAAKiyB,gBAAgBlkB,aAGlBgkB,EAAkBw3D,kBAAkBtqD,cACvCx1B,EAAAA,MACEuoB,EAAY2L,gBACZ3L,EAAYspC,gBAAgB9zD,KAAK9G,EAAAA,OAAO,SAAA4T,GAAS,MAAAA,GAAMC,UAAYi/B,EAAAA,WACnEzzC,UAAU,WAAM,MAAAC,GAAKsyB,YAGrB0mB,IACFp5C,KAAKsxE,iBAAmBl4B,EAASj5C,UAAU,WACrCgyB,EAAkBw3D,kBAAkB5Z,mBACtC3vE,EAAKsyB,aA/Ef,MAyFE83D,GAAFjqF,UAAAmyB,QAAE,SAAQw2B,GAAR,GAAF9oD,GAAAJ,IACSA,MAAKqyB,gBAAgBQ,SAExB7yB,KAAKmyB,kBAAkBo+C,uBAAuB3oE,KAC5C9G,EAAAA,OAAO,SAAA4T,GAAS,MAAoB,UAApBA,EAAMyuD,YACtBt7D,EAAAA,KAAK,IACL1H,UAAU,WAAM,MAAAC,GAAKgyB,YAAYq/C,mBAEnCzxE,KAAKuxE,QAAUroB,EACflpD,KAAKmyB,kBAAkBW,SAK3B03D,EAAFjqF,UAAAkzB,eAAE,WACE,MAAOzzB,MAAKqyB,gBAAgBqB,gBAI9B82D,EAAFjqF,UAAAozB,YAAE,WACE,MAAO3zB,MAAKsyB,aAAaoB,gBAM3B82D,EAAFjqF,UAAAw9B,cAAE,WACE,MAAO/9B,MAAKoyB,YAAY2L,iBAM1BysD,EAAFjqF,UAAAm7D,cAAE,WACE,MAAO17D,MAAKoyB,YAAYspC,iBA3H5B8uB,mBCyCE,QAAFC,GACct0D,EACAE,EACwBq0D,EACZrY,GAHZryE,KAAdm2B,SAAcA,EACAn2B,KAAdq2B,UAAcA,EACwBr2B,KAAtC0qF,mBAAsCA,EACZ1qF,KAA1BqyE,UAA0BA,EApB1BryE,KAAA2qF,2BAAsE,KAzBtE,MA4BEvhF,QAAFC,eAAMohF,EAANlqF,UAAA,6BAAE,WACE,GAAMm2B,GAAS12B,KAAK0qF,kBACpB,OAAOh0D,GAASA,EAAOk0D,sBAAwB5qF,KAAK2qF,gCAGtD,SAA0BrhF,GACpBtJ,KAAK0qF,mBACP1qF,KAAK0qF,mBAAmBE,sBAAwBthF,EAEhDtJ,KAAK2qF,2BAA6BrhF,mCAetCmhF,EAAFlqF,UAAA02B,KAAE,SAA0B87C,EACTj8C,GADjB,GAAF12B,GAAAJ,KAGUm3B,EAAU67C,EAAqBl8C,GAC/BQ,EAAat3B,KAAKi4B,eAAed,GACjCe,EAAYl4B,KAAK6qF,iBAAiBvzD,EAAYH,GAC9C2zD,EAAM,GAAIN,IAAwBtyD,EAAWZ,EAAYt3B,KAAKqyE,UAEpE,IAAIU,YAAkC7lE,GAAAA,YACpCgrB,EAAUjD,qBAAqB,GAAI5mB,GAAAA,eAAkB0kE,EAAsB,MACzE56C,UAAWhB,EAAQ7xB,KACnBylF,eAAgBD,SAEb,CACL,GAAMj2D,GAAS,GAAI+C,GAAAA,gBAAgBm7C,MAAwBpwE,GACrD3C,KAAKo4B,gBAAgBjB,EAAS2zD,IAC9BzyD,EAAaH,EAAUtD,sBAAsBC,EACnDi2D,GAAIhzD,SAAWO,EAAWP,SAuB5B,MAnBAgzD,GAAIr3D,iBAAiBtzB,UAAU,WAEzBC,EAAKwqF,uBAAyBE,IAChC1qF,EAAKwqF,sBAAwB,QAI7B5qF,KAAK4qF,uBAGP5qF,KAAK4qF,sBAAsBn3D,iBAAiBtzB,UAAU,WAAM,MAAA2qF,GAAI34D,kBAAkBkD,UAClFr1B,KAAK4qF,sBAAsBl4D,WAG3Bo4D,EAAI34D,kBAAkBkD,QAGxBr1B,KAAK4qF,sBAAwBE,EAEtBA,GAMTL,EAAFlqF,UAAAmyB,QAAE,WACM1yB,KAAK4qF,uBACP5qF,KAAK4qF,sBAAsBl4D,WAOvB+3D,EAAVlqF,UAAAsqF,iBAAA,SAA2BvzD,EACAR,GAEvB,GAAMS,GAAeT,GAAUA,EAAOznB,kBAAoBynB,EAAOznB,iBAAiBmoB,SAC5EA,EAAW,GAAIC,GAAAA,eAAeF,GAAgBv3B,KAAKq2B,UAAW,GAAIqB,WACrEwxD,GAAsBpyD,MAGnBa,EACF,GAAIC,GAAAA,gBAAgB6xD,GAAyB3yD,EAAOznB,iBAAkBmoB,EAE1E,OAD4DF,GAAWrnB,OAAO0nB,GAC1DG,UAOd2yD,EAAVlqF,UAAA03B,eAAA,SAAyBnB,GACrB,GAAMgC,GAAgB,GAAIC,GAAAA,eACxBhY,UAAW+V,EAAO/V,UAClBw8B,YAAazmB,EAAOymB,YACpBoyB,SAAU,OACVj7B,eAAgB10C,KAAKm2B,SAAS60D,iBAAiBC,QAC/CjyD,iBAAkBh5B,KAAKm2B,SAASroB,WAC7BmrB,SACAK,qBACAC,OAAO,MAOZ,OAJIzC,GAAOqmB,gBACTrkB,EAAcqkB,cAAgBrmB,EAAOqmB,eAGhCn9C,KAAKm2B,SAASqD,OAAOV,IAQtB2xD,EAAVlqF,UAAA63B,gBAAA,SAA6BtB,EACAi0D,GAEzB,GAAMxzD,GAAeT,GAAUA,EAAOznB,kBAAoBynB,EAAOznB,iBAAiBmoB,SAC5Eo8C,EAAkB,GAAIl8C,WACzB8yD,GAAmBO,IACnB9B,GAAuBnyD,EAAOxxB,OAWjC,QARIwxB,EAAO/V,WACLwW,GAAiBA,EAAaxa,IAA2B5E,EAAAA,eAAgB,OAC7Ey7D,EAAgBp5C,IAAIriB,EAAAA,gBAClB7O,MAAOwtB,EAAO/V,UACd/P,OAAQsE,EAAAA,OAIL,GAAImiB,GAAAA,eAAeF,GAAgBv3B,KAAKq2B,UAAWu9C,mBA/I9DnyE,KAACsd,EAAAA,WAADpd,OAAakK,WAAY0+E,2CAdzB9oF,KAAQg4B,EAAAA,UAERh4B,KAAkCk4B,EAAAA,WAiClCl4B,KAA0DgpF,EAA1D7nF,aAAAnB,KAAO2W,EAAAA,WAAP3W,KAAmB0d,EAAAA,aAhCnB1d,KAAQ4yE,EAAAA,SAARzxE,aAAAnB,KAiCO2W,EAAAA,6LA7CPqyE,KjBoCMS,GAA6B,SAM7BC,IACJ,aACA,kBACA,kBACA,oBACA,qBACA,eACA,WAKFC,GAAA,WACE,QAAFA,GAAqBzqF,GAAAX,KAArBW,YAAqBA,EAvDrB,MAAAyqF,MA0DaC,GAEL5yE,EAAW1U,EAAciP,EAAmBo4E,qBAiClD,QAAFlM,GAAc5sE,EAMQ4L,EACA9B,EAE0C0hB,GAT9D,GAAF19B,GAUIkE,EAVJ5D,KAAAV,KAUUsS,IAVVtS,IAMsBI,GAAtB8d,UAAsBA,EACA9d,EAAtBgc,cAAsBA,EAE0Chc,EAAhE09B,eAAgEA,EAjBhE19B,EAAAkrF,cAAoClrF,EAAKmrF,mBAAmB,UAAW,gBAGvEnrF,EAAAorF,aAAmCprF,EAAKmrF,mBAAmB,kBAmBvD,KAAmB,GAAvBz/B,GAAA,EAAuB2/B,EAAvBN,GAAuBr/B,EAAvB2/B,EAAAjrF,OAAuBsrD,IAAwB,CAAtC,GAAM8vB,GAAf6P,EAAA3/B,EACU1rD,GAAKmrF,mBAAmB3P,IACzBtpE,EAAuC,cAAEtR,UAAU0Y,IAAIkiE,SAI5Dx7E,GAAKgc,cAAcU,QAAQ1c,EAAKO,aAAa,GAEzCP,EAAKkrF,gBACPlrF,EAAKgnD,MAAQ8jC,MAzBnB,MAV+BzmF,GAA/By6E,EAAA56E,GAuCE46E,EAAF3+E,UAAAmF,YAAE,WACE1F,KAAKoc,cAAce,eAAend,KAAKW,cAIzCu+E,EAAF3+E,UAAAgS,MAAE,WACEvS,KAAK6iB,kBAAkBtQ,SAGzB2sE,EAAF3+E,UAAAsiB,gBAAE,WACE,MAAO7iB,MAAKW,YAAYC,eAG1Bs+E,EAAF3+E,UAAAgpC,kBAAE,WACE,MAAOvpC,MAAKwpC,eAAiBxpC,KAAKwW,UAIpC0oE,EAAF3+E,UAAAgrF,mBAAE,WAAF,IAAqB,GAArBnrF,GAAAJ,KAAA0rF,KAAA5/B,EAAA,EAAqBA,EAArBvnC,UAAA/jB,OAAqBsrD,IAAA4/B,EAArB5/B,GAAAvnC,UAAAunC,EACI,OAAO4/B,GAAWrqF,KAAK,SAAAsqF,GAAa,MAAAvrF,GAAKyiB,kBAAkBiqC,aAAa6+B,qBA1E5ElqF,KAACC,EAAAA,UAADC,OAAAC,SAAA,iMACEC,SAAU,YACVI,MAGFw9D,aAAA,mBACM7tC,kCAAN,uCAEA9vB,SAAA,mVACAC,QAAA;08LACEC,QAAF,WAAA,gBAAA,SACEQ,cAAFC,EAAAA,kBAAAC,KACEL,gBAAFC,EAAAA,wBAAAC,qFAhEAd,KAAEic,EAAAA,eAJFjc,KAAQyD,OAAQtC,aAAhBnB,KAAA2W,EAAAA,WAAA3W,KAAAoB,EAAAA,OAAAlB,MAAAkwB,EAAAA,4BA6FAqtD,EAAAn8E,uDAXAm8E,uCAgFE15C,+FASFxlC,KAAAwW,8BAEQ9B,EAARyqE,6BAGAC,EAAAx8E,aACAnB,KAAAC,EAAAA,UAAAC,OAAAC,SAAA,gLAxCAK,MAKM4sC,kBAAN,4JAIIjd,kCAAJ,uCAEA5vB,QAAA,WAAA,gBAAA,SACAF,SAAA,mVACAC,QAAA,k8LACAS,cAAAC,EAAAA,kBAAAC,KACEL,gBAAFC,EAAAA,wBAAAC,WAIA68E,EAAAp6D,eAAA,WAAA,QACAvjB,KAAA+b,EAAAA,kJA9JA4hE,EAAAr8E,gBAKAsB,WAAA5C,KAAA2D,EAAAA,4CCbA,sBAcA3D,KAACuB,EAAAA,SAADrB,OACEsB,SACE2D,EAAAA,aACAgX,GACA1a,IAEFC,SACE+7E,GACAE,GACAl8E,IAEFG,cACE67E,GACAE,QA3BJ55D,KC+Ca65D,IACXv6E,QAASw8B,EAAAA,kBACTv8B,YAAayL,EAAAA,WAAW,WAAM,MAAA8uE,MAC9B99C,OAAO,GAOT+9C,GAAA,yBAzDA,MAAAA,MA2DIC,GAAmB,EAGvBC,GAAA,WACE,QAAFA,GAEW7vD,EAGAtmB,GAHAtJ,KAAX4vB,OAAWA,EAGA5vB,KAAXsJ,MAAWA,EApEX,MAAAm2E,oBAuLE,QAAFH,GAAsBz3C,GAAA7nC,KAAtB6nC,gBAAsBA,EA/FtB7nC,KAAAkrB,WAAsB,EACtBlrB,KAAAyjD,WAAsB,EACtBzjD,KAAAkoC,WAAsB,EAetBloC,KAAAmvB,8BAAwD,aAGxDnvB,KAAAgkD,WAA0B,aAe1BhkD,KAAA8nC,MAAkB,2BAA2B03C,KA8B7Cx/E,KAAAovB,YAAmC,GAAIte,GAAAA,aA4BvC9Q,KAAAgR,OAAM,GAAIF,GAAAA,aArLV,MAkHE1H,QAAFC,eACMi2E,EADN/+E,UAAA,YAAE,WACqB,MAAOP,MAAK8nC,WACjC,SAASx+B,GAAT,GAAFlJ,GAAAJ,IACIA,MAAK8nC,MAAQx+B,EAETtJ,KAAK0/E,gBACP1/E,KAAK0/E,eAAe33E,QAAQ,SAAA46B,GAAU,MAAAA,GAAOniB,KAAOpgB,EAAK0nC,yCAM7D1+B,OAAFC,eACMi2E,EADN/+E,UAAA,gBAAE,WAC0B,MAAOP,MAAKkrB,eACtC,SAAa5hB,GACXtJ,KAAKkrB,UAAY5R,EAAAA,sBAAsBhQ,oCAIzCF,OAAFC,eACMi2E,EADN/+E,UAAA,aAAE,WAEE,GAAM0iB,GAAWjjB,KAAKssC,gBAAkBtsC,KAAKssC,gBAAgBrpB,WAE7D,OAAIjjB,MAAKosC,SACAnpB,EAASlZ,IAAI,SAAA44B,GAAU,MAAAA,GAAOr5B,QAGhC2Z,EAAS,GAAKA,EAAS,GAAG3Z,UAAQ3G,QAE3C,SAAU0jC,GACRrmC,KAAK+lD,qBAAqB1f,GAC1BrmC,KAAKovB,YAAY3d,KAAKzR,KAAKsJ,wCAW7BF,OAAFC,eAAMi2E,EAAN/+E,UAAA,gBAAE,WACE,GAAM0iB,GAAWjjB,KAAKssC,gBAAgBrpB,QACtC,OAAOjjB,MAAKosC,SAAWnpB,EAAYA,EAAS,IAAM,sCAIpD7Z,OAAFC,eACMi2E,EADN/+E,UAAA,gBAAE,WAC0B,MAAOP,MAAKyjD,eACtC,SAAan6C,GACXtJ,KAAKyjD,UAAYnqC,EAAAA,sBAAsBhQ,oCAIzCF,OAAFC,eACMi2E,EADN/+E,UAAA,gBAAE,WAC0B,MAAOP,MAAKkoC,eACtC,SAAa5+B,GACXtJ,KAAKkoC,UAAY5uB,EAAAA,sBAAsBhQ,GAEnCtJ,KAAK0/E,gBACP1/E,KAAK0/E,eAAe33E,QAAQ,SAAA46B,GAAU,MAAAA,GAAOgG,mDAUjD22C,EAAF/+E,UAAA6N,SAAE,WACEpO,KAAKssC,gBAAkB,GAAI4Y,GAAAA,eAAgCllD,KAAKosC,aAAUzpC,IAAW,IAGvF28E,EAAF/+E,UAAAkF,mBAAE,kBACEgf,EAAAzkB,KAAKssC,iBAAgBgZ,OAAzBx7C,MAAA2a,EAAmCzkB,KAAK0/E,eAAe5+E,OAAO,SAAA6hC,GAAU,MAAAA,GAAOjB,YAO7E49C,EAAF/+E,UAAAyvB,WAAE,SAAW1mB,GACTtJ,KAAKsJ,MAAQA,EACbtJ,KAAK6nC,gBAAgB12B,gBAIvBmuE,EAAF/+E,UAAA0vB,iBAAE,SAAiBC,GACflwB,KAAKmvB,8BAAgCe,GAIvCovD,EAAF/+E,UAAA4vB,kBAAE,SAAkBD,GAChBlwB,KAAKgkD,WAAa9zB,GAIpBovD,EAAF/+E,UAAA6vB,iBAAE,SAAiBC,GACfrwB,KAAKwW,SAAW6Z,GAIlBivD,EAAF/+E,UAAA+sB,iBAAE,WACE,GAAMrK,GAAWjjB,KAAKijB,SAChB2M,EAASnoB,MAAMC,QAAQub,GAAYA,EAASA,EAASziB,OAAS,GAAKyiB,EACnEvO,EAAQ,GAAI+qE,IAAqB,EAAUz/E,KAAKsJ,MACtDtJ,MAAKmvB,8BAA8Bza,EAAMpL,OACzCtJ,KAAKgR,OAAOS,KAAKiD,IASnB4qE,EAAF/+E,UAAAo/E,kBAAE,SAAkBh9C,EAAyB2iB,EAAiB+C,OAA9D,KAAAA,IAA8DA,GAA9D,GAGSroD,KAAKosC,WAAYpsC,KAAKijB,UAAa0f,EAAOjB,UAC5C1hC,KAAgC,SAAE0hC,SAAU,GAG3C4jB,EACFtlD,KAAKssC,gBAAgBgZ,OAAO3iB,GAE5B3iC,KAAKssC,gBAAgBkZ,SAAS7iB,GAI5B0lB,GACFroD,KAAKstB,mBAKPttB,KAAKovB,YAAY3d,KAAKzR,KAAKsJ,QAI7Bg2E,EAAF/+E,UAAAq/E,YAAE,SAAYj9C,GACV,MAAO3iC,MAAKssC,gBAAgBkc,WAAW7lB,IAIzC28C,EAAF/+E,UAAAs/E,cAAE,SAAcl9C,GACZ,WAA8B,KAAnB3iC,KAAK8/E,YAIZ9/E,KAAKosC,UAAY3kC,MAAMC,QAAQ1H,KAAK8/E,WAC/B9/E,KAAK8/E,UAAUz+E,KAAK,SAAAiI,GAAS,MAAgB,OAAhBq5B,EAAOr5B,OAAiBA,IAAUq5B,EAAOr5B,QAGxEq5B,EAAOr5B,QAAUtJ,KAAK8/E,YAIvBR,EAAV/+E,UAAAwlD,qBAAA,SAA+Bz8C,aAG3B,IAFAtJ,KAAK8/E,UAAYx2E,EAEZtJ,KAAK0/E,eAIV,GAAI1/E,KAAKosC,UAAY9iC,EAAO,CAC1B,IAAK7B,MAAMC,QAAQ4B,GACjB,KAAMosB,OAAM,qDAGd11B,MAAK89E,kBACLx0E,EAAMvB,QAAQ,SAAC0/C,GAAsB,MAAArnD,GAAKsnD,aAAaD,SAEvDznD,MAAK89E,kBACL99E,KAAK0nD,aAAap+C,IAKdg2E,EAAV/+E,UAAAu9E,2BACI99E,KAAKssC,gBAAgB+G,QACrBrzC,KAAK0/E,eAAe33E,QAAQ,SAAA46B,GAAU,MAAAA,GAAOjB,SAAU,KAIjD49C,EAAV/+E,UAAAmnD,aAAA,SAAuBp+C,GACnB,GAAMs+C,GAAsB5nD,KAAK0/E,eAAe5jE,KAAK,SAAA6mB,GACnD,MAAuB,OAAhBA,EAAOr5B,OAAiBq5B,EAAOr5B,QAAUA,GAG9Cs+C,KACFA,EAAoBlmB,SAAU,EAC9B1hC,KAAKssC,gBAAgBgZ,OAAOsC,oBA5OlCnmD,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,0BACViD,WACEw6E,IACCv6E,QAASy6E,GAA8Bx6E,YAAau6E,IAEvDr9E,MACEsC,KAAQ,QACRrC,MAAS,0BACT2Q,uBAAwB,WACxBktE,qCAAsC,YAExCl+E,SAAU,+DArEZJ,KAAEsQ,EAAAA,uCAgGF2tE,iBAAAj+E,KAAGoE,EAAAA,gBAAHlE,MAAmB6O,EAAAA,WAAW,WAAM,MAAAwvE,SAGpCx/D,OAAA/e,KAAG2D,EAAAA,QAYHomB,WAAA/pB,KAAG2D,EAAAA,QAOHkE,QAAA7H,KAAG2D,EAAAA,QAoBHgqB,cAAA3tB,KAAGuQ,EAAAA,SASHo6B,WAAA3qC,KAAG2D,EAAAA,QAOHoR,WAAA/U,KAAG2D,EAAAA,QAWH4L,SAAAvP,KAAGuQ,EAAAA,UApLHstE,KA2TAW,GAAA,yBA3TA,MAAAA,MA4TaC,GACTltE,EAAmBitE,mBA6FrB,QAAFD,GAA0BG,EACJjtE,EACAvS,EACAyb,EAEe4jD,GALnC,GAAF5/D,GAMIkE,EANJ5D,KAAAV,OAAAA,IACsBI,GAAtB8S,mBAAsBA,EACA9S,EAAtBO,YAAsBA,EACAP,EAAtBgc,cAAsBA,EAvEtBhc,EAAAggF,mBAA8B,EAC9BhgF,EAAA8hC,UAAqB,EAWrB9hC,EAAAsO,eAA4D,KAkD5DtO,EAAA8nC,WAA+B,EAI/B9nC,EAAA4Q,OAAM,GAAIF,GAAAA,YAUN,IAAMmvD,GAAiBz7D,OAAOw7D,SAC9B5/D,GAAKiE,SAAY47D,GAAqC,IAAnBA,EAAwBA,EAAiB,KAC5E7/D,EAAKigF,kBAAoBF,IAb7B,MApEqC17E,GAArCu7E,EAAA17E,GA0BE8E,OAAFC,eAAM22E,EAANz/E,UAAA,gBAAE,WAAyB,MAAUP,MAAK8e,GAA1C,2CAeE1V,OAAFC,eACM22E,EADNz/E,UAAA,eAAE,WAEE,MAAOP,MAAKqgF,kBAAoBrgF,KAAKqgF,kBAAkBT,YAAY5/E,MAAQA,KAAKkiC,cAElF,SAAY54B,GACV,GAAM+8B,GAAW/sB,EAAAA,sBAAsBhQ,EAEnC+8B,KAAarmC,KAAKkiC,WACpBliC,KAAKkiC,SAAWmE,EAEZrmC,KAAKqgF,mBACPrgF,KAAKqgF,kBAAkBV,kBAAkB3/E,KAAMA,KAAKkiC,UAGtDliC,KAAKkT,mBAAmB/B,iDAK5B/H,OAAFC,eACM22E,EADNz/E,UAAA,gBAAE,WAEE,MAAOP,MAAKkoC,WAAcloC,KAAKqgF,mBAAqBrgF,KAAKqgF,kBAAkB7pE,cAE7E,SAAalN,GAAkBtJ,KAAKkoC,UAAY5uB,EAAAA,sBAAsBhQ,oCAoBtE02E,EAAFz/E,UAAA6N,SAAE,WACEpO,KAAKogF,kBAAoBpgF,KAAKqgF,oBAAsBrgF,KAAKqgF,kBAAkBj0C,SAC3EpsC,KAAKk2E,MAAQl2E,KAAKogF,kBAAoB,QAAU,WAChDpgF,KAAK8e,GAAK9e,KAAK8e,IAAM,qBAAqB0gE,KAEtCx/E,KAAKogF,oBACPpgF,KAAKwgB,KAAOxgB,KAAKqgF,kBAAkB7/D,MAGjCxgB,KAAKqgF,mBAAqBrgF,KAAKqgF,kBAAkBR,cAAc7/E,QACjEA,KAAK0hC,SAAU,GAGjB1hC,KAAKoc,cAAcU,QAAQ9c,KAAKW,aAAa,IAG/Cq/E,EAAFz/E,UAAAmF,YAAE,WACE1F,KAAKoc,cAAce,eAAend,KAAKW,cAIzCq/E,EAAFz/E,UAAAgS,MAAE,WACEvS,KAAKsgF,eAAe1/E,cAAc2R,SAIpCytE,EAAFz/E,UAAAggF,eAAE,WACE,GAAMC,KAAaxgF,KAAKogF,oBAA4BpgF,KAAKkiC,QAErDs+C,KAAexgF,KAAKkiC,WACtBliC,KAAKkiC,SAAWs+C,EACZxgF,KAAKqgF,oBACPrgF,KAAKqgF,kBAAkBV,kBAAkB3/E,KAAMA,KAAKkiC,UAAU,GAC9DliC,KAAKqgF,kBAAkBr8B,eAI3BhkD,KAAKgR,OAAOS,KAAK,GAAIguE,IAAsBz/E,KAAMA,KAAKsJ,SAQxD02E,EAAFz/E,UAAAooC,cAAE,WAGE3oC,KAAKkT,mBAAmB/B,+BAvJ5B1P,KAACC,EAAAA,UAADC,OAAAC,SAAA,oBACEE,SAAU,ykBACVC,QAAF,2hDACES,cAAFC,EAAAA,kBAAmCC,KACjCb,SAAF,kBACEQ,gBAAFC,EAAAA,wBAAAC,OACEP,QAAF,iBACEC,MACFw+E,uCAAA,qBACMC,oCAAN,UACIC,qCAAsC,WACtCz+E,MAAJ,oBAEI2sC,kBAAJ,qIA6EAptC,KAAuCuD,EAAAA,aA3YvCvD,KAAEic,EAAAA,eAIFjc,KAAEyD,OAAFtC,aAAAnB,KAAA0D,EAAAA,UAAAxD,MAAA,iBA4YAq+E,EAAAj9E,wHAlEAu9E,iBAAA7+E,KAAQ+M,EAAAA,UAAR7M,MAAA,YAKAmd,KAAArd,KAAA2D,EAAAA,QAKAob,OAAA/e,KAAA2D,EAAAA,QASAkE,QAAA7H,KAAA2D,EAAAA,QAGAf,WAAA5C,KAAA2D,EAAAA,QAGAs8B,UAAAjgC,KAAA2D,EAAAA,QAGAoR,WAAA/U,KAAG2D,EAAAA,QAGH4L,SAAAvP,KAAAuQ,EAAAA,UA2BAguE,mCCvZA,sBAaAv+E,KAACuB,EAAAA,SAADrB,OACEsB,SAAUC,GAAiB0a,IAC3Bza,SAAUD,GAAiBo8E,GAAsBU,IACjD38E,cAAei8E,GAAsBU,QAhBvCY,iCCAA,sBAqBAn/E,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,mBACVK,MAAOC,MAAS,wBAvBlB2+E,iCAAA,sBA+BAp/E,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,mDACVK,MACEC,MAAS,sBAlCb4+E,iCAAA,sBA2CAr/E,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,4DACVK,MACEC,MAAS,yBA9Cb6+E,gCAiEA/gF,KAAAghF,MAAoC,QAjEpC,sBAuDAv/E,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,mBACVC,SAAU,iBACVI,MACEC,MAAS,mBACT++E,qCAAsC,yCAK1CD,QAAAv/E,KAAG2D,EAAAA,SAjEH87E,iCAAA,sBAwEAz/E,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,kBACVK,MAAOC,MAAS,uBA1ElBi/E,iCAAA,sBAkFA1/E,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,mCACVK,MAAOC,MAAS,sBApFlBk/E,iCAAA,sBA4FA3/E,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,2CACVK,MAAOC,MAAS,yBA9FlBm/E,iCAAA,sBAsGA5/E,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,4CACVK,MAAOC,MAAS,yBAxGlBo/E,iCAAA,sBAgHA7/E,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,2CACVK,MAAOC,MAAS,yBAlHlBq/E,iCAAA,sBA0HA9/E,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,4CACVK,MAAOC,MAAS,yBA5HlBs/E,iCAAA,sBAoIA//E,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,qCACVK,MAAOC,MAAS,uBAtIlBu/E,iCA+JA,sBATAhgF,KAACC,EAAAA,UAADC,OAAAC,SAAA,WACEC,SAAU,UACVC,SAAU,8EACVC,QAAF,01EACES,cAAFC,EAAAA,kBAAAC,KACEL,gBAAFC,EAAAA,wBAAAC,OACEN,MAAFC,MAAA,gBAGAw/E,iCAcA,yWALAl/E,cAAAC,EAAAA,kBAAAC,KACEL,gBAAiBC,EAAAA,wBAAnBC,OACEN,MAAQC,MAAV,uBAGAy/E,iCAcA,0YAHA1/E,MAAAC,MAAA,4BAGA0/E,iCC3LA,sBA4BAngF,KAACuB,EAAAA,SAADrB,OACEsB,SAAUC,IACVC,SACEu+E,GACAC,GACAC,GACAf,GACAC,GACAC,GACAG,GACAC,GACAE,GACAC,GACAC,GACAH,GACAI,GACAC,GACAv+E,IAEFG,cACEq+E,GAASC,GAAeC,GAAmBf,GAAgBC,GAAcC,GACzEG,GAAgBC,GAAeE,GAAgBC,GAAgBC,GAAgBH,GAC/EI,GAAgBC,QAlDpBI,KCsBatH,GACT,GAAI3uE,GAAAA,eAAuC,6BX0B3Cw1B,GAAe,EAKf04C,GAAyB,EAOhBQ,IACXx1E,QAASw8B,EAAAA,kBACTv8B,YAAayL,EAAAA,WAAW,WAAM,MAAAgoE,MAC9Bh3C,OAAO,OASPm4C,KAAF,EAEEJ,QAAF,EAEEC,UAAF,EAEEI,cAAF,EANAN,IAAAA,GAAEK,MAAF,OAEAL,GAAAA,GAAEC,SAAF,UAEAD,GAAAA,GAAEE,WAAF,YAEAF,GAAAA,GAAEM,eAAF,eAIA,IAAAV,IAAA,yBAnFA,MAAAA,MA4FA4I,GAAA,WACE,QAAFA,GAAqBnhF,GAAAX,KAArBW,YAAqBA,EA7FrB,MAAAmhF,MA+FaC,GAMLj+E,EAAc2U,EAAWzF,EAAmBjP,EAAc+9E,KAAmB,0BA6FnF,QAAFtJ,GAAclmE,EACQY,EACAkJ,EACAnQ,EACe5H,EAEX80E,EACsCr7C,GAP9D,GAAF19B,GAQIkE,EARJ5D,KAAAV,KAQUsS,IARVtS,WACsBI,GAAtB8S,mBAAsBA,EACA9S,EAAtBgc,cAAsBA,EACAhc,EAAtB6L,QAAsBA,EAGI7L,EAA1B+4E,aAA0BA,EACsC/4E,EAAhE09B,eAAgEA,EA9DhE19B,EAAAqO,UAA2C,GAK3CrO,EAAAsO,eAA4D,KAE5DtO,EAAA4hC,UAA8B,mBAAkBZ,GAGhDhhC,EAAA0e,GAAwB1e,EAAK4hC,UAY7B5hC,EAAAgiC,cAA+C,QAG/ChiC,EAAAogB,KAAiC,KAIjCpgB,EAAA4Q,OAAM,GAAIF,GAAAA,aAGV1Q,EAAAi5E,oBAAkE,GAAIvoE,GAAAA,aAetE1Q,EAAA4jD,WAA0B,aAE1B5jD,EAAA24E,uBAA2C,GAE3C34E,EAAA04E,mBAAqDQ,GAAqBK,KAE1Ev5E,EAAA+uB,8BAAgE,aA6ChE/uB,EAAA8hC,UAA8B,EAc9B9hC,EAAA8nC,WAA+B,EAwB/B9nC,EAAAg5E,gBAAoC,EAvEhCh5E,EAAKiE,SAAWkY,SAASlY,IAAa,EAEtCjE,EAAKgc,cAAcU,QAAQxK,GAAY,GAAMnS,UAAU,SAAAoiC,GAChDA,GAMHp3B,QAAQC,UAAUC,KAAK,WAAM,MAAAjL,GAAK4jD,mBA8C1C,MA/HiCv/C,GAAjC+zE,EAAAl0E,GAoBE8E,OAAFC,eAAMmvE,EAANj4E,UAAA,eAAE,WAAwB,OAAUP,KAAK8e,IAAM9e,KAAKgiC,WAApD,0CAGE54B,OAAFC,eACMmvE,EADNj4E,UAAA,gBAAE,WAC0B,MAAOP,MAAKiiC,eACtC,SAAa34B,GAAkBtJ,KAAKiiC,UAAY3oB,EAAAA,sBAAsBhQ,oCA6DtEkvE,EAAFj4E,UAAAyhF,mBAAE,WACEhiF,KAAK65E,0BAGPrB,EAAFj4E,UAAAmF,YAAE,WACE1F,KAAKoc,cAAce,eAAend,KAAKW,cAMzCyI,OAAFC,eACMmvE,EADNj4E,UAAA,eAAE,WACyB,MAAOP,MAAKkiC,cACrC,SAAY54B,GACNA,GAAStJ,KAAK0hC,UAChB1hC,KAAKkiC,SAAW54B,EAChBtJ,KAAKkT,mBAAmB/B,iDAS5B/H,OAAFC,eACMmvE,EADNj4E,UAAA,gBAAE,WACiB,MAAOP,MAAKkoC,eAC7B,SAAa5+B,GACPA,GAAStJ,KAAKwW,WAChBxW,KAAKkoC,UAAY5+B,EACjBtJ,KAAKkT,mBAAmB/B,iDAW5B/H,OAAFC,eACMmvE,EADNj4E,UAAA,qBAAE,WAC+B,MAAOP,MAAKo5E,oBAC3C,SAAkB9vE,GAChB,GAAM24E,GAAU34E,GAAStJ,KAAKo5E,cAC9Bp5E,MAAKo5E,eAAiB9vE,EAElB24E,IACEjiF,KAAKo5E,eACPp5E,KAAK24E,sBAAsBW,GAAqBM,eAEhD55E,KAAK24E,sBACH34E,KAAK0hC,QAAU43C,GAAqBC,QAAUD,GAAqBE,WAEvEx5E,KAAKq5E,oBAAoB5nE,KAAKzR,KAAKo5E;kCAKvCZ,EAAFj4E,UAAAgpC,kBAAE,WACE,MAAOvpC,MAAKwpC,eAAiBxpC,KAAKwW,UAIpCgiE,EAAFj4E,UAAAojC,mBAAE,WAME3jC,KAAKkT,mBAAmBsZ,iBAI1BgsD,EAAFj4E,UAAAyvB,WAAE,SAAW1mB,GACTtJ,KAAK0hC,UAAYp4B,GAInBkvE,EAAFj4E,UAAA0vB,iBAAE,SAAiBC,GACflwB,KAAKmvB,8BAAgCe,GAIvCsoD,EAAFj4E,UAAA4vB,kBAAE,SAAkBD,GAChBlwB,KAAKgkD,WAAa9zB,GAIpBsoD,EAAFj4E,UAAA6vB,iBAAE,SAAiBC,GACfrwB,KAAKwW,SAAW6Z,GAGlBmoD,EAAFj4E,UAAAk4E,gBAAE,WACE,MAAOz4E,MAAK0hC,QAAU,OAAU1hC,KAAK04E,cAAgB,QAAU,SAGzDF,EAAVj4E,UAAAo4E,sBAAA,SAAgCC,GAC5B,GAAIC,GAAW74E,KAAK84E,mBAChB1sE,EAAuBpM,KAAKW,YAAYC,aAE5C,IAAIi4E,IAAaD,IAGb54E,KAAK+4E,uBAAuBv4E,OAAS,GACvC4L,EAAQpL,UAAUwY,OAAOxZ,KAAK+4E,wBAGhC/4E,KAAK+4E,uBAAyB/4E,KAAKg5E,0CAC/BH,EAAUD,GACd54E,KAAK84E,mBAAqBF,EAEtB54E,KAAK+4E,uBAAuBv4E,OAAS,GAAG,CAC1C4L,EAAQpL,UAAU0Y,IAAI1Z,KAAK+4E,uBAG3B,IAAME,GAAiBj5E,KAAK+4E,sBAE5B/4E,MAAKiM,QAAQM,kBAAkB,WAC7B8mB,WAAW,WACTjnB,EAAQpL,UAAUwY,OAAOy/D,IACxB,SAKDT,EAAVj4E,UAAA+sB,4BACI,GAAM5Y,GAAQ,GAAIwkE,GAClBxkE,GAAMkb,OAAS5vB,KACf0U,EAAMgtB,QAAU1hC,KAAK0hC,QAErB1hC,KAAKmvB,8BAA8BnvB,KAAK0hC,SACxC1hC,KAAKgR,OAAOS,KAAKiD,IAInB8jE,EAAFj4E,UAAAoiC,OAAE,WACE3iC,KAAK0hC,SAAW1hC,KAAK0hC,SAUvB82C,EAAFj4E,UAAAmiC,cAAE,SAAchuB,GAAd,GAAFtU,GAAAJ,IAQI0U,GAAMqnB,kBAGD/7B,KAAKwW,UAAkC,SAAtBxW,KAAKm5E,aAkBfn5E,KAAKwW,UAAkC,SAAtBxW,KAAKm5E,eAGhCn5E,KAAKyiC,cAAc7hC,cAAc8gC,QAAU1hC,KAAK0hC,QAChD1hC,KAAKyiC,cAAc7hC,cAAc83E,cAAgB14E,KAAK04E,gBApBlD14E,KAAK04E,eAAuC,UAAtB14E,KAAKm5E,cAE7BhuE,QAAQC,UAAUC,KAAK,WACrBjL,EAAKg5E,gBAAiB,EACtBh5E,EAAKi5E,oBAAoB5nE,KAAKrR,EAAKg5E,kBAIvCp5E,KAAK2iC,SACL3iC,KAAK24E,sBACD34E,KAAKkiC,SAAWo3C,GAAqBC,QAAUD,GAAqBE,WAKxEx5E,KAAKstB,qBAUTkrD,EAAFj4E,UAAAgS,MAAE,WACEvS,KAAKoc,cAAcqgB,SAASz8B,KAAKyiC,cAAe,aAGlD+1C,EAAFj4E,UAAAk5E,oBAAE,SAAoB/kE,GAIlBA,EAAMqnB,mBAGAy8C,EAAVj4E,UAAAy4E,0CACA,SAAMH,EAAgCD,GAElC,GAA4B,mBAAxB54E,KAAK89B,eACP,MAAO,EAGT,IAAI47C,GAAqB,EAEzB,QAAQb,GACN,IAAKS,IAAqBK,KAGxB,GAAIf,IAAaU,GAAqBC,QACpCG,EAAa,wBACR,CAAA,GAAId,GAAYU,GAAqBM,cAG1C,MAAO,EAFPF,GAAa,0BAIf,KACF,KAAKJ,IAAqBE,UACxBE,EAAad,IAAaU,GAAqBC,QAC3C,oBAAsB,yBAC1B,MACF,KAAKD,IAAqBC,QACxBG,EAAad,IAAaU,GAAqBE,UAC3C,oBAAsB,uBAC1B,MACF,KAAKF,IAAqBM,cACxBF,EAAad,IAAaU,GAAqBC,QAC3C,wBAA0B,0BAIlC,MAAO,qBAAqBG,GAStBlB,EAAVj4E,UAAAs5E,kCACI,IAAKC,GAAwB,CAC3B,GAAMC,GACF/5E,KAAKW,YAAYC,cAAc0mD,cAAc,wBAAwBlkB,aAAe,CACxF02C,IAAyBC,EAAc,EAEzC/5E,KAAKg6E,OAAOC,OAASH,mBAhWzBr4E,KAACC,EAAAA,UAADC,OAAAC,SAAA,eACEE,SAAU,q7CACVC,QAAF,isMACEF,SAAF,cACEI,MACFC,MAAA,eACM0hC,OAAN,KACIs2C,qCAAJ,gBACIC,+BAAJ,UACIC,gCAAJ,WACIC,oCAAJ,4BACIzoD,kCAAJ,uCAEA/sB,WAAAy1E,IACAt4E,QAAA,gBAAA,QAAA,YACEQ,cAAFC,EAAAA,kBAAAC,KACEL,gBAAFC,EAAAA,wBAAAC,8FAjHAd,KAAEic,EAAAA,eAFFjc,KAAEuL,EAAAA,SALFvL,KAAQyD,OAARtC,aAAAnB,KAAA0D,EAAAA,UAAAxD,MAAA,gBAYAF,SAAEkB,GAAFC,aAAAnB,KAAA2W,EAAAA,WAAA3W,KAAAoB,EAAAA,OAAAlB,MAAA44E,QAkLA94E,KAAAyD,OAAAtC,aAAAnB,KAAe2W,EAAAA,WAAf3W,KAAAoB,EAAAA,OAAmClB,MAAnCkwB,EAAAA,4BAGA2mD,EAAAz1E,wHA9DA+b,KAAArd,KAAA2D,EAAAA,QAKA4+B,WAAAviC,KAAA2D,EAAAA,QAKAg9B,gBAAQ3gC,KAAR2D,EAAAA,QAMAob,OAAA/e,KAAA2D,EAAAA,QAMA4L,SAAAvP,KAAAuQ,EAAAA,SAGAqnE,sBAAA53E,KAAAuQ,EAAAA,SAGA1I,QAAA7H,KAAA2D,EAAAA,QAIAq9B,gBAAAhhC,KAAA+M,EAAAA,UAAA7M,MAAA,WAGAq4E,SAAAv4E,KAAA+M,EAAAA,UAAA7M,MAAA64E,MAGA94C,UAAAjgC,KAAA2D,EAAAA,QAGAoR,WAAA/U,KAAA2D,EAAAA,QAiDAszE,gBAAGj3E,KAAH2D,EAAAA,SA8BAozE,OCjPaiC,IACX31E,QAASw3D,EAAAA,cACTv3D,YAAayL,EAAAA,WAAW,WAAM,MAAAkqE,MAC9Bl5C,OAAO,8EArBT,MAmCkD/8B,GAAlDi2E,EAAAp2E,kBANA7C,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,8HAEViD,WAAY41E,IACZx4E,MAAO04E,kBAAmB,4BAjC5BD,GAmCkDE,EAAAA,uDCnClD,sBAgBAn5E,KAACuB,EAAAA,SAADrB,OACEsB,SAAU2D,EAAAA,aAAcgX,GAAiB1a,GAAiB2a,EAAAA,iBAC1D1a,SAAUq1E,GAAakC,GAA8Bx3E,IACrDG,cAAem1E,GAAakC,QAnB9BG,KCoDAC,GAAA,WACE,QAAFA,GAEWlrD,EAEA3M,EAEAolC,sBAJAroD,KAAX4vB,OAAWA,EAEA5vB,KAAXijB,SAAWA,EAEAjjB,KAAXqoD,YAAWA,EA3DX,MAAAyyB,MAiEAC,GAAA,WACE,QAAFA,GAAqBp6E,GAAAX,KAArBW,YAAqBA,EAlErB,MAAAo6E,MAqEaC,GAELviE,EAAWzF,EAAmBjP,EAAcg3E,KAAe,WAE7DE,IAAwB,8CAzE9B,sBA+EAx5E,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,mCACVK,MAAOC,MAAS,uBAjFlBmtE,iCAAA,sBAyFA5tE,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,gDACVK,MAAOC,MAAS,8BA3FlBotE,oBAgOE,QAAFpB,GAAqBvtE,EACCsL,EACRs5B,EAC+C/oB,GAH3D,GAAFpc,GAIIkE,EAJJ5D,KAAAV,KAIUW,IAJVX,WAAqBI,GAArBO,YAAqBA,EACCP,EAAtB6L,QAAsBA,EAnGtB7L,EAAAqc,0BAAqC,EAMrCrc,EAAA86E,gBAWA96E,EAAA+6E,WAAuB,EAGvB/6E,EAAAg7E,oBAAgC,EAsBhCh7E,EAAA2nC,WAAiC,EAuBjC3nC,EAAAi7E,aAAmC,EAUnCj7E,EAAAk7E,YAAkC,EAGlCl7E,EAAAwtB,SAAsB,GAAI/f,GAAAA,QAG1BzN,EAAAytB,QAAqB,GAAIhgB,GAAAA,QAIzBzN,EAAAywC,gBAAM,GAAI//B,GAAAA,aAGV1Q,EAAAm7E,UAA6D,GAAIzqE,GAAAA,aAGjE1Q,EAAAmlD,QAA2D,GAAIz0C,GAAAA,aAa3D1Q,EAAKo7E,oBAELp7E,EAAKq7E,YAAc,GAAIC,IAAet7E,EAAM6L,EAAStL,EAAa4kC,GAClEnlC,EAAKq7E,YAAYn/D,mBAAmB3b,EAAYC,eAE5C4b,IACFpc,EAAKqc,2BAA6BD,EAAchG,SAEhDpW,EAAK86E,cACHv+D,YAAaH,EAAcI,gBAC3BC,UAAWL,EAAcK,UACzBH,qBAAsBF,EAAcE,yBAjP5C,MAuH6BjY,GAA7BypE,EAAA5pE,GAmBE8E,OAAFC,eAAM6kE,EAAN3tE,UAAA,sBAAE,WACE,MAAOP,MAAKwW,UAAYxW,KAAKwpC,eAAiBxpC,KAAKyc,0DAmBrDrT,OAAFC,eACM6kE,EADN3tE,UAAA,gBAAE,WAC0B,MAAOP,MAAK+nC,eACtC,SAAaz+B,GACXtJ,KAAK+nC,UAAYzuB,EAAAA,sBAAsBhQ,GACvCtJ,KAAK6wC,gBAAgBp/B,MACnBme,OAAQ5vB,KACRqoD,aAAa,EACbplC,SAAU3Z,qCAMdF,OAAFC,eACM6kE,EADN3tE,UAAA,aAAE,WAEE,WAAsBoC,IAAf3C,KAAK2qB,OACR3qB,KAAK2qB,OACL3qB,KAAKW,YAAYC,cAAcU,iBAErC,SAAUgI,GAActJ,KAAK2qB,OAASrhB,mCAStCF,OAAFC,eACM6kE,EADN3tE,UAAA,kBAAE,WAC4B,MAAOP,MAAKq7E,aAAer7E,KAAKo7E,wBAC5D,SAAe9xE,GACbtJ,KAAKq7E,YAAc/hE,EAAAA,sBAAsBhQ,oCAO3CF,OAAFC,eACM6kE,EADN3tE,UAAA,iBAAE,WAC2B,MAAOP,MAAKs7E,gBACvC,SAAchyE,GACZtJ,KAAKs7E,WAAahiE,EAAAA,sBAAsBhQ,oCAqB1CF,OAAFC,eAAM6kE,EAAN3tE,UAAA,oBAAE,WACE,MAAOP,MAAKguE,WAAahuE,KAAKijB,SAASuhB,WAAa,sCAyBtD0pC,EAAF3tE,UAAAi7E,kBAAE,WAEE,IAAmB,GAAvB1vB,GAAA,EAAuB6vB,EAAvBV,GAAuBnvB,EAAvB6vB,EAAAn7E,OAAuBsrD,IAAsB,CAApC,GAAM8vB,GAAfD,EAAA7vB,EACM,IAAI9rD,KAAKW,YAAYC,cAAcksD,aAAa8uB,IAC9C57E,KAAKW,YAAYC,cAAci7E,QAAQlyD,gBAAkBiyD,EAEzD,WADC57E,MAAKW,YAAwC,cAAEK,UAAU0Y,IAAIkiE,GAIjE57E,KAAKW,YAAwC,cAAEK,UAAU0Y,IAAI,sBAGhEw0D,EAAF3tE,UAAAmF,YAAE,WACE1F,KAAKu7E,UAAU9pE,MAAMqqE,KAAM97E,OAC3BA,KAAKy7E,YAAYM,wBAInB7N,EAAF3tE,UAAA+kD,OAAE,WACEtlD,KAAK+nC,WAAY,EACjB/nC,KAAK6wC,gBAAgBp/B,MACnBme,OAAQ5vB,KACRqoD,aAAa,EACbplC,UAAU,KAKdirD,EAAF3tE,UAAAilD,SAAE,WACExlD,KAAK+nC,WAAY,EACjB/nC,KAAK6wC,gBAAgBp/B,MACnBme,OAAQ5vB,KACRqoD,aAAa,EACbplC,UAAU,KAKdirD,EAAF3tE,UAAAy7E,qBAAE,WACEh8E,KAAK+nC,WAAY,EAEjB/nC,KAAK6wC,gBAAgBp/B,MACnBme,OAAQ5vB,KACRqoD,aAAa,EACbplC,UAAU,KAKdirD,EAAF3tE,UAAA07E,eAAE,SAAe5zB,GASb,WATJ,KAAAA,IAAiBA,GAAjB,GACIroD,KAAK+nC,WAAa/nC,KAAKijB,SAEvBjjB,KAAK6wC,gBAAgBp/B,MACnBme,OAAQ5vB,KACRqoD,YAANA,EACMplC,SAAUjjB,KAAK+nC,YAGV/nC,KAAKijB,UAIdirD,EAAF3tE,UAAAgS,MAAE,WACOvS,KAAKm7E,YACRn7E,KAAKW,YAAYC,cAAc2R,QAC/BvS,KAAK4tB,SAASrkB,MAAMuyE,KAAM97E,QAE5BA,KAAKm7E,WAAY,GASnBjN,EAAF3tE,UAAAiZ,OAAE,WACMxZ,KAAKk8E,WACPl8E,KAAKulD,QAAQ9zC,MAAMqqE,KAAM97E,QAK7BkuE,EAAF3tE,UAAAua,aAAE,SAAapG,GACP1U,KAAKwW,SACP9B,EAAMI,iBAENJ,EAAMqnB,mBAKVmyC,EAAF3tE,UAAAkU,eAAE,SAAeC,GACb,IAAI1U,KAAKwW,SAIT,OAAQ9B,EAAMC,SACZ,IAAKwnE,GAAAA,OACL,IAAKC,GAAAA,UAEHp8E,KAAKwZ,SAEL9E,EAAMI,gBACN,MACF,KAAKI,GAAAA,MAEClV,KAAKguE,YACPhuE,KAAKi8E,gBAAe,GAItBvnE,EAAMI,mBAKZo5D,EAAF3tE,UAAAouE,MAAE,WAAA,GAAFvuE,GAAAJ,IAKIA,MAAKiM,QAAQqyC,SACV5qB,eACA9rB,KAAKC,EAAAA,KAAK,IACV1H,UAAU,WACTC,EAAK6L,QAAQiK,IAAI,WACf9V,EAAK+6E,WAAY,EACjB/6E,EAAKytB,QAAQtkB,MAAMuyE,KAAM17E,wBApRnCqB,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,yDACVI,QAAS,QAAS,WAAY,iBAC9BH,SAAU,UACVI,MACEC,MAAS,WACT2sC,kBAAmB,uBACnBtqC,KAAQ,SACR83E,4BAA6B,WAC7BC,+BAAgC,SAChCC,sCAAuC,6BACvCC,4BAA6B,WAC7BlgC,kBAAmB,mBACnBzpC,uBAAwB,sBACxB24C,uBAAwB,eACxB/kD,UAAW,uBACXgqB,YAAa,yBACbF,UAAW,UACXC,SAAU,mDArGd/uB,KAAEuD,EAAAA,aAKFvD,KAAEuL,EAAAA,SATFvL,KAAQ+b,EAAAA,WAwNR/b,SAAAkB,GAAAC,aAAAnB,KAAe2W,EAAAA,WAAf3W,KAA2BoB,EAAAA,OAA3BlB,MAAkC8b,2BA9ElCg/D,SAAAh7E,KAAGm+B,EAAAA,aAAHj+B,MAAgB0tE,MAGhBqN,eAAAj7E,KAAGm+B,EAAAA,aAAHj+B,MAAgB2tE,MAGhBqN,aAAAl7E,KAAGm+B,EAAAA,aAAHj+B,MAAgB6O,EAAAA,WAAW,WAAM,MAAA4+D,SAGjCnsD,WAAAxhB,KAAG2D,EAAAA,QAaHkE,QAAA7H,KAAG2D,EAAAA,QAeH4oE,aAAAvsE,KAAG2D,EAAAA,QAUH82E,YAAAz6E,KAAG2D,EAAAA,QAcHyrC,kBAAApvC,KAAGuQ,EAAAA,SAIHupE,YAAA95E,KAAGuQ,EAAAA,SAGHuzC,UAAA9jD,KAAGuQ,EAAAA,UAzNHk8D,GAuH6B8M,kBA2R3B,QAAF5L,GAAwBwN,GAAA58E,KAAxB48E,YAAwBA,EAlZxB,MAqZExN,GAAF7uE,UAAAua,aAAE,SAAapG,GACP1U,KAAK48E,YAAYV,WACnBl8E,KAAK48E,YAAYpjE,SAQnB9E,EAAMqnB,kCArBVt6B,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,kBACVK,MACEC,MAAS,yCACTuE,UAAW,gEAIfhF,KAAqCysE,MAlZrCkB,KCiBaH,GACT,GAAIrjE,GAAAA,eAAuC,6BnB6B/CixE,GAAA,WACE,QAAFA,GAAqB35B,EACAC,EACAC,EAEAC,GAJArjD,KAArBkjD,0BAAqBA,EACAljD,KAArBmjD,YAAqBA,EACAnjD,KAArBojD,iBAAqBA,EAEApjD,KAArBqjD,UAAqBA,EApDrB,MAAAw5B,MAsDaC,GACTv5B,EAAgBs5B,IAIhBz7C,GAAe,EAGnB27C,GAAA,WACE,QAAFA,GAEWntD,EAEAtmB,GAFAtJ,KAAX4vB,OAAWA,EAEA5vB,KAAXsJ,MAAWA,EAnEX,MAAAyzE,qBA8UE,QAAFjP,GAAwBntE,EACFuS,EACYxC,EACRyyC,EACAC,EACZF,EAE2BG,GAPvC,GAAFjjD,GAQIkE,EARJ5D,KAAAV,KAQUkjD,EAA2BC,EAAaC,EAAkBC,IARpErjD,WAAwBI,GAAxBO,YAAwBA,EACFP,EAAtB8S,mBAAsBA,EACY9S,EAAlCsQ,KAAkCA,EAKOtQ,EAAzCijD,UAAyCA,EAzOzCjjD,EAAAikD,YAAiC,gBAOjCjkD,EAAA48E,wBAAmD,KAGnD58E,EAAAkT,WAAuB,GAAIzF,GAAAA,QAkB3BzN,EAAAyjD,KAAiB,iBAAiBziB,KAMlChhC,EAAA68E,UAAc,EAMd78E,EAAA88E,cAAiC,KAMjC98E,EAAA4jD,WAAe,aAGf5jD,EAAA2jD,UAAoC,aAqBpC3jD,EAAAqjD,WAA+B,EAgB/BrjD,EAAAsjD,aAAyB,SAACC,EAASC,GAAY,MAAAD,KAAOC,GAgCtDxjD,EAAA6hC,WAAiC,EAgDjC7hC,EAAA8nC,WAAiC,EAGjC9nC,EAAA2tE,gBAA0E,aAe1E3tE,EAAAi7E,aAAmC,EA8BnCj7E,EAAA4Q,OAAM,GAAIF,GAAAA,aAOV1Q,EAAAgvB,YAAsD,GAAIte,GAAAA,aAclD1Q,EAAKijD,YACPjjD,EAAKijD,UAAUsB,cAAgBvkD,KAZrC,MAtOiCqE,GAAjCqpE,EAAAxpE,GA4DE8E,OAAFC,eAAMykE,EAANvtE,UAAA,gBAAE,WACE,MAAOP,MAAKosC,SAAWpsC,KAAKssC,gBAAgBrpB,SAAWjjB,KAAKssC,gBAAgBrpB,SAAS,oCAIvF7Z,OAAFC,eAAMykE,EAANvtE,UAAA,YAAE,WAA4B,MAAOP,MAAK4uC,MAAQ,KAAO,2CAMvDxlC,OAAFC,eACMykE,EADNvtE,UAAA,gBAAE,WAC0B,MAAOP,MAAKyjD,eACtC,SAAan6C,GACXtJ,KAAKyjD,UAAYnqC,EAAAA,sBAAsBhQ,oCASzCF,OAAFC,eACMykE,EADNvtE,UAAA,mBAAE,WACmD,MAAOP,MAAK0jD,kBAC/D,SAAgBxzB,GACdlwB,KAAK0jD,aAAexzB,EAChBlwB,KAAKssC,iBAEPtsC,KAAKglD,wDAST57C,OAAFC,eACMykE,EADNvtE,UAAA,aAAE,WACmB,MAAOP,MAAK2qB,YAC/B,SAAUrhB,GACRtJ,KAAKgwB,WAAW1mB,GAChBtJ,KAAK2qB,OAASrhB,mCAQhBF,OAAFC,eAAMykE,EAANvtE,UAAA,UAAE,WACE,MAAOP,MAAKm9E,WAAan9E,KAAKm9E,WAAWr+D,GAAK9e,KAAK6jD,sCAOrDz6C,OAAFC,eACMykE,EADNvtE,UAAA,gBAAE,WAC0B,MAAOP,MAAKiiC,eACtC,SAAa34B,GACXtJ,KAAKiiC,UAAY3oB,EAAAA,sBAAsBhQ,GACvCtJ,KAAK6kD,aAAat7C,wCAQpBH,OAAFC,eACMykE,EADNvtE,UAAA,mBAAE,WAEE,MAAOP,MAAKm9E,WAAan9E,KAAKm9E,WAAW/xC,YAAcprC,KAAK4kD,kBAE9D,SAAgBt7C,GACdtJ,KAAK4kD,aAAet7C,EACpBtJ,KAAK6kD,aAAat7C,wCAKpBH,OAAFC,eAAMykE,EAANvtE,UAAA,eAAE,WACE,MAAQP,MAAKm9E,YAAcn9E,KAAKm9E,WAAW/O,SAAYpuE,KAAKo9E,mDAO9Dh0E,OAAFC,eAAMykE,EAANvtE,UAAA,aAAE,WACE,QAASP,KAAKm9E,YAAcn9E,KAAKm9E,WAAWvuC,QAAgC,IAAtB5uC,KAAKiuE,MAAMztE,wCAOnE4I,OAAFC,eAAMykE,EAANvtE,UAAA,wBAAE,WAAkC,OAAQP,KAAK4uC,OAAS5uC,KAAKouE,yCAM7DhlE,OAAFC,eACMykE,EADNvtE,UAAA,gBAAE,WAC0B,MAAOP,MAAKqjD,YAAcrjD,KAAKqjD,UAAU7sC,SAAWxW,KAAKkoC,eACnF,SAAa5+B,GAAb,GAAFlJ,GAAAJ,IACIA,MAAKkoC,UAAY5uB,EAAAA,sBAAsBhQ,GAEnCtJ,KAAKiuE,OACPjuE,KAAKiuE,MAAMlmE,QAAQ,SAAA+zE,GAAQ,MAAAA,GAAKtlE,SAAWpW,EAAK8nC,6CAYpD9+B,OAAFC,eACMykE,EADNvtE,UAAA,kBAAE,WAC4B,MAAOP,MAAKq7E,iBACxC,SAAe/xE,GAAf,GAAFlJ,GAAAJ,IACIA,MAAKq7E,YAAc/hE,EAAAA,sBAAsBhQ,GAErCtJ,KAAKiuE,OACPjuE,KAAKiuE,MAAMlmE,QAAQ,SAAA+zE,GAAQ,MAAAA,GAAKV,mBAAqBh7E,EAAKi7E,+CAK9DjyE,OAAFC,eACMykE,EADNvtE,UAAA,gBAAE,SACa+I,GACXtJ,KAAKk9E,cAAgB5zE,EACrBtJ,KAAKi9E,UAAY3zE,mCAInBF,OAAFC,eAAMykE,EAANvtE,UAAA,4BAAE,WACE,MAAOsJ,GAAAA,MAAXC,UAAA,GAAoB9J,KAAKiuE,MAAMlkE,IAAI,SAAA+xE,GAAQ,MAAAA,GAAKjrC,oDAI9CznC,OAAFC,eAAMykE,EAANvtE,UAAA,wBAAE,WACE,MAAOsJ,GAAAA,MAAXC,UAAA,GAAoB9J,KAAKiuE,MAAMlkE,IAAI,SAAA+xE,GAAQ,MAAAA,GAAKluD,6CAI9CxkB,OAAFC,eAAMykE,EAANvtE,UAAA,uBAAE,WACE,MAAOsJ,GAAAA,MAAXC,UAAA,GAAoB9J,KAAKiuE,MAAMlkE,IAAI,SAAA+xE,GAAQ,MAAAA,GAAKjuD,4CAI9CzkB,OAAFC,eAAMykE,EAANvtE,UAAA,yBAAE,WACE,MAAOsJ,GAAAA,MAAXC,UAAA,GAAoB9J,KAAKiuE,MAAMlkE,IAAI,SAAA+xE,GAAQ,MAAAA,GAAKP,8CA+B9CzN,EAAFvtE,UAAAkF,mBAAE,WAAA,GAAFrF,GAAAJ,IACIA,MAAK8T,YAAc,GAAI2B,GAAAA,gBAAyBzV,KAAKiuE,OAClDt4D,WACAsyC,0BACAvyC,0BAA0B1V,KAAK0Q,KAAO1Q,KAAK0Q,KAAKpH,MAAQ,OAI3DtJ,KAAK8T,YAAYgqC,OAAOl2C,KAAKiO,EAAAA,UAAU7V,KAAKsT,aAAanT,UAAU,WACjEC,EAAK68E,WAAa,EAClB5pD,WAAW,WAAM,MAAAjzB,GAAK68E,UAAY78E,EAAK88E,eAAiB,MAI1Dl9E,KAAKiuE,MAAM/tE,QAAQ0H,KAAKgI,EAAAA,UAAU,MAAOiG,EAAAA,UAAU7V,KAAKsT,aAAanT,UAAU,WAC7EC,EAAKi9E,cAGLj9E,EAAK4kD,uBAGL5kD,EAAKk9E,kBAGLl9E,EAAKm9E,gCAELn9E,EAAKykD,aAAat7C,UAItBukE,EAAFvtE,UAAA6N,SAAE,WACEpO,KAAKssC,gBAAkB,GAAI4Y,GAAAA,eAAwBllD,KAAKosC,aAAUzpC,IAAW,GAC7E3C,KAAK6kD,aAAat7C,QAGpBukE,EAAFvtE,UAAAw+B,UAAE,WACM/+B,KAAKqjD,WAIPrjD,KAAK0lD,oBAITooB,EAAFvtE,UAAAmF,YAAE,WACE1F,KAAKsT,WAAW/J,OAChBvJ,KAAKsT,WAAWnF,WAChBnO,KAAK6kD,aAAa12C,WAElBnO,KAAKw9E,sBAKP1P,EAAFvtE,UAAAkuE,cAAE,SAAcgP,GACZz9E,KAAKm9E,WAAaM,GAOpB3P,EAAFvtE,UAAA+tC,kBAAE,SAAkBC,GAAiBvuC,KAAKwuC,iBAAmBD,EAAIE,KAAK,MAGpEq/B,EAAFvtE,UAAAyvB,WAAE,SAAW1mB,GACLtJ,KAAKiuE,OACPjuE,KAAK+lD,qBAAqBz8C,GAAO,IAKrCwkE,EAAFvtE,UAAA0vB,iBAAE,SAAiBC,GACflwB,KAAK+jD,UAAY7zB,GAInB49C,EAAFvtE,UAAA4vB,kBAAE,SAAkBD,GAChBlwB,KAAKgkD,WAAa9zB,GAIpB49C,EAAFvtE,UAAA6vB,iBAAE,SAAiBC,GACfrwB,KAAKwW,SAAW6Z,EAChBrwB,KAAK6kD,aAAat7C,QAOpBukE,EAAFvtE,UAAAmuC,iBAAE,SAAiBh6B,GACV1U,KAAK09E,oBAAoBhpE,IAC5B1U,KAAKuS,SAQTu7D,EAAFvtE,UAAAgS,MAAE,WACMvS,KAAKwW,UAMLxW,KAAKm9E,YAAcn9E,KAAKm9E,WAAW/O,UAE5BpuE,KAAKiuE,MAAMztE,OAAS,GAC7BR,KAAK8T,YAAYe,qBACjB7U,KAAK6kD,aAAat7C,SAElBvJ,KAAK29E,cACL39E,KAAK6kD,aAAat7C,UAKtBukE,EAAFvtE,UAAAo9E,YAAE,WACM39E,KAAKm9E,YACPn9E,KAAKm9E,WAAW5qE,SAOpBu7D,EAAFvtE,UAAA6jE,SAAE,SAAS1vD,GACP,GAAMulC,GAASvlC,EAA2B,MAGtCA,GAAMC,UAAYynE,EAAAA,WAAap8E,KAAK49E,cAAc3jC,IACpDj6C,KAAK8T,YAAYkB,oBACjBN,EAAMI,kBACGmlC,GAAUA,EAAOj5C,UAAUC,SAAS,cACzCyT,EAAMC,UAAYC,EAAAA,MACpB5U,KAAK8T,YAAYe,qBACjBH,EAAMI,kBACGJ,EAAMC,UAAYI,EAAAA,KAC3B/U,KAAK8T,YAAYkB,oBACjBN,EAAMI,kBAEN9U,KAAK8T,YAAYsB,UAAUV,GAG7B1U,KAAK6kD,aAAat7C,SAQZukE,EAAZvtE,UAAA+8E,gBAAE,WAEEt9E,KAAKi9E,UAAYj9E,KAAKk9E,gBAAwC,IAAtBl9E,KAAKiuE,MAAMztE,QAAgB,EAAI,IAO/DstE,EAAZvtE,UAAAg9E,8BAAE,WACE,GAAoC,MAAhCv9E,KAAKg9E,yBAAmCh9E,KAAKiuE,MAAMztE,OAAQ,CAC7D,GAAMq9E,GAAetyE,KAAKE,IAAIzL,KAAKg9E,wBAAyBh9E,KAAKiuE,MAAMztE,OAAS,EAChFR,MAAK8T,YAAYuC,cAAcwnE,GAGjC79E,KAAKg9E,wBAA0B,MASzBlP,EAAVvtE,UAAA6V,cAAA,SAAwBnO,GACpB,MAAOA,IAAS,GAAKA,EAAQjI,KAAKiuE,MAAMztE,QAGlCstE,EAAVvtE,UAAAq9E,cAAA,SAAwBxxE,GACpB,GAAIA,GAA8C,UAAnCA,EAAQmmC,SAAS5oB,cAA2B,CAEzD,OADS,EACKrgB,MAGhB,OAAO,GAGTwkE,EAAFvtE,UAAAwlD,qBAAE,SAAqBz8C,EAAY++C,GAAjC,GAAFjoD,GAAAJ,IAII,QAJJ,KAAAqoD,IAAmCA,GAAnC,GACIroD,KAAK89E,kBACL99E,KAAKiuE,MAAMlmE,QAAQ,SAAA+zE,GAAQ,MAAAA,GAAKt2B,aAE5B/9C,MAAMC,QAAQ4B,GAChBA,EAAMvB,QAAQ,SAAA0/C,GAAgB,MAAArnD,GAAKsnD,aAAaD,EAAcY,KAC9DroD,KAAK2nD,kBACA,CACL,GAAMo2B,GAAoB/9E,KAAK0nD,aAAap+C,EAAO++C,EAI/C01B,IACE11B,GACFroD,KAAK8T,YAAYuC,cAAc0nE,KAU/BjQ,EAAVvtE,UAAAmnD,aAAA,SAAuBp+C,EAAY++C,kBAAnC,KAAAA,IAAmCA,GAAnC,EAEI,IAAM01B,GAAoB/9E,KAAKiuE,MAAMnyD,KAAK,SAAAggE,GACxC,MAAqB,OAAdA,EAAKxyE,OAAiBlJ,EAAKsjD,aAAao4B,EAAKxyE,MAAQA,IAQ9D,OALIy0E,KACF11B,EAAc01B,EAAkB/B,uBAAyB+B,EAAkBz4B,SAC3EtlD,KAAKssC,gBAAgBgZ,OAAOy4B,IAGvBA,GAGDjQ,EAAVvtE,UAAAykD,0CAGI75C,SAAQC,UAAUC,KAAK,YACjBjL,EAAKijD,WAAajjD,EAAKuqB,UACzBvqB,EAAK2lD,qBAAqB3lD,EAAKijD,UAAYjjD,EAAKijD,UAAU/5C,MAAQlJ,EAAKuqB,QAAQ,GAC/EvqB,EAAKykD,aAAat7C,WAShBukE,EAAVvtE,UAAAu9E,gBAAA,SAA0BE,GACtBh+E,KAAKssC,gBAAgB+G,QACrBrzC,KAAKiuE,MAAMlmE,QAAQ,SAAA+zE,GACbA,IAASkC,GACXlC,EAAKt2B,aAGTxlD,KAAK6kD,aAAat7C,QAOZukE,EAAVvtE,UAAAonD,iCACQ3nD,MAAKyjD,YACPzjD,KAAKssC,gBAAgB+G,QAErBrzC,KAAKiuE,MAAMlmE,QAAQ,SAAA+zE,GACbA,EAAK74D,UACP7iB,EAAKksC,gBAAgBgZ,OAAOw2B,KAGhC97E,KAAK6kD,aAAat7C,SAKdukE,EAAVvtE,UAAAkoD,kBAAA,SAA4BE,GACxB,GAAIC,GAAmB,IAGrBA,GADEnhD,MAAMC,QAAQ1H,KAAKijB,UACPjjB,KAAKijB,SAASlZ,IAAI,SAAA+xE,GAAQ,MAAAA,GAAKxyE,QAE/BtJ,KAAKijB,SAAWjjB,KAAKijB,SAAS3Z,MAAQq/C,EAEtD3oD,KAAK2qB,OAASi+B,EACd5oD,KAAKgR,OAAOS,KAAK,GAAIsrE,IAAkB/8E,KAAM4oD,IAC7C5oD,KAAKovB,YAAY3d,KAAKm3C,GACtB5oD,KAAK+jD,UAAU6E,GACf5oD,KAAKkT,mBAAmB/B,gBAI1B28D,EAAFvtE,UAAAouE,MAAE,WAAA,GAAFvuE,GAAAJ,IACSA,MAAKo9E,mBACRp9E,KAAK8T,YAAYuC,eAAe,GAG7BrW,KAAKwW,WACJxW,KAAKm9E,WAKP9pD,WAAW,WACJjzB,EAAKguE,SACRhuE,EAAK69E,mBAKTj+E,KAAKi+E,mBAMXnQ,EAAFvtE,UAAA09E,eAAE,WACEj+E,KAAKgkD,aACLhkD,KAAKkT,mBAAmB/B,eACxBnR,KAAK6kD,aAAat7C,QAGZukE,EAAVvtE,UAAA88E,uBACIr9E,KAAKw9E,qBACLx9E,KAAKk+E,sBACLl+E,KAAKm+E,0BACLn+E,KAAKo+E,yBAGCtQ,EAAVvtE,UAAAi9E,8BACQx9E,KAAKq+E,yBACPr+E,KAAKq+E,uBAAuBhuE,cAC5BrQ,KAAKq+E,uBAAyB,MAG5Br+E,KAAKs+E,wBACPt+E,KAAKs+E,sBAAsBjuE,cAC3BrQ,KAAKs+E,sBAAwB,MAG3Bt+E,KAAKu+E,6BACPv+E,KAAKu+E,2BAA2BluE,cAChCrQ,KAAKu+E,2BAA6B,MAGhCv+E,KAAKw+E,0BACPx+E,KAAKw+E,wBAAwBnuE,cAC7BrQ,KAAKw+E,wBAA0B,OAK3B1Q,EAAVvtE,UAAA49E,6CACIn+E,MAAKu+E,2BAA6Bv+E,KAAKy+E,qBAAqBt+E,UAAU,SAAAuU,GACpEA,EAAMkb,OAAO3M,SACT7iB,EAAKksC,gBAAgBgZ,OAAO5wC,EAAMkb,QAClCxvB,EAAKksC,gBAAgBkZ,SAAS9wC,EAAMkb,QAGnCxvB,EAAKgsC,UACRhsC,EAAK6tE,MAAMlmE,QAAQ,SAAA+zE,IACZ17E,EAAKksC,gBAAgBkc,WAAWszB,IAASA,EAAK74D,UACjD64D,EAAKt2B,aAKP9wC,EAAM2zC,aACRjoD,EAAKqoD,uBAMHqlB,EAAVvtE,UAAA29E,yCACIl+E,MAAKq+E,uBAAyBr+E,KAAK0+E,iBAAiBv+E,UAAU,SAAAuU,GAC5D,GAAIiqE,GAAoBv+E,EAAK6tE,MAAM13D,UAAUsT,QAAQnV,EAAMonE,KAEvD17E,GAAKgW,cAAcuoE,IACrBv+E,EAAK0T,YAAYC,sBAAsB4qE,GAEzCv+E,EAAKykD,aAAat7C,SAGpBvJ,KAAKs+E,sBAAwBt+E,KAAK4+E,gBAAgBz+E,UAAU,WAC1DC,EAAKuuE,QACLvuE,EAAKykD,aAAat7C,UAIdukE,EAAVvtE,UAAA69E,2CACIp+E,MAAKw+E,wBAA0Bx+E,KAAK6+E,kBAAkB1+E,UAAU,SAAAuU,GAC9D,GAAMonE,GAAOpnE,EAAMonE,KACb6C,EAAYv+E,EAAK6tE,MAAM13D,UAAUsT,QAAQnV,EAAMonE,KAKjD17E,GAAKgW,cAAcuoE,IAAc7C,EAAKX,YACxC/6E,EAAK48E,wBAA0B2B,MAM7B7Q,EAAVvtE,UAAAm9E,oBAAA,SAA8BhpE,GAG1B,IAFA,GAAIoqE,GAAiBpqE,EAAkC,OAEhDoqE,GAAkBA,IAAmB9+E,KAAKW,YAAYC,eAAe,CAC1E,GAAIk+E,EAAe99E,UAAUC,SAAS,YACpC,OAAO,CAGT69E,GAAiBA,EAAe9K,cAGlC,OAAO,GAIDlG,EAAVvtE,UAAA68E,2BACI,MAAOp9E,MAAKiuE,MAAM5sE,KAAK,SAAAy6E,GAAQ,MAAAA,GAAKX,4BAprBxC15E,KAACC,EAAAA,UAADC,OAAAC,SAAA,gBACEE,SAAU,qEACVD,SAAU,cACVI,MACF4sC,kBAAyB,8BACnBO,0BAAN,2BACIJ,uBAAJ,sBACIn8B,uBAAJ,sBACIo8B,sBAAJ,aACIE,8BAAJ,WACIvqC,cAAJ,OACIm6E,iCAAJ,WACIC,gCAAJ,aACIC,iCAAkC,WAClC/tD,0BAAJ,kBACIhvB,MAAJ,gBACIquB,UAAJ,UACIC,SAAJ,UACIC,YAAJ,mBACImT,OAAQ,QAEZ/+B,YAAAC,QAAA8qC,GAAA7qC,YAAA+oE,IACA/rE,QAAA;srFACES,cAAFC,EAAAA,kBAAAC,KACEL,gBAAFC,EAAAA,wBAAAC,8FA9EAd,KAAE0W,EAAAA,eAAFvV,aAAAnB,KAAA2W,EAAAA,aAJA3W,KAAEquC,EAAAA,OAAFltC,aAAAnB,KAAA2W,EAAAA,aAPA3W,KAAQsuC,EAAAA,mBAARntC,aAAAnB,KAAA2W,EAAAA,aAsBA3W,KAA6D2iB,KAA7D3iB,KAA8BwuC,EAAAA,UAA9BrtC,aAAAnB,KAAA2W,EAAAA,WAAA3W,KAAAyuC,EAAAA,UAAA49B,EAAkD/qE,6EA2IlD2tC,cAAAjvC,KAAA2D,EAAAA,QAGAkE,QAAA7H,KAAA2D,EAAAA,QAYA4+B,WAAAviC,KAAA2D,EAAAA,QAeAgmC,cAAG3pC,KAAH2D,EAAAA,QAoBAoR,WAAA/U,KAAG2D,EAAAA,QAYH2oE,kBAAAtsE,KAAA2D,EAAAA,MAAAzD,MAAA,sBAiCAqsE,aAAAvsE,KAAA2D,EAAAA,QAYAf,WAAA5C,KAAA2D,EAAAA,QAMA4L,SAAAvP,KAAAuQ,EAAAA,SAWAod,cAAA3tB,KAAAuQ,EAAAA,SA2BAi8D,QAAAxsE,KAAAoE,EAAAA,gBAAAlE,MAAAusE,OAWAJ,OCpTI1sC,GAAe,gBAwEjB,QAAF+sC,GACcxtE,EACiCmxC,GADjC9xC,KAAdW,YAAcA,EACiCX,KAA/C8xC,gBAA+CA,EApD/C9xC,KAAAouE,SAAqB,EAkBrBpuE,KAAAquE,YAAwB,EAQxBruE,KAAAsuE,kBAA8CtuE,KAAK8xC,gBAAgBw8B,kBAInEtuE,KAAAuuE,QAA6C,GAAIz9D,GAAAA,aAGjD9Q,KAAAorC,YAAiC,GAGjCprC,KAAA8e,GAAwB,uBAAuBsiB,KAM/CphC,KAAAkoC,WAA+B,EAW3BloC,KAAKyiC,cAAgBziC,KAAKW,YAA6C,cAnG3E,MAkDEyI,QAAFC,eACM8kE,EADN5tE,UAAA,gBAAE,SACa+I,GACPA,IACFtJ,KAAKwuE,UAAYllE,EACjBtJ,KAAKwuE,UAAUC,cAAczuE,wCAOjCoJ,OAAFC,eACM8kE,EADN5tE,UAAA,iBAAE,WAC2B,MAAOP,MAAKquE,gBACvC,SAAc/kE,GAAkBtJ,KAAKquE,WAAa/0D,EAAAA,sBAAsBhQ,oCAsBxEF,OAAFC,eACM8kE,EADN5tE,UAAA,gBAAE,WAC0B,MAAOP,MAAKkoC,WAAcloC,KAAKwuE,WAAaxuE,KAAKwuE,UAAUh4D,cACrF,SAAalN,GAAkBtJ,KAAKkoC,UAAY5uB,EAAAA,sBAAsBhQ,oCAItEF,OAAFC,eAAM8kE,EAAN5tE,UAAA,aAAE,WAAuB,OAAQP,KAAKyiC,cAAcn5B,uCAWlD6kE,EAAF5tE,UAAA0N,YAAE,WACEjO,KAAKwuE,UAAU3pB,aAAat7C,QAI9B4kE,EAAF5tE,UAAA6jE,SAAE,SAAS1vD,GACP1U,KAAK0uE,aAAah6D,IAIpBy5D,EAAF5tE,UAAAouE,MAAE,WACM3uE,KAAK4uE,WACP5uE,KAAK0uE,eAEP1uE,KAAKouE,SAAU,EAEVpuE,KAAKwuE,UAAUJ,SAClBpuE,KAAKwuE,UAAUG,QAEjB3uE,KAAKwuE,UAAU3pB,aAAat7C,QAG9B4kE,EAAF5tE,UAAAsuE,OAAE,WACE7uE,KAAKouE,SAAU,EACfpuE,KAAKwuE,UAAU3pB,aAAat7C,QAI9B4kE,EAAF5tE,UAAAmuE,aAAE,SAAah6D,IACN1U,KAAKyiC,cAAcn5B,OAAWoL,GACjC1U,KAAKwuE,UAAUpK,SAAS1vD,GAErBA,IAAS1U,KAAK8uE,gBAAgBp6D,EAAMC,WACvC3U,KAAKuuE,QAAQ98D,MAAO4d,MAAOrvB,KAAKyiC,cAAen5B,MAAOtJ,KAAKyiC,cAAcn5B,QAErEoL,GACFA,EAAMI,mBAKZq5D,EAAF5tE,UAAAy+D,SAAE,WAEEh/D,KAAKwuE,UAAU3pB,aAAat7C,QAI9B4kE,EAAF5tE,UAAAgS,MAAE,WACEvS,KAAKyiC,cAAclwB,SAIb47D,EAAV5tE,UAAAuuE,gBAAA,SAA0Bn6D,GACtB,GAAMo6D,GAAa/uE,KAAKsuE,iBACxB,OAAO7mE,OAAMC,QAAQqnE,GAAcA,EAAWllD,QAAQlV,IAAY,EAAIo6D,EAAWz0C,IAAI3lB,mBA9HzFlT,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,yBACVC,SAAU,gCACVI,MACEC,MAAS,mCACTuuB,YAAa,mBACbD,SAAU,UACVD,UAAW,WACXmvC,UAAW,aACX97B,OAAQ,KACR0Y,kBAAmB,mBACnB0yB,qBAAsB,+DAhC1BvtE,KAAmBuD,EAAAA,aAyFnBvD,SAAAkB,GAAAC,aAAAnB,KAAKoB,EAAAA,OAALlB,MAAYstE,2BAhDZC,WAAAztE,KAAG2D,EAAAA,MAAHzD,MAAS,qBAWTitE,YAAAntE,KAAG2D,EAAAA,MAAHzD,MAAS,2BAUT2sE,oBAAA7sE,KAAG2D,EAAAA,MAAHzD,MAAS,mCAIT4sE,UAAA9sE,KAAGuQ,EAAAA,OAAHrQ,MAAU,0BAIVypC,cAAA3pC,KAAG2D,EAAAA,QAGH0Z,KAAArd,KAAG2D,EAAAA,QAGHoR,WAAA/U,KAAG2D,EAAAA,SArFH+oE,KCgBMgB,IACJrB,GACAI,GACAC,GACAiB,GACAC,GACAC,IAUFC,IACQjB,mBAAoBr5D,EAAAA,oCAjC5B,sBAyBAxT,KAACuB,EAAAA,SAADrB,OACEwB,QAASgsE,GACT9rE,aAAc8rE,GACdtqE,WACEuf,IAEEtf,QAASmqE,GACTO,SAAQ,SAhCdC,KCiCAC,GAAA,wBAcA1vE,KAAAuE,KAAsB,SAGtBvE,KAAAw1B,WAAmC,GAGnCx1B,KAAAu9C,aAA0B,EAG1Bv9C,KAAAm9C,cAA2B,GAG3Bn9C,KAAAq/B,cAA2B,EAG3Br/B,KAAA+M,MAAmB,GAGnB/M,KAAA2a,OAAoB,GASpB3a,KAAA2vE,SAA+B,OAS/B3vE,KAAAsF,KAAoB,KAMpBtF,KAAA4vE,gBAAoC,KAGpC5vE,KAAAyO,UAA8B,KAG9BzO,KAAA6vE,WAAwB,EAMxB7vE,KAAA8vE,cAA2B,EAM3B9vE,KAAA+vE,mBAAgC,EA3GhC,MAAAL,MCgBMM,IAIJlhE,EAAAA,MAAM,aAAcrC,EAAAA,OAAO+nB,QAAS,EAAGzlB,UAAW,gBAClDD,EAAAA,MAAM,QAASrC,EAAAA,OAAOsC,UAAW,UACjCE,EAAAA,WAAW,aAAcC,EAAAA,QAAQ,mCAC7BzC,EAAAA,OAAOsC,UAAW,OAAQylB,QAAS,MACvCvlB,EAAAA,WAAW,uBACPC,EAAAA,QAAQ,sCAAuCzC,EAAAA,OAAO+nB,QAAS,OAIxDy7C,IAKXC,gBAAiBrhE,EAAAA,QAAQ,kBAAmBmhE,IAG5CG,YAAathE,EAAAA,QAAQ,cAAemhE,oBCyDpC,QAAFI,GACYzvE,EACA0pC,EACAn3B,EAC8B/R,EAE/Bg2B,GANT,GAAF/2B,GAQIkE,EARJ5D,KAAAV,OAAAA,WACYI,GAAZO,YAAYA,EACAP,EAAZiqC,kBAAYA,EACAjqC,EAAZ8S,mBAAYA,EAC8B9S,EAA1Ce,UAA0CA,EAE/Bf,EAAX+2B,QAAWA,EApBX/2B,EAAAiwE,qCAAqE,KAGrEjwE,EAAAkwE,OAAsC,QAGtClwE,EAAAmwE,uBAA2B,GAAIz/D,GAAAA,aAG/B1Q,EAAAowE,gBAAmC,OAfnC,MAFwC/rE,GAAxC2rE,EAAA9rE,GAqCE8rE,EAAF7vE,UAAAq0B,sBAAE,SAAyBC,GAMvB,MALI70B,MAAKg1B,cAAchlB,eACrBygE,IAGFzwE,KAAK0wE,gCACE1wE,KAAKg1B,cAAcJ,sBAAsBC,IAOlDu7C,EAAF7vE,UAAA00B,qBAAE,SAAwBJ,GAMtB,MALI70B,MAAKg1B,cAAchlB,eACrBygE,IAGFzwE,KAAK0wE,gCACE1wE,KAAKg1B,cAAcC,qBAAqBJ,IAIzCu7C,EAAV7vE,UAAAq7B,sBACS57B,KAAK27B,aACR37B,KAAK27B,WAAa37B,KAAKqqC,kBAAkB7Q,OAAOx5B,KAAKW,YAAYC,gBAM/DZ,KAAKm3B,QAAQ04C,WACf7vE,KAAK27B,WAAWS,gCAKZg0C,EAAV7vE,UAAAs7B,yBACI,GAAM80C,GAAU3wE,KAAKqwE,oCAGjBrwE,MAAKm3B,QAAQ24C,cAAgBa,GAAoC,kBAAlBA,GAAQp+D,OACzDo+D,EAAQp+D,QAGNvS,KAAK27B,YACP37B,KAAK27B,WAAWiB,WAKZwzC,EAAV7vE,UAAAmwE,mDACQ1wE,MAAKmB,YACPnB,KAAKqwE,qCAAuCrwE,KAAKmB,UAAsC,cAGnFnB,KAAKW,YAAYC,cAAc2R,OAIjCpH,QAAQC,UAAUC,KAAK,WAAM,MAAAjL,GAAKO,YAAYC,cAAc2R,YAMlE69D,EAAF7vE,UAAA4+C,iBAAE,SAAiBzqC,GACO,UAAlBA,EAAMlD,QACRxR,KAAK47B,aACsB,SAAlBlnB,EAAMlD,SACfxR,KAAK67B,gBAGP77B,KAAKuwE,uBAAuB9+D,KAAKiD,IAInC07D,EAAF7vE,UAAAqwE,kBAAE,SAAkBl8D,GAChB1U,KAAKuwE,uBAAuB9+D,KAAKiD,IAInC07D,EAAF7vE,UAAAswE,oBAAE,WACE7wE,KAAKswE,OAAS,OAIdtwE,KAAKkT,mBAAmB/B,+BApJ5B1P,KAACC,EAAAA,UAADC,OAAAC,SAAA,uBACEE,SAAU,8CACVC,QAAF,4oCACES,cAAFC,EAAAA,kBAAAC,uFAKET,MACFC,MAAe,uBACTopD,SAAN,KACIwlB,aAAJ,OACIjnC,YAAJ,MACIjlC,cAAJ,eACImqC,yBAAJ,6CACID,oBAAJ,oBACIM,0BAAJ,kCACI2hC,qBAAJ,SACIC,2BAAJ,4BACIC,0BAAJ,kHAxDAxvE,KAAEsQ,EAAAA,oBAmBFtQ,SAAmBkB,GAAnBC,aAAAnB,KAAA2W,EAAAA,WAAA3W,KAAAoB,EAAAA,OAAAlB,MAAAmB,EAAAA,cAdArB,KAAEiuE,MAeFU,EAAArtE,6EA2CAqtE,uBCtDIjO,GAAW,EAKf+O,GAAA,WAsBE,QAAFA,GACY9+C,EACD++C,EACP/3B,EACSt6B,OAAb,KAAAA,IAAAA,EAAA,cAAwCqjD,KAJtC,IAAF/hE,GAAAJ,IACYA,MAAZoyB,YAAYA,EACDpyB,KAAXmxE,mBAAWA,EAEEnxE,KAAb8e,GAAaA,EArBb9e,KAAAq/B,aAAsCr/B,KAAKmxE,mBAAmBh6C,QAAQkI,aAGtEr/B,KAAAsyB,aAAkC,GAAIzkB,GAAAA,QAGtC7N,KAAAoxE,aAAkC,GAAIvjE,GAAAA,QAGtC7N,KAAAqxE,cAAmC,GAAIxjE,GAAAA,QAMvC7N,KAAAsxE,iBAA+C9hE,EAAAA,aAAaC,MASxD0hE,EAAmBlsB,IAAMnmC,EAGzBqyD,EAAmBZ,uBAAuB3oE,KACxC9G,EAAAA,OAAO,SAAA4T,GAAS,MAAoB,SAApBA,EAAMyuD,WAA0C,UAAlBzuD,EAAMlD,UACpD3J,EAAAA,KAAK,IAEN1H,UAAU,WACTC,EAAKkyB,aAAa/oB,OAClBnJ,EAAKkyB,aAAankB,aAIpBgjE,EAAmBZ,uBAAuB3oE,KACxC9G,EAAAA,OAAO,SAAA4T,GAAS,MAAoB,SAApBA,EAAMyuD,WAA0C,SAAlBzuD,EAAMlD,UACpD3J,EAAAA,KAAK,IACL1H,UAAU,WAAM,MAAAC,GAAKgyB,YAAYmB,YAEnCnB,EAAYqG,cAAct4B,UAAU,WAClCC,EAAKixE,cAAc9nE,KAAKnJ,EAAKmxE,SAC7BnxE,EAAKixE,cAAcljE,WACnB/N,EAAKkxE,iBAAiBjhE,cACtBjQ,EAAKgxE,aAAa7nE,KAAKnJ,EAAKmxE,SAC5BnxE,EAAKgxE,aAAajjE,WAClB/N,EAAKk7D,kBAAiB,KACtBl7D,EAAKgyB,YAAYmB,YAGnBnB,EAAYspC,gBACT9zD,KAAK9G,EAAAA,OAAO,SAAA4T,GAAS,MAAAA,GAAMC,UAAYi/B,EAAAA,SAAWxzC,EAAKi/B,gBACvDl/B,UAAU,WAAM,MAAAC,GAAK07B,UAEpBsd,IAIFp5C,KAAKsxE,iBAAmBl4B,EAASj5C,UAAU,WACrCC,EAAK+wE,mBAAmBh6C,QAAQ44C,mBAClC3vE,EAAK07B,WA5Ff,MAsGEo1C,GAAF3wE,UAAAu7B,MAAE,SAAM01C,GAAN,GAAFpxE,GAAAJ,IACIA,MAAKuxE,QAAUC,EAGfxxE,KAAKmxE,mBAAmBZ,uBAAuB3oE,KAC7C9G,EAAAA,OAAO,SAAA4T,GAAS,MAAoB,UAApBA,EAAMyuD,YACtBt7D,EAAAA,KAAK,IAEN1H,UAAU,WACTC,EAAKixE,cAAc9nE,KAAKioE,GACxBpxE,EAAKixE,cAAcljE,WACnB/N,EAAKgyB,YAAYq/C,mBAGnBzxE,KAAKmxE,mBAAmBN,uBAM1BK,EAAF3wE,UAAAozB,YAAE,WACE,MAAO3zB,MAAKsyB,aAAaoB,gBAM3Bw9C,EAAF3wE,UAAA86D,YAAE,WACE,MAAOr7D,MAAKoxE,aAAa19C,gBAM3Bw9C,EAAF3wE,UAAAmxE,aAAE,WACE,MAAO1xE,MAAKqxE,cAAc39C,gBAM5Bw9C,EAAF3wE,UAAAw9B,cAAE,WACE,MAAO/9B,MAAKoyB,YAAY2L,iBAM1BmzC,EAAF3wE,UAAAm7D,cAAE,WACE,MAAO17D,MAAKoyB,YAAYspC,iBAO1BwV,EAAF3wE,UAAAqsC,eAAE,SAAe9+B,GACb,GAAIimC,GAAW/zC,KAAK2xE,sBAgBpB,OAdI7jE,KAAaA,EAAShB,MAAQgB,EAASurB,OACzCvrB,EAAShB,KAAOinC,EAASjnC,KAAKgB,EAAShB,MAAQinC,EAAS1a,MAAMvrB,EAASurB,OAEvE0a,EAASza,qBAGPxrB,IAAaA,EAAS8gB,KAAO9gB,EAASyrB,QACxCzrB,EAAS8gB,IAAMmlB,EAASnlB,IAAI9gB,EAAS8gB,KAAOmlB,EAASxa,OAAOzrB,EAASyrB,QAErEwa,EAAS69B,mBAGX5xE,KAAKoyB,YAAYwa,iBAEV5sC,MAQTkxE,EAAF3wE,UAAAsxE,WAAE,SAAW9kE,EAAoB4N,GAG7B,WAHJ,KAAA5N,IAAaA,EAAb,QAAA,KAAA4N,IAAiCA,EAAjC,IACI3a,KAAK2xE,uBAAuB5kE,MAAMA,GAAO4N,OAAOA,GAChD3a,KAAKoyB,YAAYwa,iBACV5sC,MAQTkxE,EAAF3wE,UAAAuxE,UAAE,WACE,MAAO9xE,MAAK2zB,eAQdu9C,EAAF3wE,UAAAwxE,YAAE,WACE,MAAO/xE,MAAK0xE,gBAINR,EAAV3wE,UAAAoxE,gCACI,MAAO3xE,MAAKoyB,YAAYuiB,YAAsD,kBAjNlFu8B,KCoCac,GAAkB,GAAIpmE,GAAAA,eAAoB,iBAG1CqmE,GACT,GAAIrmE,GAAAA,eAAgC,8BAG3BsmE,GACT,GAAItmE,GAAAA,eAAqC,8BAchCumE,IACXrtE,QAASotE,GACThzD,MAAOua,EAAAA,SACPra,WAAYgzD,iBA8CZ,QAAFxW,GACczlC,EACAE,EACYg8C,EACoCvgC,EACZD,EACZygC,EACxBC,GAPZ,GAAFnyE,GAAAJ,IACcA,MAAdm2B,SAAcA,EACAn2B,KAAdq2B,UAAcA,EACYr2B,KAA1BqyE,UAA0BA,EACoCryE,KAA9D8xC,gBAA8DA,EACZ9xC,KAAlD6xC,gBAAkDA,EACZ7xC,KAAtCsyE,cAAsCA,EACxBtyE,KAAduyE,kBAAcA,EA5CdvyE,KAAAwyE,2BACAxyE,KAAAyyE,2BAAgD,GAAI5kE,GAAAA,QACpD7N,KAAA0yE,wBAA6C,GAAI7kE,GAAAA,QACjD7N,KAAA2yE,oBAAgC,GAAI14C,KA8BpCj6B,KAAA4yE,eAA8CruB,EAAAA,MAAY,WAAM,MAAAnkD,GAAKyyE,YAAYryE,OAC3EJ,EAAK0yE,gBACL1yE,EAAK0yE,gBAAgBlrE,KAAKgI,EAAAA,cAAUjN,OAzG1C,MA4EEyG,QAAFC,eAAMuyD,EAANr7D,UAAA,mBAAE,WACE,MAAOP,MAAKsyE,cAAgBtyE,KAAKsyE,cAAcO,YAAc7yE,KAAKwyE,yDAIpEppE,OAAFC,eAAMuyD,EAANr7D,UAAA,mBAAE,WACE,MAAOP,MAAKsyE,cAAgBtyE,KAAKsyE,cAAc3+C,YAAc3zB,KAAK0yE,yDAQpEtpE,OAAFC,eAAMuyD,EAANr7D,UAAA,iBAAE,WACE,MAAOP,MAAK2zB,6CAGdvqB,OAAFC,eAAMuyD,EAANr7D,UAAA,uBAAE,WACE,GAAMm2B,GAAS12B,KAAKsyE,aACpB,OAAO57C,GAASA,EAAOo8C,gBAAkB9yE,KAAKyyE,4DA2BhD7W,EAAFr7D,UAAA02B,KAAE,SAA0B87C,EAClBj8C,GADR,GAAF12B,GAAAJ,IAKI,IAFA82B,EAASk8C,EAAqBl8C,EAAQ92B,KAAK8xC,iBAAmB,GAAI49B,KAE9D54C,EAAOhY,IAAM9e,KAAKizE,cAAcn8C,EAAOhY,IACzC,KAAM4W,OAAM,mBAAmBoB,EAAOhY,GAA5C,kDAGI,IAAMwY,GAAat3B,KAAKi4B,eAAenB,GACjCo5C,EAAkBlwE,KAAKkzE,uBAAuB57C,EAAYR,GAC1Dq8C,EAAYnzE,KAAKozE,qBAA2BL,EACA7C,EACA54C,EACAR,EAWlD,OARK92B,MAAK6yE,YAAYryE,QACpBR,KAAKqzE,+CAGPrzE,KAAK6yE,YAAYtrE,KAAK4rE,GACtBA,EAAU9X,cAAcl7D,UAAU,WAAM,MAAAC,GAAKkzE,kBAAkBH,KAC/DnzE,KAAK2zB,YAAYpqB,KAAK4pE,GAEfA,GAMTvX,EAAFr7D,UAAAgzE,SAAE,WACEvzE,KAAKwzE,cAAcxzE,KAAK6yE,cAO1BjX,EAAFr7D,UAAA0yE,cAAE,SAAcn0D,GACZ,MAAO9e,MAAK6yE,YAAY/2D,KAAK,SAAA23D,GAAU,MAAAA,GAAO30D,KAAOA,KAGvD88C,EAAFr7D,UAAAmF,YAAE,WAGE1F,KAAKwzE,cAAcxzE,KAAKwyE,0BAQlB5W,EAAVr7D,UAAA03B,eAAA,SAAyBnB,GACrB,GAAMgC,GAAgB94B,KAAKuhD,kBAAkBzqB,EAC7C,OAAO92B,MAAKm2B,SAASqD,OAAOV,IAQtB8iC,EAAVr7D,UAAAghD,kBAAA,SAA4BmyB,GACxB,GAAM5kE,GAAQ,GAAIiqB,GAAAA,eAChBC,iBAAkBh5B,KAAKm2B,SAASroB,WAAWmrB,SAC3Cyb,eAAgBg/B,EAAah/B,gBAAkB10C,KAAK6xC,kBACpDrc,WAAYk+C,EAAal+C,WACzB+nB,YAAam2B,EAAan2B,YAC1Bx8B,UAAW2yD,EAAa3yD,UACxB8hC,SAAU6wB,EAAa7wB,SACvB7zC,UAAW0kE,EAAa1kE,UACxB2gE,SAAU+D,EAAa/D,SACvBgE,UAAWD,EAAaC,WAO1B,OAJID,GAAav2B,gBACfruC,EAAMquC,cAAgBu2B,EAAav2B,eAG9BruC,GASD8sD,EAAVr7D,UAAA2yE,uBAAA,SAAiCr+B,EAAqB/d,GAClD,GAAMS,GAAeT,GAAUA,EAAOznB,kBAAoBynB,EAAOznB,iBAAiBmoB,SAC5EA,EAAW,GAAIC,GAAAA,eAAeF,GAAgBv3B,KAAKq2B,UAAW,GAAIqB,WACrEg4C,GAAiB54C,MAEda,EACF,GAAIC,GAAAA,gBAAgBw4C,GAAoBt5C,EAAOznB,iBAAkBmoB,EAGrE,OAFqBqd,GAAQ5kC,OAA2B0nB,GAEpCG,UAYd8jC,EAAVr7D,UAAA6yE,qBACA,SAAML,EACA7C,EACA54C,EACAR,GAIF,GAAMq8C,GACF,GAAIjC,IAAmB55C,EAAY44C,EAAiBlwE,KAAKqyE,UAAWv7C,EAAOhY,GAW/E,IARIgY,EAAOymB,aACTjmB,EAAWyG,gBAAgB59B,UAAU,WAC9BgzE,EAAU9zC,cACb8zC,EAAUr3C,UAKZi3C,YAAkC7lE,GAAAA,YACpCgjE,EAAgBj7C,qBACd,GAAI5mB,GAAAA,eAAkB0kE,EAAsB,MACnC56C,UAAWrB,EAAOxxB,KAAM6tE,UAFzCA,SAGW,CACL,GAAM37C,GAAWx3B,KAAKo4B,gBAAmBtB,EAAQq8C,EAAWjD,GACtD73C,EAAa63C,EAAgBt7C,sBAC/B,GAAIgD,GAAAA,gBAAgBm7C,MAAwBpwE,GAAW60B,GAC3D27C,GAAU7X,kBAAoBjjC,EAAWP,SAO3C,MAJAq7C,GACGtB,WAAW/6C,EAAO/pB,MAAO+pB,EAAOnc,QAChCiyB,eAAe9V,EAAOhpB,UAElBqlE,GAWDvX,EAAVr7D,UAAA63B,gBACA,SAAMtB,EACAq8C,EACAjD,GAEF,GAAM34C,GAAeT,GAAUA,EAAOznB,kBAAoBynB,EAAOznB,iBAAiBmoB,SAM5Eo8C,EAAkB,GAAIl8C,WACzB04C,GAAoBF,IACpB8B,GAAiBl7C,EAAOxxB,OACxB4rE,GAAciC,IAWjB,QARIr8C,EAAO/V,WACLwW,GAAiBA,EAAaxa,IAA2B5E,EAAAA,eAAgB,OAC7Ey7D,EAAgBp5C,IAAIriB,EAAAA,gBAClB7O,MAAOwtB,EAAO/V,UACd/P,OAAQsE,EAAAA,OAIL,GAAImiB,GAAAA,eAAeF,GAAgBv3B,KAAKq2B,UAAWu9C,IAOpDhY,EAAVr7D,UAAA+yE,kBAAA,SAA4BH,GACxB,GAAMlrE,GAAQjI,KAAK6yE,YAAYhpD,QAAQspD,EAEnClrE,IAAS,IACXjI,KAAK6yE,YAAY5nE,OAAOhD,EAAO,GAI1BjI,KAAK6yE,YAAYryE,SACpBR,KAAK2yE,oBAAoB5qE,QAAQ,SAAC8rE,EAAeznE,GAC3CynE,EACFznE,EAAQ4qD,aAAa,cAAe6c,GAEpCznE,EAAQsqD,gBAAgB,iBAI5B12D,KAAK2yE,oBAAoBt/B,QACzBrzC,KAAK8yE,gBAAgBvpE,UAQnBqyD,EAAVr7D,UAAA8yE,wDACI,GAAMS,GAAmB9zE,KAAKuyE,kBAAkBwB,qBAGhD,IAAID,EAAiBE,cAGnB,IAAK,GAFCC,GAAWH,EAAiBE,cAAclsE,SAEvCa,EAAIsrE,EAASzzE,OAAS,EAAGmI,GAAK,EAAGA,IAAK,CAC7C,GAAIurE,GAAUD,EAAStrE,EAEnBurE,KAAYJ,GACO,WAArBI,EAAQ3hC,UACa,UAArB2hC,EAAQ3hC,UACP2hC,EAAQpnB,aAAa,eAEtB9sD,KAAK2yE,oBAAoBn4C,IAAI05C,EAASA,EAAQC,aAAa,gBAC3DD,EAAQld,aAAa,cAAe,WAOpC4E,EAAVr7D,UAAAizE,cAAA,SAAwBY,GAGpB,IAFA,GAAIzrE,GAAIyrE,EAAQ5zE,OAETmI,KAKLyrE,EAAQzrE,GAAGmzB,wBA7SjBr6B,KAACsd,EAAAA,iDA1DDtd,KAAEg4B,EAAAA,UAYFh4B,KAAEk4B,EAAAA,WALFl4B,KAAQ4yE,EAAAA,SAARzxE,aAAAnB,KA6FO2W,EAAAA,aACP3W,SAAAkB,GAAAC,aAAAnB,KAAO2W,EAAAA,WAAP3W,KAAmBoB,EAAAA,OAAnBlB,MAA0BswE,QAC1BxwE,SAAAkB,GAAAC,aAAAnB,KAAOoB,EAAAA,OAAPlB,MAAcuwE,QACdzwE,KAAqDm6D,EAArDh5D,aAAAnB,KAAO2W,EAAAA,WAAP3W,KAAmB0d,EAAAA,aArGnB1d,KAAE6yE,EAAAA,oBAZF1Y,KCqBI2Y,GAAmB,gBAuBrB,QAAFC,GACuBrB,EACXxyE,EACAw6D,GAFWn7D,KAAvBmzE,UAAuBA,EACXnzE,KAAZW,YAAYA,EACAX,KAAZm7D,QAAYA,EAVZn7D,KAAAyO,UAA2C,eArC3C,MAiDE+lE,GAAFj0E,UAAA6N,SAAE,WACOpO,KAAKmzE,YAMRnzE,KAAKmzE,UAAYsB,EAAiBz0E,KAAKW,YAAaX,KAAKm7D,QAAQ0X,eAIrE2B,EAAFj0E,UAAA0N,YAAE,SAAY/N,GACV,GAAMw0E,GAAgBx0E,EAA1B,iBAAqDA,EAArD,qBAEQw0E,KACF10E,KAAKwxE,aAAekD,EAAcjtB,8BAtCxChmD,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,mDACVC,SAAU,iBACVI,MACEwE,UAAW,gCACXqoC,oBAAqB,YACrBrtC,KAAQ,kDAdZA,KAAQyvE,GAARtuE,aAAAnB,KA2BK2W,EAAAA,aA9BL3W,KAAEuD,EAAAA,aAEFvD,KAAQm6D,wBAoBRntD,YAAAhN,KAAG2D,EAAAA,MAAHzD,MAAS,gBAGT6vE,eAAA/vE,KAAG2D,EAAAA,MAAHzD,MAAS,sBAETgzE,kBAAAlzE,KAAG2D,EAAAA,MAAHzD,MAAS,qBA1CT6yE,mBAmFE,QAAFI,GACwB7Z,EACZp6D,EACAw6D,GAFYn7D,KAAxB+6D,WAAwBA,EACZ/6D,KAAZW,YAAYA,EACAX,KAAZm7D,QAAYA,EALZn7D,KAAA8e,GAAgB,oBAAoBy1D,KAjFpC,MAwFEK,GAAFr0E,UAAA6N,SAAE,WAAA,GAAFhO,GAAAJ,IACSA,MAAK+6D,aACR/6D,KAAK+6D,WAAa0Z,EAAiBz0E,KAAKW,YAAaX,KAAKm7D,QAAQ0X,cAGhE7yE,KAAK+6D,YACP5vD,QAAQC,UAAUC,KAAK,WACrB,GAAM6sB,GAAY93B,EAAK26D,WAAWoW,kBAE9Bj5C,KAAcA,EAAUs4C,kBAC1Bt4C,EAAUs4C,gBAAkBpwE,EAAK0e,sBA1B3Crd,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,uCACVC,SAAU,iBACVI,MACEC,MAAS,mBACT0hC,OAAQ,8CA3DZniC,KAAQyvE,GAARtuE,aAAAnB,KAkEK2W,EAAAA,aArEL3W,KAAEuD,EAAAA,aAEFvD,KAAQm6D,wBAgER98C,KAAArd,KAAG2D,EAAAA,SAjFHwvE,iCAAA,sBA6GAnzE,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,+DACVK,MAAOC,MAAS,0BA/GlB2yE,iCAAA,sBAwHApzE,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,+DACVK,MAAOC,MAAS,0BA1HlB4yE,iCCAA,sBAuBArzE,KAACuB,EAAAA,SAADrB,OACEsB,SACE2D,EAAAA,aACAivB,EAAAA,cACAlY,EAAAA,aACAza,IAEFC,SACEitE,GACAoE,GACAI,GACAC,GACAC,GACA5xE,IAEFG,cACE+sE,GACAoE,GACAI,GACAE,GACAD,IAEFhwE,WACE+2D,GACAuW,IAEFr8C,iBAAkBs6C,QAjDpB3P,KCYasU,GAAuBC,EAAAA,+FAZpC,MA+ByCvwE,GAAzCwwE,EAAA3wE,GACE8E,OAAFC,eACM4rE,EADN10E,UAAA,0BAAE,WACmC,MAAOP,MAAKk1E,aAC/C,SAAuB5rE,GAAiBtJ,KAAKk1E,QAAU5rE,mCAEvDF,OAAFC,eACM4rE,EADN10E,UAAA,0BAAE,WACmC,MAAOP,MAAKm1E,aAC/C,SAAuB7rE,GAAiBtJ,KAAKm1E,QAAU7rE,mCAEvDF,OAAFC,eACM4rE,EADN10E,UAAA,mBAAE,WAC6B,MAAOP,MAAK28B,aACzC,SAAgBrzB,GAAkBtJ,KAAK28B,QAAUrzB,mCAEjDF,OAAFC,eACM4rE,EADN10E,UAAA,2BAAE,WACqC,MAAOP,MAAK28B,aACjD,SAAwBrzB,GAAkBtJ,KAAK28B,QAAUrzB,kDA3B3D7H,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,wDACVC,SAAU,sBACVG,QAAS,qBAAsB,sBAC/BC,MACEC,MAAS,qCAGTkzE,KAAQ,IACR1V,UAAW,6CAIf2V,qBAAA5zE,KAAG2D,EAAAA,QAIHkwE,qBAAA7zE,KAAG2D,EAAAA,QAIHmwE,cAAA9zE,KAAG2D,EAAAA,MAAHzD,MAAS,kBAIT6zE,sBAAA/zE,KAAG2D,EAAAA,SA5CH6vE,GA+ByCF,ICd5B1V,GACT,GAAIzzD,GAAAA,eAA6B,4BCoB/B6pE,IACJ,SACA,WACA,OACA,SACA,QACA,QACA,QACA,QACA,UAGEr0C,GAAe,EAInBs0C,GAAA,WACE,QAAFA,GAAqBxyB,EACAC,EACAC,EAEAC,GAJArjD,KAArBkjD,0BAAqBA,EACAljD,KAArBmjD,YAAqBA,EACAnjD,KAArBojD,iBAAqBA,EAEApjD,KAArBqjD,UAAqBA,EA3DrB,MAAAqyB,MA6DaC,GACTpyB,EAAgBmyB,mBAiKlB,QAAFE,GACcj1E,EACAud,EAEiBmlC,EACfF,EACAC,EACZF,EACsD2yB,EAC9CC,EACR51C,GAVF,GAAF9/B,GAWIkE,EAXJ5D,KAAAV,KAWUkjD,EAA2BC,EAAaC,EAAkBC,IAXpErjD,WACcI,GAAdO,YAAcA,EACAP,EAAd8d,UAAcA,EAEiB9d,EAA/BijD,UAA+BA,EAKnBjjD,EAAZ01E,iBAAYA,EA3IZ11E,EAAAyjD,KAAmB,aAAaziB,KAOhChhC,EAAA21E,WAAc,EAGd31E,EAAA41E,iBAAoB,EAMpB51E,EAAAguE,SAAqB,EAMrBhuE,EAAAykD,aAAyC,GAAIh3C,GAAAA,QAM7CzN,EAAAikD,YAAwB,YAMxBjkD,EAAA61E,YAAe,EAuBf71E,EAAA8nC,WAAwB,EAwBxB9nC,EAAA6hC,WAAwB,EAgBxB7hC,EAAA81E,MAAoB,OAsBpB91E,EAAA+1E,WAAsB,EAEtB/1E,EAAAg2E,uBACI,OACA,WACA,iBACA,QACA,OACA,QACAt1E,OAAO,SAAAu1E,GAAK,MAAAC,GAAAA,yBAAyBh8C,IAAI+7C,KAgBzCj2E,EAAKm2E,oBAAsBV,GAAsBz1E,EAAKO,YAAYC,cAElER,EAAKo2E,qBAAuBp2E,EAAKkJ,MAGjClJ,EAAK0e,GAAK1e,EAAK0e,GAKXZ,EAAUi0B,KACZjS,EAAO3zB,kBAAkB,WACvB5L,EAAYC,cAAc0xC,iBAAiB,QAAS,SAAC59B,GACnD,GAAI+hE,GAAK/hE,EAAgC,MACpC+hE,GAAGntE,OAAUmtE,EAAGC,gBAAmBD,EAAGE,eAKzCF,EAAGG,kBAAkB,EAAG,GACxBH,EAAGG,kBAAkB,EAAG,QAMhCx2E,EAAK21E,WAAa31E,EAAK8d,UAAUI,UACjCle,EAAK41E,gBAA4E,WAA1D51E,EAAKO,YAAYC,cAAc2xC,SAAS5oB,gBAxQnE,MA2F8BllB,GAA9BmxE,EAAAtxE,GA0CE8E,OAAFC,eACMusE,EADNr1E,UAAA,gBAAE,WAEE,MAAIP,MAAKqjD,WAAyC,OAA5BrjD,KAAKqjD,UAAU7sC,SAC5BxW,KAAKqjD,UAAU7sC,SAEjBxW,KAAKkoC,eAEd,SAAa5+B,GACXtJ,KAAKkoC,UAAY5uB,EAAAA,sBAAsBhQ,GAInCtJ,KAAKouE,UACPpuE,KAAKouE,SAAU,EACfpuE,KAAK6kD,aAAat7C,yCAStBH,OAAFC,eACMusE,EADNr1E,UAAA,UAAE,WACmB,MAAOP,MAAKilD,SAC/B,SAAO37C,GAAiBtJ,KAAKilD,IAAM37C,GAAStJ,KAAK6jD,sCAajDz6C,OAAFC,eACMusE,EADNr1E,UAAA,gBAAE,WAC0B,MAAOP,MAAKiiC,eACtC,SAAa34B,GAAkBtJ,KAAKiiC,UAAY3oB,EAAAA,sBAAsBhQ,oCAItEF,OAAFC,eACMusE,EADNr1E,UAAA,YAAE,WACqB,MAAOP,MAAKk2E,WACjC,SAAS5sE,GACPtJ,KAAKk2E,MAAQ5sE,GAAS,OACtBtJ,KAAK62E,iBAKA72E,KAAK82E,eAAiBR,EAAAA,yBAAyBh8C,IAAIt6B,KAAKk2E,SAC1Dl2E,KAAKW,YAA6C,cAAEc,KAAOzB,KAAKk2E,wCAYrE9sE,OAAFC,eACMusE,EADNr1E,UAAA,aAAE,WACsB,MAAOP,MAAKu2E,oBAAoBjtE,WACtD,SAAUA,GACJA,IAAUtJ,KAAKsJ,QACjBtJ,KAAKu2E,oBAAoBjtE,MAAQA,EACjCtJ,KAAK6kD,aAAat7C,yCAKtBH,OAAFC,eACMusE,EADNr1E,UAAA,gBAAE,WAC0B,MAAOP,MAAKm2E,eACtC,SAAa7sE,GAAkBtJ,KAAKm2E,UAAY78D,EAAAA,sBAAsBhQ,oCAwDtEssE,EAAFr1E,UAAA6N,SAAE,WAAA,GAAFhO,GAAAJ,IACQA,MAAKke,UAAUI,WACjBte,KAAK81E,iBAAiBh5D,QAAQ9c,KAAKW,YAAYC,eAAeT,UAAU,SAAAuU,GACtEtU,EAAK61E,WAAavhE,EAAMqiE,aACxB32E,EAAKykD,aAAat7C,UAKxBqsE,EAAFr1E,UAAA0N,YAAE,WACEjO,KAAK6kD,aAAat7C,QAGpBqsE,EAAFr1E,UAAAmF,YAAE,WACE1F,KAAK6kD,aAAa12C,WAEdnO,KAAKke,UAAUI,WACjBte,KAAK81E,iBAAiB34D,eAAend,KAAKW,YAAYC,gBAI1Dg1E,EAAFr1E,UAAAw+B,UAAE,WACM/+B,KAAKqjD,WAIPrjD,KAAK0lD,mBAMP1lD,KAAKg3E,0BAIPpB,EAAFr1E,UAAAgS,MAAE,WAAgBvS,KAAKW,YAAYC,cAAc2R,SAG/CqjE,EAAFr1E,UAAA6Z,cAAE,SAAc68D,GACRA,IAAcj3E,KAAKouE,SAAYpuE,KAAKk3E,WACtCl3E,KAAKouE,QAAU6I,EACfj3E,KAAK6kD,aAAat7C,SAItBqsE,EAAFr1E,UAAAy+D,SAAE,aAWU4W,EAAZr1E,UAAAy2E,uBAAE,WACE,GAAM3wC,GAAWrmC,KAAKsJ,KAElBtJ,MAAKw2E,uBAAyBnwC,IAChCrmC,KAAKw2E,qBAAuBnwC,EAC5BrmC,KAAK6kD,aAAat7C,SAKZqsE,EAAZr1E,UAAAs2E,cAAE,WACE,GAAIpB,GAAwB5rD,QAAQ7pB,KAAKk2E,QAAU,EACjD,KAAMiB,GAAgCn3E,KAAKk2E,QAKrCN,EAAZr1E,UAAA62E,cAAE,WACE,MAAOp3E,MAAKo2E,sBAAsBvsD,QAAQ7pB,KAAKk2E,QAAU,GAIjDN,EAAZr1E,UAAA82E,YAAE,WAEE,GAAIC,GAAYt3E,KAAKW,YAA6C,cAAE22E,QACpE,OAAOA,IAAYA,EAASC,UAIpB3B,EAAZr1E,UAAAu2E,YAAE,WACE,MAAiE,aAA1D92E,KAAKW,YAAYC,cAAc2xC,SAAS5oB,eAOjDvgB,OAAFC,eAAMusE,EAANr1E,UAAA,aAAE,WACE,QAAQP,KAAKo3E,iBAAoBp3E,KAAKW,YAAYC,cAAc0I,OAAUtJ,KAAKq3E,eAC1Er3E,KAAKi2E,6CAOZ7sE,OAAFC,eAAMusE,EAANr1E,UAAA,wBAAE,WACE,GAAIP,KAAKg2E,gBAAiB,CAIxB,GAAMwB,GAAgBx3E,KAAKW,YAA8C,aAEzE,OAAO62E,GAAcprC,WAAapsC,KAAK4uC,SAAW4oC,EAAcjrC,QAAQ,GAAG5pB,OACvE3iB,KAAKouE,QAET,MAAOpuE,MAAKouE,UAAYpuE,KAAK4uC,uCAQjCgnC,EAAFr1E,UAAA+tC,kBAAE,SAAkBC,GAAiBvuC,KAAKwuC,iBAAmBD,EAAIE,KAAK,MAMpEmnC,EAAFr1E,UAAAmuC,iBAAE,WAIO1uC,KAAKouE,SACRpuE,KAAKuS,wBA9UX9Q,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,4HAEVC,SAAU,WACVI,MAIEC,MAAS,oDACTu1E,2BAA4B,YAG5B5tC,YAAa,KACbmlC,qBAAsB,cACtBvP,aAAc,WACdiY,aAAc,WACdC,kBAAmB,uCACnBvoC,0BAA2B,2BAC3BH,sBAAuB,aACvBD,uBAAwB,sBACxBxe,SAAU,uBACVD,UAAW,sBACXmvC,UAAW,cAEb76D,YAAaC,QAAS8qC,GAAqB7qC,YAAa6wE,4CA3E1Dn0E,KAAEuD,EAAAA,aALFvD,KAAgC+b,EAAAA,WAehC/b,KAA4BwuC,EAAAA,UAA5BrtC,aAAAnB,KA2MK2W,EAAAA,WA3ML3W,KA2MiByuC,EAAAA,SA3MjBzuC,KAAuCquC,EAAAA,OAAvCltC,aAAAnB,KA4MK2W,EAAAA,aA5ML3W,KAAQsuC,EAAAA,mBAARntC,aAAAnB,KA6MK2W,EAAAA,aAzML3W,KAAE2iB,KA2MF3iB,SAAAkB,GAAAC,aAAAnB,KAAK2W,EAAAA,WAAL3W,KAAiByuC,EAAAA,OAAjBzuC,KAAyBoB,EAAAA,OAAzBlB,MAAgC09D,QA7NhC59D,KAAQm2E,EAAAA,kBAORn2E,KAAEuL,EAAAA,4BAoHFwJ,WAAA/U,KAAG2D,EAAAA,QAuBH0Z,KAAArd,KAAG2D,EAAAA,QASHgmC,cAAA3pC,KAAG2D,EAAAA,QAMH4+B,WAAAviC,KAAG2D,EAAAA,QAMH3D,OAAAA,KAAG2D,EAAAA,QAgBHurC,oBAAAlvC,KAAG2D,EAAAA,QAMHkE,QAAA7H,KAAG2D,EAAAA,QAUH8xE,WAAAz1E,KAAG2D,EAAAA,SAjNHwwE,GA2F8BD,gCC3F9B,sBAiBAl0E,KAACuB,EAAAA,SAADrB,OACE0B,cAAeuyE,GAAUX,IACzBhyE,SACE2D,EAAAA,aACAixE,EAAAA,gBACA9mC,IAEF5tC,SACE00E,EAAAA,gBAGA9mC,GACA6kC,GACAX,IAEFpwE,WAAYuf,QAhCd0zD,gCCmBA93E,KAAAE,QAAoC,GAAI2N,GAAAA,QAGxC7N,KAAA+3E,cAA0B,WAG1B/3E,KAAAg4E,kBAA8B,gBAG9Bh4E,KAAA4rE,eAA2B,iBAG3B5rE,KAAAgsE,eAA2B,aAG3BhsE,KAAA6rE,cAA0B,gBAG1B7rE,KAAAisE,cAA0B,YAG1BjsE,KAAA+rE,mBAA+B,oBAG/B/rE,KAAAksE,mBAA+B,gBAG/BlsE,KAAA2rE,uBAAmC,cAGnC3rE,KAAA0rE,2BAAuC,wBAjDvC,sBAaAjqE,KAACsd,EAAAA,WAADpd,OAAakK,WAAY,8GAbzBm1D,KpBwBAmI,GAAA,WACE,QAAFA,GAAqB7/D,EACA2uE,EACAxpE,EACAkuB,GAHA38B,KAArBsJ,MAAqBA,EACAtJ,KAArBi4E,aAAqBA,EACAj4E,KAArByO,UAAqBA,EACAzO,KAArB28B,QAAqBA,EA5BrB,MAAAwsC,oBAoFE,QAAFxI,GAAsBhgE,EAA8CsL,GAA9CjM,KAAtBW,YAAsBA,EAA8CX,KAApEiM,QAAoEA,EAjBpEjM,KAAAolE,QAAqB,EAGrBplE,KAAAqlE,wBAAoC,EAGpCrlE,KAAAslE,WAAwB,EAMxBtlE,KAAAulE,gBAA6B,EAG7BvlE,KAAAwlE,oBAAiE,GAAI10D,GAAAA,aAArE,MAIE6vD,GAAFpgE,UAAA23E,aAAE,SAAalP,IACNhpE,KAAKqlE,wBAA2B2D,EAAKrsC,UAG1C38B,KAAKwlE,oBAAoB/zD,KAAKu3D,EAAK1/D,QAIrCF,OAAFC,eAAMs3D,EAANpgE,UAAA,uBAAE,WACE,MAAOP,MAAKo1E,MAAQp1E,KAAKo1E,KAAK50E,QAAUR,KAAKo1E,KAAK,GAAG50E,OACjDR,KAAKolE,QAAUplE,KAAKo1E,KAAK,GAAG50E,OAAS,mCAG3CmgE,EAAFpgE,UAAA43E,cAAE,SAAc3qB,EAAkBqC,GAC9B,GAAIuoB,GAAa5qB,EAAWxtD,KAAKolE,QAAUvV,CAO3C,OAJIrC,KACF4qB,GAAcp4E,KAAKq4E,iBAGdD,GAAcp4E,KAAKslE,YAI5B3E,EAAFpgE,UAAA2nE,iBAAE,WAAA,GAAF9nE,GAAAJ,IACIA,MAAKiM,QAAQM,kBAAkB,WAC7BnM,EAAK6L,QAAQqyC,SAAS5qB,eAAe9rB,KAAKC,EAAAA,KAAK,IAAI1H,UAAU,WAC3D,GAAMmlE,GACFllE,EAAKO,YAAYC,cAAc0mD,cAAc,4BAE7Cge,IACFA,EAAW/yD,4BAlFrB9Q,KAACC,EAAAA,UAADC,OAAAC,SAAA,sBACEE,SAAU,y4CACVC,QAAF,40BACEE,MACFC,MAAA,oBACMqC,KAAN,OACI+zE,gBAAJ,QAEAz2E,SAAA,kBACAW,cAAAC,EAAAA,kBAAAC,KACEL,gBAAFC,EAAAA,wBAAAC,oFA9BAo+D,EAAA59D,6DAoCAw1E,aAAA92E,KAAQ2D,EAAAA;GAGR8/D,gBAAAzjE,KAAA2D,EAAAA,QAGA+/D,wBAAQ1jE,KAAR2D,EAAAA,QAGAggE,UAAA3jE,KAAA2D,EAAAA,QAGAigE,yBAAA5jE,KAAA2D,EAAAA,QAGAkgE,aAAA7jE,KAAA2D,EAAAA,QAGAmgE,kBAAA9jE,KAAA2D,EAAAA,QAGAogE,sBAAA/jE,KAAAuQ,EAAAA,UASA2uD,mBCkDE,QAAFC,GAAsB1tD,EACsCupD,EAC3B5C,EACCnpD,GAC9B,GAJkB1Q,KAAtBkT,mBAAsBA,EACsClT,KAA5Dy8D,aAA4DA,EAC3Bz8D,KAAjC65D,aAAiCA,EACC75D,KAAlC0Q,KAAkCA,EAnClC1Q,KAAAylE,eAA8D,GAAI30D,GAAAA,aAGlE9Q,KAAA0lE,eAA0D,GAAI50D,GAAAA,aAG9D9Q,KAAA2lE,iBAAyD,GAAI70D,GAAAA,cA8BpD9Q,KAAK65D,aACR,KAAMC,GAA2B,cAEnC,KAAK95D,KAAKy8D,aACR,KAAM3C,GAA2B,mBAGnC,IAAM8L,GAAiB5lE,KAAK65D,aAAagM,oBACnCC,EAAiB9lE,KAAK65D,aAAakM,kBAAkB,UACrDC,EAAehmE,KAAK65D,aAAakM,kBAAkB,QAGrDE,EAAWD,EAAaj8D,IAAI,SAACm8D,EAAMv9D,GACrC,OAAQu9D,KAAdA,EAAoBC,OAAQL,EAAen9D,KAEvC3I,MAAKomE,UAAYH,EAASxlE,MAAMmlE,GAAgBS,OAAOJ,EAASxlE,MAAM,EAAGmlE,IAEzE5lE,KAAKsmE,YAActmE,KAAK65D,aAAa0M,QA5CzC,MAnDEn9D,QAAFC,eACMu3D,EADNrgE,UAAA,kBAAE,WACsB,MAAOP,MAAKsmE,iBAClC,SAAeh9D,GACb,GAAMk9D,GAAgBxmE,KAAKsmE,YACrBG,EACFzmE,KAAKu9D,oBAAoBv9D,KAAK65D,aAAa2D,YAAYl0D,KAAWtJ,KAAK65D,aAAa0M,OACxFvmE,MAAKsmE,YAActmE,KAAK65D,aAAa6M,UAAUD,EAAWzmE,KAAK2mE,QAAS3mE,KAAK4mE,SACxE5mE,KAAK6mE,qBAAqBL,EAAexmE,KAAKsmE,cACjDtmE,KAAK8mE,yCAMT19D,OAAFC,eACMu3D,EADNrgE,UAAA,gBAAE,WAC2B,MAAOP,MAAK+nC,eACvC,SAAaz+B,GACXtJ,KAAK+nC,UAAY/nC,KAAKu9D,oBAAoBv9D,KAAK65D,aAAa2D,YAAYl0D,IACxEtJ,KAAK+mE,cAAgB/mE,KAAKgnE,uBAAuBhnE,KAAK+nC,4CAKxD3+B,OAAFC,eACMu3D,EADNrgE,UAAA,eAAE,WAC0B,MAAOP,MAAKinE,cACtC,SAAY39D,GACVtJ,KAAKinE,SAAWjnE,KAAKu9D,oBAAoBv9D,KAAK65D,aAAa2D,YAAYl0D,qCAKzEF,OAAFC,eACMu3D,EADNrgE,UAAA,eAAE,WAC0B,MAAOP,MAAKknE,cACtC,SAAY59D,GACVtJ,KAAKknE,SAAWlnE,KAAKu9D,oBAAoBv9D,KAAK65D,aAAa2D,YAAYl0D,qCAgEzEs3D,EAAFrgE,UAAAkF,mBAAE,WACEzF,KAAK8mE,SAIPlG,EAAFrgE,UAAA4mE,cAAE,SAAc3M,GACZ,GAAIx6D,KAAK+mE,eAAiBvM,EAAM,CAC9B,GAAM4M,GAAepnE,KAAK65D,aAAawN,QAAQrnE,KAAKsnE,YAC9CC,EAAgBvnE,KAAK65D,aAAa2N,SAASxnE,KAAKsnE,YAChDG,EAAeznE,KAAK65D,aAAa6N,WAAWN,EAAcG,EAAe/M,EAE/Ex6D,MAAKylE,eAAeh0D,KAAKg2D,GAG3BznE,KAAK0lE,eAAej0D,QAItBmvD,EAAFrgE,UAAAonE,2BAAE,SAA2BjzD,GAKzB,GAAM8xD,GAAgBxmE,KAAKsmE,YACrBptC,EAAQl5B,KAAKksC,QAEnB,QAAQx3B,EAAMC,SACZ,IAAKwZ,GAAAA,WACHnuB,KAAKsnE,WAAatnE,KAAK65D,aAAa+N,gBAAgB5nE,KAAKsmE,YAAaptC,EAAQ,GAAK,EACnF,MACF,KAAK7K,GAAAA,YACHruB,KAAKsnE,WAAatnE,KAAK65D,aAAa+N,gBAAgB5nE,KAAKsmE,YAAaptC,GAAS,EAAI,EACnF,MACF,KAAK9K,GAAAA,SACHpuB,KAAKsnE,WAAatnE,KAAK65D,aAAa+N,gBAAgB5nE,KAAKsmE,aAAc,EACvE,MACF,KAAKh4C,GAAAA,WACHtuB,KAAKsnE,WAAatnE,KAAK65D,aAAa+N,gBAAgB5nE,KAAKsmE,YAAa,EACtE,MACF,KAAK1xD,GAAAA,KACH5U,KAAKsnE,WAAatnE,KAAK65D,aAAa+N,gBAAgB5nE,KAAKsmE,YACrD,EAAItmE,KAAK65D,aAAagO,QAAQ7nE,KAAKsmE,aACvC,MACF,KAAKvxD,GAAAA,IACH/U,KAAKsnE,WAAatnE,KAAK65D,aAAa+N,gBAAgB5nE,KAAKsmE,YACpDtmE,KAAK65D,aAAaiO,kBAAkB9nE,KAAKsmE,aACxCtmE,KAAK65D,aAAagO,QAAQ7nE,KAAKsmE,aACrC,MACF,KAAKt4C,GAAAA,QACHhuB,KAAKsnE,WAAa5yD,EAAM4xC,OACpBtmD,KAAK65D,aAAakO,iBAAiB/nE,KAAKsmE,aAAc,GACtDtmE,KAAK65D,aAAamO,kBAAkBhoE,KAAKsmE,aAAc,EAC3D,MACF,KAAKp4C,GAAAA,UACHluB,KAAKsnE,WAAa5yD,EAAM4xC,OACpBtmD,KAAK65D,aAAakO,iBAAiB/nE,KAAKsmE,YAAa,GACrDtmE,KAAK65D,aAAamO,kBAAkBhoE,KAAKsmE,YAAa,EAC1D,MACF,KAAKrxD,GAAAA,MACL,IAAKC,GAAAA,MAOH,YANKlV,KAAKioE,aAAcjoE,KAAKioE,WAAWjoE,KAAKsmE,eAC3CtmE,KAAKmnE,cAAcnnE,KAAK65D,aAAagO,QAAQ7nE,KAAKsmE,cAClDtmE,KAAK0lE,eAAej0D,OAEpBiD,EAAMI,kBAGV,SAEE,OAGA9U,KAAK65D,aAAa4D,YAAY+I,EAAexmE,KAAKsnE,aACpDtnE,KAAK2lE,iBAAiBl0D,KAAKzR,KAAKsnE,YAGlCtnE,KAAKkoE,mBAELxzD,EAAMI,kBAIR8rD,EAAFrgE,UAAAumE,MAAE,WACE9mE,KAAK+mE,cAAgB/mE,KAAKgnE,uBAAuBhnE,KAAKijB,UACtDjjB,KAAKmoE,WAAanoE,KAAKgnE,uBAAuBhnE,KAAK65D,aAAa0M,SAChEvmE,KAAKooE,YACDpoE,KAAK65D,aAAawO,cAAc,SAASroE,KAAK65D,aAAa2N,SAASxnE,KAAKsnE,aACpEgB,mBAET,IAAIC,GAAevoE,KAAK65D,aAAa6N,WAAW1nE,KAAK65D,aAAawN,QAAQrnE,KAAKsnE,YAC3EtnE,KAAK65D,aAAa2N,SAASxnE,KAAKsnE,YAAa,EACjDtnE,MAAKwoE,kBAhNa,EAiNGxoE,KAAK65D,aAAa4O,aAAaF,GAC/CvoE,KAAK65D,aAAagM,qBAlNL,EAoNlB7lE,KAAK0oE,mBACL1oE,KAAKkT,mBAAmB/B,gBAI1ByvD,EAAFrgE,UAAA2nE,iBAAE,WACEloE,KAAK2oE,iBAAiBT,oBAIhBtH,EAAVrgE,UAAAmoE,4BACI,GAAME,GAAc5oE,KAAK65D,aAAaiO,kBAAkB9nE,KAAKsnE,YACvDuB,EAAY7oE,KAAK65D,aAAaiP,cACpC9oE,MAAK+oE,WACL,KAAK,GAAIpgE,GAAI,EAAGqgE,EAAOhpE,KAAKwoE,iBAAkB7/D,EAAIigE,EAAajgE,IAAKqgE,IAAQ,CAlO1D,GAmOZA,IACFhpE,KAAK+oE,OAAOxhE,SACZyhE,EAAO,EAET,IAAMxO,GAAOx6D,KAAK65D,aAAa6N,WACzB1nE,KAAK65D,aAAawN,QAAQrnE,KAAKsnE,YAC/BtnE,KAAK65D,aAAa2N,SAASxnE,KAAKsnE,YAAa3+D,EAAI,GACjDg0B,EAAU38B,KAAKipE,kBAAkBzO,GACjC/rD,EAAYzO,KAAK65D,aAAaqF,OAAO1E,EAAMx6D,KAAKy8D,aAAa0C,QAAQ+J,cAC3ElpE,MAAK+oE,OAAO/oE,KAAK+oE,OAAOvoE,OAAS,GAC5B+G,KAAK,GAAI4hE,IAAgBxgE,EAAI,EAAGkgE,EAAUlgE,GAAI8F,EAAWkuB,MAK1DikC,EAAVrgE,UAAA0oE,kBAAA,SAA4BzO,GACxB,QAASA,KACHx6D,KAAKioE,YAAcjoE,KAAKioE,WAAWzN,OACnCx6D,KAAK2mE,SAAW3mE,KAAK65D,aAAa4D,YAAYjD,EAAMx6D,KAAK2mE,UAAY,MACrE3mE,KAAK4mE,SAAW5mE,KAAK65D,aAAa4D,YAAYjD,EAAMx6D,KAAK4mE,UAAY,IAOrEhG,EAAVrgE,UAAAymE,uBAAA,SAAiCxM,GAC7B,MAAOA,IAAQx6D,KAAK6mE,qBAAqBrM,EAAMx6D,KAAKsnE,YAChDtnE,KAAK65D,aAAagO,QAAQrN,GAAQ,MAIhCoG,EAAVrgE,UAAAsmE,qBAAA,SAA+BuC,EAAcC,GACzC,SAAUD,IAAMC,GAAMrpE,KAAK65D,aAAa2N,SAAS4B,IAAOppE,KAAK65D,aAAa2N,SAAS6B,IACzErpE,KAAK65D,aAAawN,QAAQ+B,IAAOppE,KAAK65D,aAAawN,QAAQgC,KAO/DzI,EAAVrgE,UAAAg9D,oBAAA,SAA8B/yC,GAC1B,MAAQxqB,MAAK65D,aAAauF,eAAe50C,IAAQxqB,KAAK65D,aAAa0E,QAAQ/zC,GAAQA,EAAM,MAInFo2C,EAAVrgE,UAAA2rC,kBACI,MAAOlsC,MAAK0Q,MAA4B,QAApB1Q,KAAK0Q,KAAKpH,sBA3QlC7H,KAACC,EAAAA,UAADC,OAAAC,SAAA,iBACEE,SAAU,kkBACVD,SAAU,eACVW,cAAFC,EAAAA,kBAAAC,KACEL,gBAAFC,EAAAA,wBAAAC,iJA3BAd,KAAEq6D,GAAFl5D,aAAAnB,KAAA2W,EAAAA,aA8GA3W,KAAA0W,EAAAA,eAAAvV,aAAAnB,KAAA2W,EAAAA,cAnGAwoD,EAAA79D,sEAwBA4jE,UAAAllE,KAAA2D,EAAAA,QAcAwhE,UAAAnlE,KAAA2D,EAAAA,QASA6iE,aAAAxmE,KAAA2D,EAAAA,QAQAqgE,iBAAAhkE,KAAAuQ,EAAAA,SAQA0zD,iBAAAjkE,KAAAuQ,EAAAA,SAGA2zD,mBAAAlkE,KAAAuQ,EAAAA,SAGA22D,mBAAAlnE,KAAA+M,EAAAA,UAAA7M,MAAAg/D,OAMAC,mBCUE,QAAFE,GAAsB5tD,EACW2mD,EACCnpD,GAC9B,GAHkB1Q,KAAtBkT,mBAAsBA,EACWlT,KAAjC65D,aAAiCA,EACC75D,KAAlC0Q,KAAkCA,EAtBlC1Q,KAAAylE,eAAuD,GAAI30D,GAAAA,aAG3D9Q,KAAAi8D,aAAqD,GAAInrD,GAAAA,aAGzD9Q,KAAA2lE,iBAAyD,GAAI70D,GAAAA,cAiBpD9Q,KAAK65D,aACR,KAAMC,GAA2B,cAGnC95D,MAAKsmE,YAActmE,KAAK65D,aAAa0M,QAlBzC,MApDEn9D,QAAFC,eACMy3D,EADNvgE,UAAA,kBAAE,WACsB,MAAOP,MAAKsmE,iBAClC,SAAeh9D,GACb,GAAIk9D,GAAgBxmE,KAAKsmE,YACnBG,EACFzmE,KAAKu9D,oBAAoBv9D,KAAK65D,aAAa2D,YAAYl0D,KAAWtJ,KAAK65D,aAAa0M,OACxFvmE,MAAKsmE,YAActmE,KAAK65D,aAAa6M,UAAUD,EAAWzmE,KAAK2mE,QAAS3mE,KAAK4mE,SACzEr7D,KAAK0hC,MAAMjtC,KAAK65D,aAAawN,QAAQb,GA1BjB,KA2BpBj7D,KAAK0hC,MAAMjtC,KAAK65D,aAAawN,QAAQrnE,KAAKsmE,aA3BtB,KA4BtBtmE,KAAK8mE,yCAMT19D,OAAFC,eACMy3D,EADNvgE,UAAA,gBAAE,WAC2B,MAAOP,MAAK+nC,eACvC,SAAaz+B,GACXtJ,KAAK+nC,UAAY/nC,KAAKu9D,oBAAoBv9D,KAAK65D,aAAa2D,YAAYl0D,IACxEtJ,KAAKspE,cAAgBtpE,KAAK+nC,WAAa/nC,KAAK65D,aAAawN,QAAQrnE,KAAK+nC,4CAKxE3+B,OAAFC,eACMy3D,EADNvgE,UAAA,eAAE,WAC0B,MAAOP,MAAKinE,cACtC,SAAY39D,GACVtJ,KAAKinE,SAAWjnE,KAAKu9D,oBAAoBv9D,KAAK65D,aAAa2D,YAAYl0D,qCAKzEF,OAAFC,eACMy3D,EADNvgE,UAAA,eAAE,WAC0B,MAAOP,MAAKknE,cACtC,SAAY59D,GACVtJ,KAAKknE,SAAWlnE,KAAKu9D,oBAAoBv9D,KAAK65D,aAAa2D,YAAYl0D,qCAsCzEw3D,EAAFvgE,UAAAkF,mBAAE,WACEzF,KAAK8mE,SAIPhG,EAAFvgE,UAAAumE,MAAE,WAAA,GAAF1mE,GAAAJ,IACIA,MAAKupE,WAAavpE,KAAK65D,aAAawN,QAAQrnE,KAAK65D,aAAa0M,QAC9D,IAAIiD,GAAaxpE,KAAK65D,aAAawN,QAAQrnE,KAAKsmE,aAC5CmD,EAAeD,EApGK,EAqGxBxpE,MAAK0pE,SACL,KAAK,GAAI/gE,GAAI,EAAG8lD,KAAoB9lD,EAtGZ,GAsG8BA,IACpD8lD,EAAIlnD,KAAKiiE,EAAaC,EAAe9gE,GArGhB,GAsGjB8lD,EAAIjuD,SACNR,KAAK0pE,OAAOniE,KAAKknD,EAAI1kD,IAAI,SAAA4/D,GAAQ,MAAAvpE,GAAKwpE,mBAAmBD,MACzDlb,KAGJzuD,MAAKkT,mBAAmB/B,gBAI1B2vD,EAAFvgE,UAAAspE,cAAE,SAAcF,GACZ3pE,KAAKi8D,aAAaxqD,KAAKzR,KAAK65D,aAAa6N,WAAWiC,EAAM,EAAG,GAC7D,IAAIG,GAAQ9pE,KAAK65D,aAAa2N,SAASxnE,KAAKsnE,YACxCsB,EACA5oE,KAAK65D,aAAaiO,kBAAkB9nE,KAAK65D,aAAa6N,WAAWiC,EAAMG,EAAO,GAClF9pE,MAAKylE,eAAeh0D,KAAKzR,KAAK65D,aAAa6N,WAAWiC,EAAMG,EACxDv+D,KAAKE,IAAIzL,KAAK65D,aAAagO,QAAQ7nE,KAAKsnE,YAAasB,MAI3D9H,EAAFvgE,UAAAonE,2BAAE,SAA2BjzD,GAKzB,GAAM8xD,GAAgBxmE,KAAKsmE,YACrBptC,EAAQl5B,KAAKksC,QAEnB,QAAQx3B,EAAMC,SACZ,IAAKwZ,GAAAA,WACHnuB,KAAKsnE,WAAatnE,KAAK65D,aAAakO,iBAAiB/nE,KAAKsmE,YAAaptC,EAAQ,GAAK,EACpF,MACF,KAAK7K,GAAAA,YACHruB,KAAKsnE,WAAatnE,KAAK65D,aAAakO,iBAAiB/nE,KAAKsmE,YAAaptC,GAAS,EAAI,EACpF,MACF,KAAK9K,GAAAA,SACHpuB,KAAKsnE,WAAatnE,KAAK65D,aAAakO,iBAAiB/nE,KAAKsmE,aAzIvC,EA0InB,MACF,KAAKh4C,GAAAA,WACHtuB,KAAKsnE,WAAatnE,KAAK65D,aAAakO,iBAAiB/nE,KAAKsmE,YA5IvC,EA6InB,MACF,KAAK1xD,GAAAA,KACH5U,KAAKsnE,WAAatnE,KAAK65D,aAAakO,iBAAiB/nE,KAAKsmE,aACrDtmE,KAAK65D,aAAawN,QAAQrnE,KAAKsmE,aAlJhB,GAmJpB,MACF,KAAKvxD,GAAAA,IACH/U,KAAKsnE,WAAatnE,KAAK65D,aAAakO,iBAAiB/nE,KAAKsmE,YArJtC,GAsJDtmE,KAAK65D,aAAawN,QAAQrnE,KAAKsmE,aAtJ9B,GAsJ4D,EAChF,MACF,KAAKt4C,GAAAA,QACHhuB,KAAKsnE,WACDtnE,KAAK65D,aAAakO,iBACd/nE,KAAKsmE,YAAa5xD,EAAM4xC,QAAS,KA3JrB,GA4JpB,MACF,KAAKp4B,GAAAA,UACHluB,KAAKsnE,WACDtnE,KAAK65D,aAAakO,iBACd/nE,KAAKsmE,YAAa5xD,EAAM4xC,OAASyjB,IAhKrB,GAiKpB,MACF,KAAK90D,GAAAA,MACL,IAAKC,GAAAA,MACHlV,KAAK6pE,cAAc7pE,KAAK65D,aAAawN,QAAQrnE,KAAKsmE,aAClD,MACF,SAEE,OAGAtmE,KAAK65D,aAAa4D,YAAY+I,EAAexmE,KAAKsnE,aACpDtnE,KAAK2lE,iBAAiBl0D,KAAKzR,KAAKsnE,YAGlCtnE,KAAKkoE,mBAELxzD,EAAMI,kBAGRgsD,EAAFvgE,UAAAypE,eAAE,WACE,MAAOhqE,MAAK65D,aAAawN,QAAQrnE,KAAKsnE,YArLd,IAyL1BxG,EAAFvgE,UAAA2nE,iBAAE,WACEloE,KAAK2oE,iBAAiBT,oBAIhBpH,EAAVvgE,UAAAqpE,mBAAA,SAA6BD,GACzB,GAAIM,GAAWjqE,KAAK65D,aAAaqQ,YAAYlqE,KAAK65D,aAAa6N,WAAWiC,EAAM,EAAG,GACnF,OAAO,IAAIR,IAAgBQ,EAAMM,EAAUA,EAAUjqE,KAAKmqE,kBAAkBR,KAItE7I,EAAVvgE,UAAA4pE,kBAAA,SAA4BR,GAExB,OAAahnE,KAATgnE,GAA+B,OAATA,GACrB3pE,KAAK4mE,SAAW+C,EAAO3pE,KAAK65D,aAAawN,QAAQrnE,KAAK4mE,UACtD5mE,KAAK2mE,SAAWgD,EAAO3pE,KAAK65D,aAAawN,QAAQrnE,KAAK2mE,SACzD,OAAO,CAIT,KAAK3mE,KAAKioE,WACR,OAAO,CAMT,KAAK,GAHCmC,GAAcpqE,KAAK65D,aAAa6N,WAAWiC,EAAM,EAAG,GAGjDnP,EAAO4P,EAAapqE,KAAK65D,aAAawN,QAAQ7M,IAASmP,EAC9DnP,EAAOx6D,KAAK65D,aAAa+N,gBAAgBpN,EAAM,GAC/C,GAAIx6D,KAAKioE,WAAWzN,GAClB,OAAO,CAIX,QAAO,GAODsG,EAAVvgE,UAAAg9D,oBAAA,SAA8B/yC,GAC1B,MAAQxqB,MAAK65D,aAAauF,eAAe50C,IAAQxqB,KAAK65D,aAAa0E,QAAQ/zC,GAAQA,EAAM,MAInFs2C,EAAVvgE,UAAA2rC,kBACI,MAAOlsC,MAAK0Q,MAA4B,QAApB1Q,KAAK0Q,KAAKpH,sBA/NlC7H,KAACC,EAAAA,UAADC,OAAAC,SAAA,sBACEE,SAAU,odACVD,SAAU,mBACVW,cAAFC,EAAAA,kBAAAC,KACEL,gBAAFC,EAAAA,wBAAAC,mHA3BAd,KAAE0W,EAAAA,eAAFvV,aAAAnB,KAAA2W,EAAAA,cAUA0oD,EAAA/9D,sEAuBA4jE,UAAAllE,KAAA2D,EAAAA,QAeAwhE,UAAAnlE,KAAA2D,EAAAA,QASA6iE,aAAAxmE,KAAA2D,EAAAA,QAQAqgE,iBAAAhkE,KAAAuQ,EAAAA,SAQAiqD,eAAAx6D,KAAAuQ,EAAAA,SAGA2zD,mBAAAlkE,KAAAuQ,EAAAA,SAGA22D,mBAAAlnE,KAAA+M,EAAAA,UAAA7M,MAAAg/D,OAMAG,mBCYE,QAAFD,GAAsB3tD,EACsCupD,EAC3B5C,EACCnpD,GAC9B,GAJkB1Q,KAAtBkT,mBAAsBA,EACsClT,KAA5Dy8D,aAA4DA,EAC3Bz8D,KAAjC65D,aAAiCA,EACC75D,KAAlC0Q,KAAkCA,EA7BlC1Q,KAAAylE,eAAuD,GAAI30D,GAAAA,aAG3D9Q,KAAAk8D,cAAsD,GAAIprD,GAAAA,aAG1D9Q,KAAA2lE,iBAAyD,GAAI70D,GAAAA,cAwBpD9Q,KAAK65D,aACR,KAAMC,GAA2B,cAEnC,KAAK95D,KAAKy8D,aACR,KAAM3C,GAA2B,mBAGnC95D,MAAKsmE,YAActmE,KAAK65D,aAAa0M,QA5BzC,MAnDEn9D,QAAFC,eACMw3D,EADNtgE,UAAA,kBAAE,WACsB,MAAOP,MAAKsmE,iBAClC,SAAeh9D,GACb,GAAIk9D,GAAgBxmE,KAAKsmE,YACnBG,EACFzmE,KAAKu9D,oBAAoBv9D,KAAK65D,aAAa2D,YAAYl0D,KAAWtJ,KAAK65D,aAAa0M,OACxFvmE,MAAKsmE,YAActmE,KAAK65D,aAAa6M,UAAUD,EAAWzmE,KAAK2mE,QAAS3mE,KAAK4mE,SACzE5mE,KAAK65D,aAAawN,QAAQb,KAAmBxmE,KAAK65D,aAAawN,QAAQrnE,KAAKsmE,cAC9EtmE,KAAK8mE,yCAMT19D,OAAFC,eACMw3D,EADNtgE,UAAA,gBAAE,WAC2B,MAAOP,MAAK+nC,eACvC,SAAaz+B,GACXtJ,KAAK+nC,UAAY/nC,KAAKu9D,oBAAoBv9D,KAAK65D,aAAa2D,YAAYl0D,IACxEtJ,KAAKqqE,eAAiBrqE,KAAKsqE,uBAAuBtqE,KAAK+nC,4CAKzD3+B,OAAFC,eACMw3D,EADNtgE,UAAA,eAAE,WAC0B,MAAOP,MAAKinE,cACtC,SAAY39D,GACVtJ,KAAKinE,SAAWjnE,KAAKu9D,oBAAoBv9D,KAAK65D,aAAa2D,YAAYl0D,qCAKzEF,OAAFC,eACMw3D,EADNtgE,UAAA,eAAE,WAC0B,MAAOP,MAAKknE,cACtC,SAAY59D,GACVtJ,KAAKknE,SAAWlnE,KAAKu9D,oBAAoBv9D,KAAK65D,aAAa2D,YAAYl0D,qCAgDzEu3D,EAAFtgE,UAAAkF,mBAAE,WACEzF,KAAK8mE,SAIPjG,EAAFtgE,UAAAgqE,eAAE,SAAeT,GACb,GAAMU,GACAxqE,KAAK65D,aAAa6N,WAAW1nE,KAAK65D,aAAawN,QAAQrnE,KAAKsnE,YAAawC,EAAO,EAEtF9pE,MAAKk8D,cAAczqD,KAAK+4D,EAExB,IAAM5B,GAAc5oE,KAAK65D,aAAaiO,kBAAkB0C,EAExDxqE,MAAKylE,eAAeh0D,KAAKzR,KAAK65D,aAAa6N,WACvC1nE,KAAK65D,aAAawN,QAAQrnE,KAAKsnE,YAAawC,EAC5Cv+D,KAAKE,IAAIzL,KAAK65D,aAAagO,QAAQ7nE,KAAKsnE,YAAasB,MAI3D/H,EAAFtgE,UAAAonE,2BAAE,SAA2BjzD,GAKzB,GAAM8xD,GAAgBxmE,KAAKsmE,YACrBptC,EAAQl5B,KAAKksC,QAEnB,QAAQx3B,EAAMC,SACZ,IAAKwZ,GAAAA,WACHnuB,KAAKsnE,WAAatnE,KAAK65D,aAAamO,kBAAkBhoE,KAAKsmE,YAAaptC,EAAQ,GAAK,EACrF,MACF,KAAK7K,GAAAA,YACHruB,KAAKsnE,WAAatnE,KAAK65D,aAAamO,kBAAkBhoE,KAAKsmE,YAAaptC,GAAS,EAAI,EACrF,MACF,KAAK9K,GAAAA,SACHpuB,KAAKsnE,WAAatnE,KAAK65D,aAAamO,kBAAkBhoE,KAAKsmE,aAAc,EACzE,MACF,KAAKh4C,GAAAA,WACHtuB,KAAKsnE,WAAatnE,KAAK65D,aAAamO,kBAAkBhoE,KAAKsmE,YAAa,EACxE,MACF,KAAK1xD,GAAAA,KACH5U,KAAKsnE,WAAatnE,KAAK65D,aAAamO,kBAAkBhoE,KAAKsmE,aACtDtmE,KAAK65D,aAAa2N,SAASxnE,KAAKsmE,aACrC,MACF,KAAKvxD,GAAAA,IACH/U,KAAKsnE,WAAatnE,KAAK65D,aAAamO,kBAAkBhoE,KAAKsmE,YACvD,GAAKtmE,KAAK65D,aAAa2N,SAASxnE,KAAKsmE,aACzC,MACF,KAAKt4C,GAAAA,QACHhuB,KAAKsnE,WACDtnE,KAAK65D,aAAakO,iBAAiB/nE,KAAKsmE,YAAa5xD,EAAM4xC,QAAU,IAAM,EAC/E,MACF,KAAKp4B,GAAAA,UACHluB,KAAKsnE,WACDtnE,KAAK65D,aAAakO,iBAAiB/nE,KAAKsmE,YAAa5xD,EAAM4xC,OAAS,GAAK,EAC7E,MACF,KAAKrxC,GAAAA,MACL,IAAKC,GAAAA,MACHlV,KAAKuqE,eAAevqE,KAAK65D,aAAa2N,SAASxnE,KAAKsmE,aACpD,MACF,SAEE,OAGAtmE,KAAK65D,aAAa4D,YAAY+I,EAAexmE,KAAKsnE,aACpDtnE,KAAK2lE,iBAAiBl0D,KAAKzR,KAAKsnE,YAGlCtnE,KAAKkoE,mBAELxzD,EAAMI,kBAIR+rD,EAAFtgE,UAAAumE,MAAE,WAAA,GAAF1mE,GAAAJ,IACIA,MAAKqqE,eAAiBrqE,KAAKsqE,uBAAuBtqE,KAAKijB,UACvDjjB,KAAKyqE,YAAczqE,KAAKsqE,uBAAuBtqE,KAAK65D,aAAa0M,SACjEvmE,KAAK0qE,WAAa1qE,KAAK65D,aAAaqQ,YAAYlqE,KAAKsnE,WAErD,IAAIqD,GAAa3qE,KAAK65D,aAAawO,cAAc,QAEjDroE,MAAK4qE,UAAY,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,KAAK7gE,IAAI,SAAA0kD,GAAO,MAAAA,GAAI1kD,IACvE,SAAA+/D,GAAS,MAAA1pE,GAAKyqE,oBAAoBf,EAAOa,EAAWb,QACxD9pE,KAAKkT,mBAAmB/B,gBAI1B0vD,EAAFtgE,UAAA2nE,iBAAE,WACEloE,KAAK2oE,iBAAiBT,oBAOhBrH,EAAVtgE,UAAA+pE,uBAAA,SAAiC9P,GAC7B,MAAOA,IAAQx6D,KAAK65D,aAAawN,QAAQ7M,IAASx6D,KAAK65D,aAAawN,QAAQrnE,KAAKsnE,YAC7EtnE,KAAK65D,aAAa2N,SAAShN,GAAQ,MAIjCqG,EAAVtgE,UAAAsqE,oBAAA,SAA8Bf,EAAegB,GACzC,GAAIr8D,GAAYzO,KAAK65D,aAAaqF,OAC9Bl/D,KAAK65D,aAAa6N,WAAW1nE,KAAK65D,aAAawN,QAAQrnE,KAAKsnE,YAAawC,EAAO,GAChF9pE,KAAKy8D,aAAa0C,QAAQ4L,mBAC9B,OAAO,IAAI5B,IACPW,EAAOgB,EAAUxC,oBAAqB75D,EAAWzO,KAAKgrE,mBAAmBlB,KAIvEjJ,EAAVtgE,UAAAyqE,mBAAA,SAA6BlB,GAEzB,GAAMN,GAAaxpE,KAAK65D,aAAawN,QAAQrnE,KAAKsnE,WAElD,QAAc3kE,KAAVmnE,GAAiC,OAAVA,GACvB9pE,KAAKirE,4BAA4BzB,EAAYM,IAC7C9pE,KAAKkrE,6BAA6B1B,EAAYM,GAChD,OAAO,CAGT,KAAK9pE,KAAKioE,WACR,OAAO,CAMT,KAAK,GAHCM,GAAevoE,KAAK65D,aAAa6N,WAAW8B,EAAYM,EAAO,GAG5DtP,EAAO+N,EAAcvoE,KAAK65D,aAAa2N,SAAShN,IAASsP,EAC7DtP,EAAOx6D,KAAK65D,aAAa+N,gBAAgBpN,EAAM,GAClD,GAAIx6D,KAAKioE,WAAWzN,GAClB,OAAO,CAIX,QAAO,GAODqG,EAAVtgE,UAAA0qE,4BAAA,SAAsCtB,EAAcG,GAChD,GAAI9pE,KAAK4mE,QAAS,CAChB,GAAMuE,GAAUnrE,KAAK65D,aAAawN,QAAQrnE,KAAK4mE,SACzCwE,EAAWprE,KAAK65D,aAAa2N,SAASxnE,KAAK4mE,QAEjD,OAAO+C,GAAOwB,GAAYxB,IAASwB,GAAWrB,EAAQsB,EAGxD,OAAO,GAODvK,EAAVtgE,UAAA2qE,6BAAA,SAAuCvB,EAAcG,GACjD,GAAI9pE,KAAK2mE,QAAS,CAChB,GAAM0E,GAAUrrE,KAAK65D,aAAawN,QAAQrnE,KAAK2mE,SACzC2E,EAAWtrE,KAAK65D,aAAa2N,SAASxnE,KAAK2mE,QAEjD,OAAOgD,GAAO0B,GAAY1B,IAAS0B,GAAWvB,EAAQwB,EAGxD,OAAO,GAODzK,EAAVtgE,UAAAg9D,oBAAA,SAA8B/yC,GAC1B,MAAQxqB,MAAK65D,aAAauF,eAAe50C,IAAQxqB,KAAK65D,aAAa0E,QAAQ/zC,GAAQA,EAAM,MAInFq2C,EAAVtgE,UAAA2rC,kBACI,MAAOlsC,MAAK0Q,MAA4B,QAApB1Q,KAAK0Q,KAAKpH,sBA9QlC7H,KAACC,EAAAA,UAADC,OAAAC,SAAA,gBACEE,SAAU,0hBACVD,SAAU,cACVW,cAAFC,EAAAA,kBAAAC,KACEL,gBAAFC,EAAAA,wBAAAC,iJAvBAd,KAAEq6D,GAAFl5D,aAAAnB,KAAA2W,EAAAA,aAkGA3W,KAAA0W,EAAAA,eAAAvV,aAAAnB,KAAA2W,EAAAA,cAvFAyoD,EAAQ99D,sEAkBR4jE,UAAAllE,KAAA2D,EAAAA,QAcAwhE,UAAAnlE,KAAA2D,EAAAA,QASA6iE,aAAAxmE,KAAA2D,EAAAA,QAQAqgE,iBAAAhkE,KAAAuQ,EAAAA,SAQAkqD,gBAAAz6D,KAAAuQ,EAAAA,SAGA2zD,mBAAAlkE,KAAAuQ,EAAAA,SAGA22D,mBAAAlnE,KAAA+M,EAAAA,UAAA7M,MAAAg/D,OAMAE,mBCpDE,QAAFE,GAAsBthD,EACsC8rD,EAC1B1R,EAC0B4C,EAC9C9rD,GAJQ3Q,KAAtByf,MAAsBA,EACsCzf,KAA5DurE,SAA4DA,EAC1BvrE,KAAlC65D,aAAkCA,EAC0B75D,KAA5Dy8D,aAA4DA,EAGxDz8D,KAAKurE,SAAS1mB,aAAa1kD,UAAU,WAAM,MAAAwQ,GAAkBQ,iBA5CjE,MAgDE/H,QAAFC,eAAM03D,EAANxgE,UAAA,wBAAE,WACE,GAAiC,SAA7BP,KAAKurE,SAASC,YAChB,MAAOxrE,MAAK65D,aACPqF,OAAOl/D,KAAKurE,SAASjE,WAAYtnE,KAAKy8D,aAAa0C,QAAQsM,gBACvDnD,mBAEX,IAAiC,QAA7BtoE,KAAKurE,SAASC,YAChB,MAAOxrE,MAAK65D,aAAaqQ,YAAYlqE,KAAKurE,SAASjE,WAErD,IAAMkC,GAAaxpE,KAAK65D,aAAawN,QAAQrnE,KAAKurE,SAASjE,WAK3D,OAJwBtnE,MAAK65D,aAAaqQ,YACtClqE,KAAK65D,aAAa6N,WAAW8B,EAAaA,EAAa,GAAI,EAAG,IAGtE,MAF2BxpE,KAAK65D,aAAaqQ,YACrClqE,KAAK65D,aAAa6N,WAAW8B,EFrCT,GEqCqC,EAAIA,EAAa,GAAI,EAAG,qCAIvFpgE,OAAFC,eAAM03D,EAANxgE,UAAA,yBAAE,WACE,MAAoC,SAA7BP,KAAKurE,SAASC,YACjBxrE,KAAKyf,MAAMisD,2BAA6B1rE,KAAKyf,MAAMksD,wDAIzDviE,OAAFC,eAAM03D,EAANxgE,UAAA,uBAAE,WACE,OACEupE,MAAS9pE,KAAKyf,MAAMmsD,eACpBjC,KAAQ3pE,KAAKyf,MAAMosD,cACnBC,aAAc9rE,KAAKyf,MAAMssD,oBACzB/rE,KAAKurE,SAASC,8CAIlBpiE,OAAFC,eAAM03D,EAANxgE,UAAA,uBAAE,WACE,OACEupE,MAAS9pE,KAAKyf,MAAMusD,eACpBrC,KAAQ3pE,KAAKyf,MAAMwsD,cACnBH,aAAc9rE,KAAKyf,MAAMysD,oBACzBlsE,KAAKurE,SAASC,8CAIlBzK,EAAFxgE,UAAA4rE,qBAAE,WACEnsE,KAAKurE,SAASC,YAA2C,SAA7BxrE,KAAKurE,SAASC,YAAyB,aAAe,SAIpFzK,EAAFxgE,UAAA6rE,gBAAE,WACEpsE,KAAKurE,SAASjE,WAA0C,SAA7BtnE,KAAKurE,SAASC,YACrCxrE,KAAK65D,aAAamO,kBAAkBhoE,KAAKurE,SAASjE,YAAa,GAC3DtnE,KAAK65D,aAAakO,iBACd/nE,KAAKurE,SAASjE,WAAyC,QAA7BtnE,KAAKurE,SAASC,aAAyB,GF1ErD,KE+E1BzK,EAAFxgE,UAAA8rE,YAAE,WACErsE,KAAKurE,SAASjE,WAA0C,SAA7BtnE,KAAKurE,SAASC,YACrCxrE,KAAK65D,aAAamO,kBAAkBhoE,KAAKurE,SAASjE,WAAY,GAC1DtnE,KAAK65D,aAAakO,iBACd/nE,KAAKurE,SAASjE,WACmB,QAA7BtnE,KAAKurE,SAASC,YAAwB,EFpF9B,KEyF1BzK,EAAFxgE,UAAA+rE,gBAAE,WACE,OAAKtsE,KAAKurE,SAAS5E,WAGX3mE,KAAKurE,SAAS5E,UACjB3mE,KAAKusE,YAAYvsE,KAAKurE,SAASjE,WAAYtnE,KAAKurE,SAAS5E,WAIhE5F,EAAFxgE,UAAAisE,YAAE,WACE,OAAQxsE,KAAKurE,SAAS3E,UACjB5mE,KAAKusE,YAAYvsE,KAAKurE,SAASjE,WAAYtnE,KAAKurE,SAAS3E,UAIxD7F,EAAVxgE,UAAAgsE,YAAA,SAAsBE,EAAUC,GAC5B,MAAiC,SAA7B1sE,KAAKurE,SAASC,YACTxrE,KAAK65D,aAAawN,QAAQoF,IAAUzsE,KAAK65D,aAAawN,QAAQqF,IACjE1sE,KAAK65D,aAAa2N,SAASiF,IAAUzsE,KAAK65D,aAAa2N,SAASkF,GAErC,QAA7B1sE,KAAKurE,SAASC,YACTxrE,KAAK65D,aAAawN,QAAQoF,IAAUzsE,KAAK65D,aAAawN,QAAQqF,GAGhEnhE,KAAK0hC,MAAMjtC,KAAK65D,aAAawN,QAAQoF,GFjHpB,KEkHpBlhE,KAAK0hC,MAAMjtC,KAAK65D,aAAawN,QAAQqF,GFlHjB,oBEK5BjrE,KAACC,EAAAA,UAADC,OAAAC,SAAA,sBACEE,SAAU,0vBACVD,SAAU,oBACVW,cAAFC,EAAAA,kBAAAC,KACEL,gBAAFC,EAAAA,wBAAAC,2IAhBAd,KAAQq6D,GAARl5D,aAAAnB,KAAA2W,EAAAA,aAsBA3W,SAAsEkB,GAAWC,aAAjFnB,KAAA2W,EAAAA,WAAA3W,KAAAoB,EAAAA,OAAiClB,MAAjCi+D,QAzBAn+D,KAAQsQ,EAAAA,qBAdRgvD,qDAuQA/gE,KAAA65D,aAAAA,EAAE75D,KAAFy8D,aAAAA,EACkCz8D,KAAlCkT,mBAAAA,kQAHA,KAAA4mD,GAAA,cAQA,KAAA95D,KAAYy8D,aACZ,KAAA3C,GAAA,mBAGA95D,MAAA23C,aAAAl4B,EAAAvf,QAAAC,UAAA,WACA+S,EAAA/B,eAEQ/Q,EAARykD,aAAAt7C,SA7CA,MAgDAH,QAAOC,eAAPq3D,EAAAngE,UAAA,WAxGAwc,+HAGAE,YAAA,EACAC,cAAA,kDAOAH,iIAGAE,YAAA,EACAC,cAAA,iDAIAH,+HAGAE,YAAA,EACAC,cAAA,iDAIAH,+HAGAE,YAAA,EACAC,cAAA,oMAsCAld,KAAA6kD,aAAAt7C,QAEA0T,YAAA,EACAC,cAAA,qDAIAH,6EACA/c,KAAA2sE,sBAAA,GAEA1vD,YAAA,EACAC,cAAA,yHA2BAld,KAAAsnE,WAAAtnE,KAAAg8D,SAAAh8D,KAAA65D,aAAA0M,QAEIvmE,KAAK4sE,aAAT5sE,KAAA6sE,iFAMA7sE,KAAA2sE,sBAAA,EACQ3sE,KAAK8sE,uFAMb9sE,KAAA6kD,aAAA12C,gDAKA,GAAA6C,GAAoC9Q,EAApC,SAAAA,EAAA,SAAAA,EAAA,iCAGQ,GAAR6sE,GAAmB/sE,KAAnBgtE,kFAQAhtE,KAAO6kD,aAAPt7C,4IAWA,SAAAvJ,KAAAwrE,YAAAxrE,KAAAitE,qEACAxnE,yGAOAzF,KAAAylE,eAAAh0D,KAAA+oD,8RAqBAx6D,KAAAwrE,YAAAuB,0OAeArM,EAAA99D,6iCA9NAb,QAAA,67CACEE,MACFC,MAAA,gBAEEL,SAAF,cACEW,cAAFC,EAAAA,kBAAAC,KACAL,gBAAAC,EAAAA,wBAAAC,WAIAm+D,EAAA17C,eAAA,WAAA,QACAvjB,KAAAu/D,iJA/IAN,EAAQ39D,gBA2PRmqE,kBAAAzrE,KAAA2D,EAAAA,QAzQA42D,UAAAv6D,KAAA2D,EAAAA,6DAgKAuhE,UAAAllE,KAAA2D,EAAAA,QAeAwhE,UAAAnlE,KAAG2D,EAAAA,QAQH6iE,aAAAxmE,KAAA2D,EAAAA,QAGAqgE,iBAAGhkE,KAAHuQ,EAAAA,SAQAiqD,eAAAx6D,KAAQuQ,EAAAA,SAQRkqD,gBAAGz6D,KAAHuQ,EAAAA,SAQA0zD,iBAAAjkE,KAAAuQ,EAAAA,SAGAi7D,YAAAxrE,KAAA+M,EAAAA,UAAS7M,MAATi/D,MAMAuM,WAAA1rE,KAAA+M,EAAAA,UAAA7M,MAAAk/D,MAMAuM,gBAAA3rE,KAAG+M,EAAAA,UAAH7M,MAAAm/D,OAMAJ,KCnOa2M,IAKX19B,eAAgB9gC,EAAAA,QAAQ,kBACtBC,EAAAA,MAAM,OAAQrC,EAAAA,OACZ+nB,QAAS,EACTzlB,UAAW,mBAEbE,EAAAA,WAAW,gBAAkBC,EAAAA,QAAQ,mCAAoCzC,EAAAA,OACvE+nB,QAAS,EACTzlB,UAAW,kBAEbE,EAAAA,WAAW,YAAaC,EAAAA,QAAQ,eAAgBzC,EAAAA,OAAO+nB,QAAS,QAIlE84C,eAAgBz+D,EAAAA,QAAQ,kBACtBC,EAAAA,MAAM,OAAQrC,EAAAA,OAAO+nB,QAAS,KAC9B1lB,EAAAA,MAAM,QAASrC,EAAAA,OAAO+nB,QAAS,KAI/BvlB,EAAAA,WAAW,YAAaC,EAAAA,QAAQ,oDjBahCq+D,GAAgB,EAGP1R,GACT,GAAIjwD,GAAAA,eAAqC,kCAQhCq1D,IACXn8D,QAAS+2D,GACT38C,MAAOua,EAAAA,SACPra,WAAYouD,IAKdC,GAAA,WACE,QAAFA,GAAqB9sE,GAAAX,KAArBW,YAAqBA,EA3ErB,MAAA8sE,MA6EaC,GACTj1D,EAAWg1D,mBAwCb,QAAFrS,GAAc9oD,GACd,MAAIhO,GAAJ5D,KAAAV,KAAUsS,IAAVtS,KATA,MAJ6CyE,GAA7C22D,EAAA92D,GAgBE82D,EAAF76D,UAAA6d,gBAAE,WACEpe,KAAK2tE,UAAUb,kCApCnBrrE,KAACC,EAAAA,UAADC,OAAAC,SAAA,yBACEE,SAAU,wjBACVC,QAAF,shBACEE,MACFC,MAAA,yBACM0rE,oBAAN,UACIC,uCAAJ,sBAEA/7D,YACAu7D,GAAA19B,eACA09B,GAAAC,gBAEAzrE,SAAA,uBACAW,cAAAC,EAAAA,kBAAAC,KACEL,gBAAFC,EAAAA,wBAAAC,OACEP,QAAF,sEA7EAo5D,EAAAr4D,0DAqFAq4D,mEAoKAp7D,KAAAm2B,SAAAA,EAAsBn2B,KAAtBiM,QAAsBA,EACAjM,KAAtByN,kBAAAA;yBACsBzN,KAAtB6xC,gBAAAA,EACsB7xC,KAAtB65D,aAAAA,EAC8D75D,KAA9D0Q,KAAAA,EACkC1Q,KAAlCmB,UAA8CA,kbAP9C,KAAA24D,GAA8C,eA3D9C,MAuEA1wD,QAAAC,eAAA0wD,EAAAx5D,UAAA,WA3IAwc,+FAIAyd,0FAGAvd,YAAA,EACAC,cAAA,+CAOAH,oCAAA/c,KAAAg6D,iBAAAh6D,KAAAg6D,iBAAAC,uBAAAt3D,KAGA63B,+BAGAvd,YAAA,EACAC,cAAA,gJAUAD,YAAA,EACAC,cAAA,kDAIAH,qEAAA/c,KAAAg6D,iBAAAxjD,WAAAxW,KAAAkoC,WAGA1N,gBAEA,GAAA6L,GAAA/sB,EAAAA,sBAAAhQ,wBACUtJ,KAAVkoC,UAAA7B,EAEQrmC,KAARk6D,gBAAA3wD,KAAA88B,KAGAppB,YAAA,EACAC,cAAA,gDA0BAH,8FAEEG,cAAF,mDAOAH,gGACEG,cAAF,kDAIAH,wEACAE,YAAA,EACAC,cAAA,kDAGAH,wEACAE,YAAA,EACAC,cAAA,qDAAAH,gFAGAE,YAAA,EACAC,cAAA,oDA0CAld,KAAAm6D,mBAAA9pD,cACIrQ,KAAKk6D,gBAAT/rD,WACQnO,KAARo6D,YACQp6D,KAARo6D,UAAA7mC,UAEQvzB,KAAKq6D,mBAAb,sCAOA,GAAAvtC,GAAA9sB,KAAA+nC,2BACA/nC,KAAA65D,aAAAS,SAAAxtC,EAAA9sB,KAAA+nC,YACQ/nC,KAARu6D,iBAAAhxD,KAAAixD,qLAoBA,IAAAx6D,KAAAg6D,iBAAA,KAAAtkC,OAAA,8DAEA11B,MAAAg6D,iBAAA3qC,EACArvB,KAAAm6D,mBACQn6D,KAARg6D,iBAAAS,aAAAt6D,UAAA,SAAAmJ,GAAA,MAAAlJ,GAAA2nC,UAAAz+B,mEAQA,IAAAtJ,KAAAg6D,iBACA,KAAAtkC,OAAA,+DAEM11B,MAANmB,YACAnB,KAAA06D,0BAAA16D,KAAAmB,UAAAo7B,eAEAv8B,KAAA26D,QAAA36D,KAAA46D,gBAAA56D,KAAA66D,eACA76D,KAAA+8B,SAAA,EAEI/8B,KAAK86D,aAATrpD,gDAMA,IAAAzR,KAAA+8B,QAAA,CAEM/8B,KAANo6D,WAAAp6D,KAAAo6D,UAAApqD,eACAhQ,KAAAo6D,UAAAhqD,SAEMpQ,KAAK+6D,aACX/6D,KAAA+6D,WAAAj/B,QACQ97B,KAAK+6D,WAAb,MAEM/6D,KAAKg7D,iBAAXh7D,KAAAg7D,gBAAAlgB,YACA96C,KAAAg7D,gBAAA5qD,QAGA,IAAA6qD,GAAA,oCAKU76D,EAAK86D,aAAfzpD,OACQrR,EAAKs6D,0BAAb,MAGA16D,MAAA06D,2BACA,kBAAA16D,MAAA06D,0BAAAnoD,6DAWA0oD,+FAYAj7D,KAAA+6D,WAAA/6D,KAAAm7D,QAAAlkC,KAAAmkC,IACAr6C,UAAA/gB,KAAA0Q,KAAA1Q,KAAA0Q,KAAApH,MAAA,MAEQ+F,iBAAkBrP,KAA1ByN,kBACM+nB,WAAN,0BAEAx1B,KAAA+6D,WAAkBM,cAAlBl7D,UAAA,WAAA,MAAAC,GAAA07B,UACA97B,KAAA+6D,WAAAO,kBAAAC,WAAAv7D,KAEIA,KAAKw7D,0JAQTx7D,KAAAo6D,WAEAp6D,KAAAy7D,eAGAz7D,KAAAo6D,UAAApqD,gBACAhQ,KAAAq6D,mBAAAr6D,KAAAo6D,UAAAnqD,OAAAjQ,KAAAg7D,iBAEQh7D,KAAKq6D,mBAAbviC,SAAAyjC,WAAAv7D,KACMA,KAAKw7D,YAELx7D,KAAKiM,QAAXqyC,SAAA5qB,eAAA9rB,KAAAC,EAAAA,KAAA,IAAA1H,UAAA,uKAWUo9C,aAAa,EACjBJ,cAAN,mCACMp8B,UAAW/gB,KAAjB0Q,KACMgkC,eAAN10C,KAAA6xC,kBACMrc,WAAN,wBAEAx1B,MAAAo6D,UAAAp6D,KAAAm2B,SAAAqD,OAAwCV,GACxC94B,KAAAo6D,UAAAzhC,eAAAq+B,aAAA,OAAA,UAEIntD,EAAAA,MAAJ7J,KAAAo6D,UAAyBr8B,gBAAiB/9B,KAA1Co6D,UAAyD3hC,cAAzDz4B,KAAAo6D,UAAAsB,gBAAA9zD,KAAA9G,EAAAA,OAAA,SAAA4T,GAGA,MACWA,GADXC,UAAAi/B,EAAAA,iEAKAzzC,UAAA,WAAiC,MAAjCC,GAAA07B,sKAQAmY,sBAAA,2BACOC,wBAAP,GACOC,mBAAP,GACOwnB,UAAP,GACO5mB,gBAEPK,QAAA,QACAC,QAAA,SACUI,SAAV,QACUC,SAAV,QAGAN,QAAA,QACAC,QAAA,MACUI,SAAV,QACUC,SAAV,WAGAN,QAAA,MACAC,QAAA,SACUI,SAAV,MACUC,SAAV,QAGAN,QAAA,MACAC,QAAA,MACUI,SAAV,MACUC,SAAV,sNAiBU11C,KAAKq6D,mBAAfviC,SAAAsvB,MAAAA,GAEMpnD,KAAK+6D,aACX/6D,KAAA+6D,WAAAO,kBAAAlU,MAAAA,IAGA2S,EAAAn3D,2EAxXAf,SAAA,gBACEQ,gBAAiBC,EAAAA,wBAAnBC,OACEC,cAAFC,EAAAA,kBAAAC,SAIAq3D,EAAA/0C,eAAiB,WAAjB,QACAvjB,KAAAm6D,gEA9FAn6D,SAAQkB,GAARC,aAAAnB,KAAAoB,EAAAA,OAAAlB,MAAAk6D,QAjCAp6D,KAAEq6D,GAAFl5D,aAAAnB,KAAA2W,EAAAA,aAkBA3W,KAAE0W,EAAAA,eAAFvV,aAAAnB,KAAA2W,EAAAA,aAKA3W,SAAEkB,GAAFC,aAAAnB,KAAA2W,EAAAA,WAAA3W,KAAAoB,EAAAA,OAAAlB,MAAAmB,EAAAA,eAMAi3D,EAAAh3D,gBAjCAg5D,0BAAAt6D,KAAA2D,EAAAA,QAiRA42D,UAAAv6D,KAAA2D,EAAAA,0DA3IAu1D,UAAAl5D,KAAA2D,EAAAA,QAGAoR,WAAA/U,KAAA2D,EAAAA,QAYA62D,eAAAx6D,KAAAuQ,EAAAA,SAGAkqD,gBAAAz6D,KAAAuQ,EAAAA,SAcAwjB,aAAA/zB,KAAA2D,EAAAA,QAQA01D,eAAAr5D,KAAAuQ,EAAAA,OAAArQ,MAAA,YAmBAu5D,eAAAz5D,KAAGuQ,EAAAA,OAAHrQ,MAAA,YAMA85B,SAAAh6B,KAAA2D,EAAAA,SAMA20D,KC9KaoC,IACXr3D,QAASw8B,EAAAA,kBACTv8B,YAAayL,EAAAA,WAAW,WAAM,MAAA4rD,MAC9B56B,OAAO,GAII66B,IACXv3D,QAASw3D,EAAAA,cACTv3D,YAAayL,EAAAA,WAAW,WAAM,MAAA4rD,MAC9B56B,OAAO,GAST+6B,GAAA,WAIE,QAAFA,GAEWtiB,EAEAuiB,GAFAx8D,KAAXi6C,OAAWA,EAEAj6C,KAAXw8D,cAAWA,EACPx8D,KAAKsJ,MAAQtJ,KAAKi6C,OAAO3wC,MAnE7B,MAAAizD,oBAiPE,QAAFH,GACcz7D,EACWk5D,EAC2B4C,EAC1BC,GAJxB,GAAFt8D,GAAAJ,IAKI,IAJUA,KAAdW,YAAcA,EACWX,KAAzB65D,aAAyBA,EAC2B75D,KAApDy8D,aAAoDA,EAC1Bz8D,KAA1B08D,WAA0BA,EA/D1B18D,KAAA28D,WAAM,GAAI7rD,GAAAA,aAIV9Q,KAAA48D,UAAM,GAAI9rD,GAAAA,aAGV9Q,KAAAy6D,aAAiB,GAAI3pD,GAAAA,aAGrB9Q,KAAAk6D,gBAAoB,GAAIppD,GAAAA,aAExB9Q,KAAAgkD,WAAe,aAEfhkD,KAAA68D,aAA+C,aAE/C78D,KAAA88D,mBAA+B,aAE/B98D,KAAA+8D,wBAAoCvtD,EAAAA,aAAaC,MAEjDzP,KAAAg9D,oBAAgCxtD,EAAAA,aAAaC,MAG7CzP,KAAAi9D,gBAAyC,WACrC,MAAO78D,GAAK88D,gBACR,MAAQC,oBAAuBC,KAAQh9D,EAAKO,YAAYC,cAAc0I,SAI9EtJ,KAAAq9D,cAAuC,SAACv5C,GACpC,GAAMw5C,GAAel9D,EAAKm9D,oBAAoBn9D,EAAKy5D,aAAa2D,YAAY15C,EAAQxa,OACpF,QAASlJ,EAAKqL,MAAQ6xD,GAClBl9D,EAAKy5D,aAAa4D,YAAYr9D,EAAKqL,IAAK6xD,IAAiB,EACzD,MAAQI,kBAAqBjyD,IAAOrL,EAAKqL,IAAKkyD,OAAUL,KAIhEt9D,KAAA49D,cAAuC,SAAC95C,GACpC,GAAMw5C,GAAel9D,EAAKm9D,oBAAoBn9D,EAAKy5D,aAAa2D,YAAY15C,EAAQxa,OACpF,QAASlJ,EAAK6W,MAAQqmD,GAClBl9D,EAAKy5D,aAAa4D,YAAYr9D,EAAK6W,IAAKqmD,IAAiB,EACzD,MAAQO,kBAAqB5mD,IAAO7W,EAAK6W,IAAK0mD,OAAUL,KAIhEt9D,KAAA89D,iBAA0C,SAACh6C,GACvC,GAAMw5C,GAAel9D,EAAKm9D,oBAAoBn9D,EAAKy5D,aAAa2D,YAAY15C,EAAQxa,OACpF,OAAQlJ,GAAK29D,aAAgBT,IAAgBl9D,EAAK29D,YAAYT,IAClDU,qBAAuB,GAA/B,MAKRh+D,KAAAi+D,WAAMC,EAAAA,WAAWC,SACNn+D,KAAKi9D,gBAAiBj9D,KAAKq9D,cAAer9D,KAAK49D,cAAe59D,KAAK89D,mBAG9E99D,KAAAk9D,iBAA4B,GAOnBl9D,KAAK65D,aACR,KAAMC,GAA2B,cAEnC,KAAK95D,KAAKy8D,aACR,KAAM3C,GAA2B,mBAInC95D,MAAKg9D,oBAAsBnD,EAAauE,cAAcj+D,UAAU,WAC9DC,EAAKkJ,MAAQlJ,EAAKkJ,QA/PxB,MA+FEF,QAAFC,eACM+yD,EADN77D,UAAA,qBAAE,SACkB+I,GADlB,GAAFlJ,GAAAJ,IAESsJ,KAILtJ,KAAKq+D,YAAc/0D,EACnBtJ,KAAKq+D,YAAYC,eAAet+D,MAChCA,KAAK+8D,wBAAwB1sD,cAE7BrQ,KAAK+8D,wBAA0B/8D,KAAKq+D,YAAY9D,iBAAiBp6D,UAAU,SAAC8iB,GAC1E7iB,EAAKkJ,MAAQ2Z,EACb7iB,EAAKy8D,aAAa55C,GAClB7iB,EAAK4jD,aACL5jD,EAAKw8D,UAAUnrD,KAAK,GAAI8qD,IAAwBn8D,EAAMA,EAAKO,YAAYC,gBACvER,EAAKu8D,WAAWlrD,KAAK,GAAI8qD,IAAwBn8D,EAAMA,EAAKO,YAAYC,oDAM5EwI,OAAFC,eACM+yD,EADN77D,UAAA,2BAAE,SACwB+I,GACtBtJ,KAAK+9D,YAAcz0D,EACnBtJ,KAAK88D,sDAKP1zD,OAAFC,eACM+yD,EADN77D,UAAA,aAAE,WACwB,MAAOP,MAAK2qB,YACpC,SAAUrhB,GACRA,EAAQtJ,KAAK65D,aAAa2D,YAAYl0D,GACtCtJ,KAAKk9D,iBAAmB5zD,GAAStJ,KAAK65D,aAAa0E,QAAQj1D,GAC3DA,EAAQtJ,KAAKu9D,oBAAoBj0D,EACjC,IAAMk1D,GAAUx+D,KAAKsJ,KACrBtJ,MAAK2qB,OAASrhB,EACdtJ,KAAKy+D,aAAan1D,GAEbtJ,KAAK65D,aAAaS,SAASkE,EAASl1D,IACvCtJ,KAAKy6D,aAAahpD,KAAKnI,oCAM3BF,OAAFC,eACM+yD,EADN77D,UAAA,WAAE,WACsB,MAAOP,MAAK4qB,UAClC,SAAQthB,GACNtJ,KAAK4qB,KAAO5qB,KAAKu9D,oBAAoBv9D,KAAK65D,aAAa2D,YAAYl0D,IACnEtJ,KAAK88D,sDAKP1zD,OAAFC,eACM+yD,EADN77D,UAAA,WAAE,WACsB,MAAOP,MAAKqkC,UAClC,SAAQ/6B,GACNtJ,KAAKqkC,KAAOrkC,KAAKu9D,oBAAoBv9D,KAAK65D,aAAa2D,YAAYl0D,IACnEtJ,KAAK88D,sDAKP1zD,OAAFC,eACM+yD,EADN77D,UAAA,gBAAE,WAC0B,QAASP,KAAKkoC,eACxC,SAAa5+B,GACX,GAAM+8B,GAAW/sB,EAAAA,sBAAsBhQ,GACjC8C,EAAUpM,KAAKW,YAAYC,aAE7BZ,MAAKkoC,YAAc7B,IACrBrmC,KAAKkoC,UAAY7B,EACjBrmC,KAAKk6D,gBAAgBzoD,KAAK40B,IAIxBA,GAAYj6B,EAAQif,MAItBjf,EAAQif,wCAoFZ+wC,EAAF77D,UAAAmF,YAAE,WACE1F,KAAK+8D,wBAAwB1sD,cAC7BrQ,KAAKg9D,oBAAoB3sD,cACzBrQ,KAAKy6D,aAAatsD,WAClBnO,KAAKk6D,gBAAgB/rD,YAIvBiuD,EAAF77D,UAAAm+D,0BAAE,SAA0BxuC,GACxBlwB,KAAK88D,mBAAqB5sC,GAI5BksC,EAAF77D,UAAAo+D,SAAE,SAAS/f,GACP,MAAO5+C,MAAKi+D,WAAaj+D,KAAKi+D,WAAWrf,GAAK,MAOhDwd,EAAF77D,UAAAq+D,6BAAE,WACE,MAAO5+D,MAAK6+D,6BAOdzC,EAAF77D,UAAAs+D,0BAAE,WACE,MAAO7+D,MAAK08D,WAAa18D,KAAK08D,WAAWmC,4BAA8B7+D,KAAKW,aAI9Ey7D,EAAF77D,UAAAyvB,WAAE,SAAW1mB,GACTtJ,KAAKsJ,MAAQA,GAIf8yD,EAAF77D,UAAA0vB,iBAAE,SAAiBC,GACflwB,KAAK68D,aAAe3sC,GAItBksC,EAAF77D,UAAA4vB,kBAAE,SAAkBD,GAChBlwB,KAAKgkD,WAAa9zB,GAIpBksC,EAAF77D,UAAA6vB,iBAAE,SAAiBC,GACfrwB,KAAKwW,SAAW6Z,GAGlB+rC,EAAF77D,UAAAwtB,WAAE,SAAWrZ,GACT,GAAMoqD,GAAiBpqD,EAAM4xC,QAAU5xC,EAAMC,UAAY2Z,EAAAA,UAErDtuB,MAAKq+D,aAAeS,IAAmB9+D,KAAKW,YAAYC,cAAcm+D,WACxE/+D,KAAKq+D,YAAYpnC,OACjBviB,EAAMI,mBAIVsnD,EAAF77D,UAAAy+D,SAAE,SAAS11D,GACP,GAAIkxD,GAAOx6D,KAAK65D,aAAaoF,MAAM31D,EAAOtJ,KAAKy8D,aAAawC,MAAMrC,UAClE58D,MAAKk9D,iBAAmB1C,GAAQx6D,KAAK65D,aAAa0E,QAAQ/D,GAC1DA,EAAOx6D,KAAKu9D,oBAAoB/C,GAE3Bx6D,KAAK65D,aAAaS,SAASE,EAAMx6D,KAAK2qB,UACzC3qB,KAAK2qB,OAAS6vC,EACdx6D,KAAK68D,aAAarC,GAClBx6D,KAAKy6D,aAAahpD,KAAK+oD,GACvBx6D,KAAK48D,UAAUnrD,KAAK,GAAI8qD,IAAwBv8D,KAAMA,KAAKW,YAAYC,kBAI3Ew7D,EAAF77D,UAAAwjD,UAAE,WACE/jD,KAAK28D,WAAWlrD,KAAK,GAAI8qD,IAAwBv8D,KAAMA,KAAKW,YAAYC,iBAI1Ew7D,EAAF77D,UAAA05D,iBAAE,WACE,MAAOj6D,MAAK08D,WAAa18D,KAAK08D,WAAWtV,UAAQzkD,IAInDy5D,EAAF77D,UAAAstB,QAAE,WAEM7tB,KAAKsJ,OACPtJ,KAAKy+D,aAAaz+D,KAAKsJ,OAGzBtJ,KAAKgkD,cAICoY,EAAV77D,UAAAk+D,aAAA,SAAuBn1D,GACnBtJ,KAAKW,YAAYC,cAAc0I,MAC3BA,EAAQtJ,KAAK65D,aAAaqF,OAAO51D,EAAOtJ,KAAKy8D,aAAa0C,QAAQvC,WAAa,IAO7ER,EAAV77D,UAAAg9D,oBAAA,SAA8B/yC,GAC1B,MAAQxqB,MAAK65D,aAAauF,eAAe50C,IAAQxqB,KAAK65D,aAAa0E,QAAQ/zC,GAAQA,EAAM,qBAnS7F/oB,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,uBACViD,WACEs3D,GACAE,IACCv3D,QAASu6D,GAA0Bt6D,YAAaq3D,IAEnDn6D,MACEq9D,uBAAwB,OACxBpwB,mBAAoB,kDACpBqwB,aAAc,2CACdC,aAAc,2CACdC,aAAc,WACdC,UAAW,gCACXC,WAAY,cACZnvC,SAAU,YACVC,YAAa,sBAEf5uB,SAAU,6DA/EZJ,KAAEuD,EAAAA,aAmBFvD,KAAQq6D,GAARl5D,aAAAnB,KAoNO2W,EAAAA,aACP3W,SAAAkB,GAAAC,aAAAnB,KAAO2W,EAAAA,WAAP3W,KAAmBoB,EAAAA,OAAnBlB,MAA0Bi+D,QApN1Bn+D,KAAQuuC,GAARptC,aAAAnB,KAqNO2W,EAAAA,gCAtJPynD,gBAAAp+D,KAAG2D,EAAAA,QAqBH44D,sBAAAv8D,KAAG2D,EAAAA,QAQHkE,QAAA7H,KAAG2D,EAAAA,QAiBHqG,MAAAhK,KAAG2D,EAAAA,QASH6R,MAAAxV,KAAG2D,EAAAA,QASHoR,WAAA/U,KAAG2D,EAAAA,QAsBHu3D,aAAAl7D,KAAGuQ,EAAAA,SAIH4qD,YAAAn7D,KAAGuQ,EAAAA,UAzLHoqD,iCCAA,sBA6BA36D,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,gCA9BZk+D,mBA0EE,QAAFC,GACWtgD,EACCvM,EACe8sD,GAFhBhgE,KAAXyf,MAAWA,EACCzf,KAAZkT,mBAAYA,EAvBZlT,KAAA4N,cAA0B4B,EAAAA,aAAaC,KA0BnC,IAAMwwD,GAAiBz7D,OAAOw7D,EAC9BhgE,MAAKqE,SAAY47D,GAAqC,IAAnBA,EAAwBA,EAAiB,KARhF,MAVE72D,QAAFC,eACM02D,EADNx/D,UAAA,gBAAE,WAEE,WAA0BoC,KAAnB3C,KAAKkoC,UAA0BloC,KAAKu7D,WAAW/kD,WAAaxW,KAAKkoC,eAE1E,SAAa5+B,GACXtJ,KAAKkoC,UAAY5uB,EAAAA,sBAAsBhQ,oCAgBzCy2D,EAAFx/D,UAAA0N,YAAE,SAAY/N,GACNA,EAAR,YACMF,KAAKkgE,sBAITH,EAAFx/D,UAAAmF,YAAE,WACE1F,KAAK4N,cAAcyC,eAGrB0vD,EAAFx/D,UAAAkF,mBAAE,WACEzF,KAAKkgE,sBAGPH,EAAFx/D,UAAA+yB,MAAE,SAAM5e,GACA1U,KAAKu7D,aAAev7D,KAAKwW,WAC3BxW,KAAKu7D,WAAWtkC,OAChBviB,EAAMqnB,oBAIFgkC,EAAVx/D,UAAA2/D,yCACUC,EAAqBngE,KAAKu7D,WAAav7D,KAAKu7D,WAAWrB,gBAAkB5kD,EAAAA,KACzE8qD,EAAgBpgE,KAAKu7D,YAAcv7D,KAAKu7D,WAAWvB,iBACrDh6D,KAAKu7D,WAAWvB,iBAAiBE,gBAAkB5kD,EAAAA,KACjD+qD,EAAoBrgE,KAAKu7D,WAC3B1xD,EAAAA,MAAM7J,KAAKu7D,WAAWT,aAAc96D,KAAKu7D,WAAWL,cACpD5lD,EAAAA,IAEJtV,MAAK4N,cAAcyC,cACnBrQ,KAAK4N,cAAgB/D,EAAAA,MACnB7J,KAAKyf,MAAMvf,QACXigE,EACAC,EACAC,GACAlgE,UAAU,WAAM,MAAAC,GAAK8S,mBAAmB/B,iCAnF9C1P,KAACC,EAAAA,UAADC,OAAAC,SAAA,wBACEE,SAAU,4lBACVC,QAAF,quBACEE,MACFC,MAAA,wBAEI2sC,kBAAJ,gFAEIyxB,qBAAJ,8CACIC,mBAAJ,6CAEA1+D,SAAA,sBACAW,cAAAC,EAAAA,kBAAAC,KACEL,gBAAFC,EAAAA,wBAAAC,oFAvBAd,KAAQyD,OAARtC,aAAAnB,KAAA0D,EAAAA,UAAAxD,MAAA,iBAoDAo+D,EAAAh9D,mFArBAyT,WAAA/U,KAAA2D,EAAAA,QAGAo7D,cAAA/+D,KAAAm+B,EAAAA,aAAAj+B,MAAAm+D,OAaAC,iCCxEA,sBA8BAt+D,KAACuB,EAAAA,SAADrB,OACEsB,SACE2D,EAAAA,aACA4e,GACAi7C,GACA5qC,EAAAA,cACA/X,EAAAA,WACAH,EAAAA,cAEFxa,SACEu9D,GACAC,GACA5G,GACAqB,GACAgB,GACA2D,GACAD,GACAc,GACAC,GACAC,GACAC,IAEF19D,cACEq9D,GACAC,GACA5G,GACAqB,GACAgB,GACA2D,GACAD,GACAc,GACAC,GACAC,GACAC,IAEFl8D,WACEm8D,GACAC,IAEFnrC,iBACEslC,GACA2F,QAvEJG,gCCgCAlhE,KAAAkrB,WAA+B,EAM/BlrB,KAAAmhE,QAA4B,EAH5B,MANE/3D,QAAFC,eACM+3D,EADN7gE,UAAA,gBAAE,WAC0B,MAAOP,MAAKkrB,eACtC,SAAa5hB,GAAkBtJ,KAAKkrB,UAAY5R,EAAAA,sBAAsBhQ,oCAItEF,OAAFC,eACM+3D,EADN7gE,UAAA,aAAE,WACuB,MAAOP,MAAKmhE,YACnC,SAAU73D,GAAkBtJ,KAAKmhE,OAAS7nD,EAAAA,sBAAsBhQ,mDA1BlE7H,KAACC,EAAAA,UAADC,OAAAC,SAAA,cACEK,MACFsC,KAAA,YACM2sB,0BAAN,uCACImwC,+BAAJ,WACIC,iCAAJ,YACIC,4BAAJ,QACIr/D,MAAJ,eAEAJ,SAAA,GACAC,QAAA,+SACES,cAAFC,EAAAA,kBAAAC,KACEL,gBAAFC,EAAAA,wBAAAC,WAGA6+D,EAAAr+D,kEASAq+D,iCCnCA,sBAcA3/D,KAACuB,EAAAA,SAADrB,OACEsB,SAAUC,GAAiB0D,EAAAA,cAC3BzD,SAAUi+D,GAAYl+D,IACtBG,cAAe+9D,QAjBjBlX,KCqCasX,GAAgB,GAAI51D,GAAAA,eAAiC,iBrFKrD61D,IAMXC,gBAAiB7yD,EAAAA,QAAQ,mBACvBC,EAAAA,MAAM,kBAAmBrC,EAAAA,OAAOsC,UAAW,kBAC3CD,EAAAA,MAAM,WAAYrC,EAAAA,OAAOsC,UAAW,oBACpCE,EAAAA,WAAW,4CACTC,EAAAA,QAhC0C,wCAoC9CyyD,sBAAuB9yD,EAAAA,QAAQ,mBAC7BC,EAAAA,MAAM,kBAAmBrC,EAAAA,OACvBkO,OAAQ,yBAERinD,QAASC,gBAAiB,UAE5B/yD,EAAAA,MAAM,WAAYrC,EAAAA,OAChBkO,OAAQ,wBAERinD,QAASE,eAAgB,UAE3B7yD,EAAAA,WAAW,4CAA6Cw9B,EAAAA,OACtD/tB,EAAAA,MAAM,mBAAoBC,EAAAA,gBAAiBC,UAAU,IACrD1P,EAAAA,QAjD0C,0CAsD9C6yD,cAAelzD,EAAAA,QAAQ,iBACrBC,EAAAA,MAAM,kBAAmBrC,EAAAA,OAAOkO,OAAQ,MAAOjO,WAAY,YAC3DoC,EAAAA,MAAM,WAAYrC,EAAAA,OAAOkO,OAAQ,IAAKjO,WAAY,aAClDuC,EAAAA,WAAW,4CACTC,EAAAA,QA1D0C,uDsFF9C,QAAF8yD,GAAqBznB,GAAAv6C,KAArBu6C,UAAqBA,EAlBrB,sBAcA94C,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,gFAPZH,KAAmByL,EAAAA,eARnB80D,KC2CaC,GAAoBC,EAAAA,iBAM7BC,GAAW,iBAwEb,QAAFC,GAA6DC,EAC/CnvD,EACAovD,EACQ70D,EAEUtM,EACgC28B,GAN9D,GAAF19B,GAOIkE,EAPJ5D,KAAAV,KAOUqiE,EAAWnvD,EAAoBovD,IAPzCtiE,WAGsBI,GAAtBqN,kBAAsBA,EAG0CrN,EAAhE09B,eAAgEA,EAhChE19B,EAAAmiE,aAAwB,EAGxBniE,EAAAoiE,YAA0B,GAAI1xD,GAAAA,aAG9B1Q,EAAAqiE,cAA4B,GAAI3xD,GAAAA,aAGhC1Q,EAAAsiE,cAA2B,GAAI70D,GAAAA,QAe/BzN,EAAAuiE,UAAc,8BAA8BR,KAUxC/hE,EAAKiiE,UAAYA,EACjBjiE,EAAKe,UAAYA,IAjBrB,MAjCuCsD,GAAvC29D,EAAA99D,GAQE8E,OAAFC,eACM+4D,EADN7hE,UAAA,kBAAE,WAEE,MAAOP,MAAKuiE,aAAgBviE,KAAKqiE,WAAariE,KAAKqiE,UAAUO,gBAE/D,SAAet5D,GACbtJ,KAAKuiE,YAAcjpD,EAAAA,sBAAsBhQ,oCAyC3C84D,EAAF7hE,UAAAsiE,YAAE,WACE,QAAI7iE,KAAKqiE,WAI4E,aAA3EriE,KAAK8iE,SAAW9iE,KAAKqiE,UAAUU,YAAc/iE,KAAKgjE,sBAM9DZ,EAAF7hE,UAAAyiE,kBAAE,WACE,MAAOhjE,MAAK8iE,SAAW,WAAa,aAGtCV,EAAF7hE,UAAAkF,mBAAE,WAAA,GAAFrF,GAAAJ,IACQA,MAAKijE,cAEPjjE,KAAKy7B,OAAO7zB,KACVgI,EAAAA,UAAS,MACT9O,EAAAA,OAAO,WAAM,MAAAV,GAAK0iE,WAAa1iE,EAAKozC,UACpC3rC,EAAAA,KAAK,IACL1H,UAAU,WACVC,EAAKozC,QAAU,GAAInlC,GAAAA,eAAejO,EAAK6iE,aAAa1oB,UAAWn6C,EAAKqN,sBAK1E20D,EAAF7hE,UAAA0N,YAAE,SAAY/N,GACVF,KAAK0iE,cAAcn5D,KAAKrJ,IAG1BkiE,EAAF7hE,UAAAmF,YAAE,WACEpB,EAAJ/D,UAAUmF,YAAVhF,KAAAV,MACIA,KAAK0iE,cAAcv0D,YAGrBi0D,EAAF7hE,UAAA2iE,eAAE,SAAexuD,GACb,GAAM1T,GAAY0T,EAAMtI,QAAQpL,UAEzBmiE,EAAXzuD,EAAAyuD,UAAsB3xD,EAAtBkD,EAAAlD,QAA+BI,EAA/B8C,EAAA9C,SAMsB,UAAduxD,GAAoC,aAAZ3xD,GAC1BxQ,EAAU0Y,IARK,gBAUC,UAAdypD,GAAqC,cAAZ3xD,GAC3BxQ,EAAUwY,OAXK,gBAcC,SAAd2pD,GAAoC,aAAZ3xD,GAAwC,SAAdI,GACpD5R,KAAKwiE,YAAY/wD,OAED,SAAd0xD,GAAoC,cAAZ3xD,GAAyC,SAAdI,GACrD5R,KAAKyiE,cAAchxD,QAKvB2wD,EAAF7hE,UAAA6iE,eAAE,WACE,GAAIpjE,KAAKqjE,OAASrjE,KAAKmB,UAAW,CAChC,GAAMmiE,GAAiBtjE,KAAKmB,UAAUo7B,cAChCgnC,EAAcvjE,KAAKqjE,MAAMziE,aAC/B,OAAO0iE,KAAmBC,GAAeA,EAAYtiE,SAASqiE,GAGhE,OAAO,kBAlJX7hE,KAACC,EAAAA,UAADC,OAAAI,QAAA,0/CACEH,SAAU,sBACVC,SAAF,oBACEC,SAAU,meACVU,cAAFC,EAAAA,kBAAAC,KACEL,gBAAFC,EAAAA,wBAAAC,OACEP,QAAF,WAAA,YACEwhE,SAAF,SAAA,SAAA,kBACE1xD,YAAF2vD,GAAAM,eACEl9D,oCAKqClC,KAAvCV,MACAC,MAAA,sBACMuhE,uBAAN,WACI7xC,kCAAJ,sCACI8xC,sCAAJ,6KA8CAjiE,KAAAqoC,EAAAA,4BAzGAroC,KAAEiC,EAAAA,mBALFjC,SAAQkB,GAARC,aAAAnB,KAAAoB,EAAAA,OAAAlB,MAAAmB,EAAAA,cAmBArB,KAAEyD,OAAFtC,aAAAnB,KAAA2W,EAAAA,WAAA3W,KAAAoB,EAAAA,OAAAlB,MAAAkwB,EAAAA,4BAiGAuwC,EAAAr/D,0EAvCA0/D,gBAAAhhE,KAAAuQ,EAAAA,SAUAixD,eAAAxhE,KAAAm+B,EAAAA,aAAAj+B,MAAAqgE,MAGAqB,QAAA5hE,KAAA+M,EAAAA,UAAA7M,MAAA,WAYAygE,uBAjHAuB,GAAA,yBAoNA,wEALA1hE,MACAC,MAAA,sBAIAyhE,mBClJE,QAAFC,GACqB1c,EACP1kC,EACApG,EACAlJ,GAJZ,GAAF9S,GAAAJ,IACqBA,MAArBknD,MAAqBA,EACPlnD,KAAdwiB,SAAcA,EACAxiB,KAAdoc,cAAcA,EACApc,KAAdkT,mBAAcA,EANdlT,KAAA6jE,0BAAsCr0D,EAAAA,aAAaC,KAQ/C,IAAMq0D,GAA4B5c,EAAMmb,UACtCnb,EAAMmb,UAAUz0D,cAAchG,KAAK9G,EAAAA,OAAO,SAAAZ,GAAW,QAAEA,EAA7D,cAAoFuP,EAAAA,KAIhFzP,MAAK6jE,0BAA4Bh6D,EAAAA,MAC/Bq9C,EAAMzrB,OACNyrB,EAAMr0B,OACNixC,EACA5c,EAAMwb,cAAc96D,KAAK9G,EAAAA,OAAO,SAAAZ,GAAW,SAAGA,EAJpD,aAI0EA,EAJ1E,cAMKC,UAAU,WAAM,MAAAC,GAAK8S,mBAAmB/B,iBAGzC+1C,EAAMr0B,OACHjrB,KAAK9G,EAAAA,OAAO,WAAM,MAAAomD,GAAMkc,oBACxBjjE,UAAU,WAAM,MAAAic,GAAcqgB,SAASja,EAAU,aAEpDpG,EAAcU,QAAQ0F,GAAUriB,UAAU,SAAA4N,GACpCA,GAAUm5C,EAAMmb,WAClBnb,EAAMmb,UAAU0B,mBAAmB3jE,KAS3C,MAMEgJ,QAAFC,eAAMu6D,EAANrjE,UAAA,gBAAE,WACE,MAAOP,MAAKknD,MAAM1wC,0CAIpBotD,EAAFrjE,UAAAyjE,QAAE,WACEhkE,KAAKknD,MAAMvkB,UAIbihC,EAAFrjE,UAAA0jE,YAAE,WACE,MAAOjkE,MAAKknD,MAAM4b,UAIpBc,EAAFrjE,UAAAyiE,kBAAE,WACE,MAAOhjE,MAAKknD,MAAM8b,qBAIpBY,EAAFrjE,UAAA2jE,YAAE,WACE,MAAOlkE,MAAKknD,MAAMpoC,IAIpB8kD,EAAFrjE,UAAA4jE,YAAE,WACE,OAAQnkE,KAAKknD,MAAM0b,aAAe5iE,KAAKknD,MAAM1wC,UAI/CotD,EAAFrjE,UAAA6jE,SAAE,SAAS1vD,GACP,OAAQA,EAAMC,SAEZ,IAAKO,GAAAA,MACL,IAAKD,GAAAA,MACHP,EAAMI,iBACN9U,KAAKgkE,SACL,MACF,SAKE,YAJIhkE,KAAKknD,MAAMmb,WACbriE,KAAKknD,MAAMmb,UAAUgC,qBAAqB3vD,MAYlDkvD,EAAFrjE,UAAAgS,MAAE,SAAMxE,OAAR,KAAAA,IAAQA,EAAR,WACI/N,KAAKoc,cAAcqgB,SAASz8B,KAAKwiB,SAAUzU,IAG7C61D,EAAFrjE,UAAAmF,YAAE,WACE1F,KAAK6jE,0BAA0BxzD,cAC/BrQ,KAAKoc,cAAce,eAAend,KAAKwiB,0BArI3C/gB,KAACC,EAAAA,UAADC,OAAAC,SAAA,6BACEG,QAAF,64BACED,SAAU,mRACVU,cAAFC,EAAAA,kBAAAC,KACEL,gBAAFC,EAAAA,wBAAAC,OACEuP,YACF2vD,GAAAC,gBACAD,GAAAE,uBAEA1/D,MACAC,MAAA,6BACMqC,KAAN,SACIslC,YAAJ,kBACIgF,kBAAJ,oBACIy1B,uBAAJ,gBACI5/D,uBAAJ,gBACImO,uBAAwB,iBACxB4wD,uBAAwB,gBACxBh9D,UAAJ,YACIgqB,YAAJ,mBACI8zC,qBAAsB,uQA5B1B9iE,KAAQic,EAAAA,eATRjc,KAAEsQ,EAAAA,qBAHF6xD,EAAA7gE,kFAyFA6gE,iCA8EA,+EALA3hE,MACAC,MAAA,8CAIAsiE,iCAaA,yEALAviE,MACAC,MAAA,wCAIAuiE,qFCvJArkE,GAAAmiE,aAAiC,EAUjCniE,EAAA2iE,YAAkD,YAnDlD,MA+BkCt+D,GAAlCigE,EAAApgE,GAOE8E,OAAFC,eACMq7D,EADNnkE,UAAA,kBAAE,WAC4B,MAAOP,MAAKuiE,iBACxC,SAAel2D,GAAiBrM,KAAKuiE,YAAcjpD,EAAAA,sBAAsBjN,oCAazEq4D,EAAFnkE,UAAAkF,mBAAE,WACEzF,KAAK8T,YAAc,GAAI2B,GAAAA,gBAAgBzV,KAAK2kE,UAAUhvD,YAIxD+uD,EAAFnkE,UAAA8jE,qBAAE,SAAqB3vD,GACZ,GAAAC,GAAXD,EAAAC,QACU4xC,EAAUvmD,KAAK8T,WAEjBa,KAAYC,EAAAA,MACd2xC,EAAQ1xC,qBACRH,EAAMI,kBACGH,IAAYI,EAAAA,KACrBwxC,EAAQvxC,oBACRN,EAAMI,kBAEN9U,KAAK8T,YAAYsB,UAAUV,IAI/BgwD,EAAFnkE,UAAAwjE,mBAAE,SAAmBa,GACjB5kE,KAAK8T,YAAY8B,iBAAiBgvD,mBAvDtCnjE,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,gBACVC,SAAU,eACVG,QAAS,SACT6C,YACEC,QAAS08D,GACTz8D,YAAa2/D,IAEfziE,MACEC,MAAO,uCAMXyiE,WAAAljE,KAAGoE,EAAAA,gBAAHlE,MAAmBiiE,IAA0B/6B,aAAa,MAI1D+5B,aAAAnhE,KAAG2D,EAAAA,QAaH29D,cAAAthE,KAAG2D,EAAAA,SAnDHs/D,GA+BkCG,EAAAA,0CC/BlC,sBAsBApjE,KAACuB,EAAAA,SAADrB,OACEsB,SAAU2D,EAAAA,aAAck+D,EAAAA,mBAAoBnnD,EAAAA,cAC5Cxa,SACEuhE,GACAtC,GACAuB,GACAC,GACAa,GACAD,GACAxC,IAEF3+D,cACEqhE,GACAtC,GACAuB,GACAC,GACAa,GACAD,GACAxC,QAxCJ+C,mBnBsCE,QAAFhY,GAAsBvqC,GAAAxiB,KAAtBwiB,SAAsBA,EAHtBxiB,KAAA6uD,SAAqB,EACrB7uD,KAAAglE,SAAqB,EAUrB,MALE57D,QAAFC,eACM0jD,EADNxsD,UAAA,eAAE,WACwB,MAAOP,MAAK6uD,cACpC,SAAYvlD,GAAiBtJ,KAAK6uD,SAAWtjD,KAAK2jB,MAAMrb,EAAAA,qBAAqBvK,qCAG7EF,OAAFC,eACM0jD,EADNxsD,UAAA,eAAE,WACwB,MAAOP,MAAKglE,cACpC,SAAY17D,GAAiBtJ,KAAKglE,SAAWz5D,KAAK2jB,MAAMrb,EAAAA,qBAAqBvK,qCAM7EyjD,EAAFxsD,UAAA+vD,UAAE,SAAU2U,EAAkB37D,GAC1BtJ,KAAKwiB,SAAS5hB,cAAc6L,MAAMw4D,GAAY37D,kBAjClD7H,KAACC,EAAAA,UAADC,OAAAC,SAAA,gBACEC,SAAU,cACVI,MACFC,MAAA,iBAEAJ,SAAA,gEACAC,QAAA;wvCACES,cAAFC,EAAAA,kBAAAC,KACEL,gBAAFC,EAAAA,wBAAAC,oEAnBAwqD,EAAEhqD,mEAmCFgqD,KA9CAC,GAAA,8IA6EAA,EAAApqD,aACAnB,KAAAC,EAAAA,UAAAC,OAAAC,SAAA,qPAnBAS,gBAAAC,EAAAA,wBAAAC,OACEC,cAAFC,EAAAA,kBAAAC,SAIAsqD,EAAEhoC,eAAF,WAAA,QACAvjB,KAAAuD,EAAAA,8GAqBA,+HAAAioD,iCAUA,sHAAAC,iCAUA,sHAAAC,KC9EAC,GAAA,WA2BE,QAAFA,GAAcC,EAAoBC,GAAhC,GAAFltD,GAAAJ,IAtBAA,MAAAutD,YAAwB,EAGxBvtD,KAAAwtD,SAAqB,EAoBjBxtD,KAAKytD,QAAU,GAAIhmD,OAAM4lD,GACzBrtD,KAAKytD,QAAQC,KAAK,EAAG,EAAG1tD,KAAKytD,QAAQjtD,QAErCR,KAAK4M,UAAY0gD,EAAMvjD,IAAI,SAAA4jD,GAAQ,MAAAvtD,GAAKwtD,WAAWD,KA3DvD,MAuCEvkD,QAAFC,eAAM+jD,EAAN7sD,UAAA,gBAAE,WAAyB,MAAOP,MAAKwtD,SAAW,mCAMhDpkD,OAAFC,eAAM+jD,EAAN7sD,UAAA,eAAE,WACE,GAAIstD,GAAatiD,KAAK0L,IAA1BnN,MAAqByB,KAAYvL,KAAKytD,QAGlC,OAAOI,GAAa,EAAI7tD,KAAK8tD,SAAWD,EAAa,EAAI7tD,KAAK8tD,0CAcxDV,EAAV7sD,UAAAqtD,WAAA,SAAqBD,GAEjB,GAAII,GAAgB/tD,KAAKguD,iBAAiBL,EAAKM,QAS/C,OANAjuD,MAAKkuD,kBAAkBH,EAAeJ,GAItC3tD,KAAKutD,YAAcQ,EAAgBJ,EAAKM,QAEjC,GAAIE,IAAanuD,KAAKwtD,SAAUO,IAIjCX,EAAV7sD,UAAAytD,iBAAA,SAA2BI,GACvB,GAAIA,EAAWpuD,KAAKytD,QAAQjtD,OAC1B,KAAMk1B,OAAM,oCAAoC04B,EAAtD,kCACyCpuD,KAAKytD,QAAQjtD,OAAtD,KAII,IAAIutD,IAAiB,EACjBM,GAAe,CAGnB,IAEMruD,KAAKutD,YAAca,EAAWpuD,KAAKytD,QAAQjtD,OAC7CR,KAAKsuD,YAIPP,EAAgB/tD,KAAKytD,QAAQ5jC,QAAQ,EAAG7pB,KAAKutD,cAGvB,GAAlBQ,GAKJM,EAAcruD,KAAKuuD,iBAAiBR,GAIpC/tD,KAAKutD,YAAcQ,EAAgB,GARjC/tD,KAAKsuD,kBAWAD,EAAcN,EAAgBK,EAIvC,OAAO7iD,MAAK0L,IAAI82C,EAAe,IAIzBX,EAAV7sD,UAAA+tD,oBACItuD,KAAKutD,YAAc,EACnBvtD,KAAKwtD,UAGL,KAAK,GAAI7kD,GAAI,EAAGA,EAAI3I,KAAKytD,QAAQjtD,OAAQmI,IACvC3I,KAAKytD,QAAQ9kD,GAAK4C,KAAK0L,IAAI,EAAGjX,KAAKytD,QAAQ9kD,GAAK,IAQ5CykD,EAAV7sD,UAAAguD,iBAAA,SAA2BR,GACvB,IAAK,GAAIplD,GAAIolD,EAAgB,EAAGplD,EAAI3I,KAAKytD,QAAQjtD,OAAQmI,IACvD,GAAuB,GAAnB3I,KAAKytD,QAAQ9kD,GACf,MAAOA,EAKX,OAAO3I,MAAKytD,QAAQjtD,QAId4sD,EAAV7sD,UAAA2tD,kBAAA,SAA4BhtC,EAAeysC,GACvC,IAAK,GAAIhlD,GAAI,EAAGA,EAAIglD,EAAKM,QAAStlD,IAChC3I,KAAKytD,QAAQvsC,EAAQvY,GAAKglD,EAAKa,SAnJrCpB,KA4JAe,GAAA,WACE,QAAFA,GAAqBM,EAAoBC,GAApB1uD,KAArByuD,IAAqBA,EAAoBzuD,KAAzC0uD,IAAyCA,EA7JzC,MAAAP,MCiBAQ,GAAA,wBAEA3uD,KAAA4uD,MAAkB,EAClB5uD,KAAA6uD,SAAqB,EApBrB,MAiCEF,GAAFpuD,UAAAuuD,KAAE,SAAKC,EAAoBtB,EAA0BuB,EAAcjuC,GAC/D/gB,KAAKivD,YAAcC,GAAeH,GAClC/uD,KAAK4uD,MAAQnB,EAAQK,SACrB9tD,KAAK6uD,SAAWpB,EAAQe,QACxBxuD,KAAKmvD,MAAQH,EACbhvD,KAAKk6B,WAAanZ,GAUpB4tC,EAAFpuD,UAAA6uD,gBAAE,SAAgBC,EAAqBC,GAMnC,MAAO,IAAID,EAAf,QAAkCrvD,KAAKivD,YAAvC,MAAwDK,EAAxD,MAUEX,EAAFpuD,UAAAgvD,gBAAE,SAAgBC,EAAkB7gC,GAGhC,MAAkB,KAAXA,EAAe,IAAM8gC,GAAK,IAAID,EAAzC,MAAuDxvD,KAAKivD,YAA5D,OAA8EtgC,IAU5EggC,EAAFpuD,UAAAmvD,YAAE,SAAYF,EAAkBG,GAC5B,MAAO,IAAIH,EAAf,MAA6BG,EAA7B,SAAyCA,EAAO,GAAhD,MAAuD3vD,KAAKivD,YAA5D,KAUEN,EAAFpuD,UAAAqvD,SAAE,SAASjC,EAAmBH,EAAkBqC,GAE5C,GAAIC,GAAsB,IAAM9vD,KAAKmvD,MAIjCY,GAA8B/vD,KAAKmvD,MAAQ,GAAKnvD,KAAKmvD,KAEzDnvD,MAAKgwD,aAAarC,EAAMkC,EAAUC,EAAqBC,GACvD/vD,KAAKiwD,aAAatC,EAAMH,EAAUsC,EAAqBC,IAIzDpB,EAAFpuD,UAAAyvD,aAAE,SAAarC,EAAmBkC,EAAkBK,EACrCC,GAEX,GAAIC,GAAgBpwD,KAAKovD,gBAAgBc,EAAcC,GAInDE,EAA2B,QAApBrwD,KAAKk6B,WAAuB,QAAU,MACjDyzB,GAAK2C,UAAUD,EAAMrwD,KAAKuvD,gBAAgBa,EAAeP,IACzDlC,EAAK2C,UAAU,QAASb,GAAKzvD,KAAK0vD,YAAYU,EAAezC,EAAKM,YAMpEU,EAAFpuD,UAAAgwD,cAAE,WACE,MAAUvwD,MAAKivD,YAAnB,OAAqCjvD,KAAK6uD,SAA1C,SAOEF,EAAFpuD,UAAAiwD,YAAE,SAAYC,GACV,MAAUzwD,MAAK6uD,SAAnB,MAAiC7uD,KAAK0vD,YAAYe,EAAY,IAgB5D9B,EAAFpuD,UAAAmwD,kBAAE,WAA+C,MAAO,OA7IxD/B,KA6JAgC,GAAA,SAAArsD,GAEE,QAAFqsD,GAAqBC,GAAnB,GAAFxwD,GAA+CkE,EAA/C5D,KAAAV,OAAAA,WAAqBI,GAArBwwD,eAAqBA,IA/JrB,MA6JqCnsD,GAArCksD,EAAArsD,GAIEqsD,EAAFpwD,UAAAuuD,KAAE,SAAKC,EAAoBtB,EAA0BuB,EAAcjuC,GAC/Dzc,EAAJ/D,UAAUuuD,KAAVpuD,KAAAV,KAAe+uD,EAAYtB,EAASuB,EAAMjuC,GACtC/gB,KAAK4wD,eAAiB1B,GAAelvD,KAAK4wD,iBAG5CD,EAAFpwD,UAAA0vD,aAAE,SAAatC,EAAmBH,GAC9BG,EAAK2C,UAAU,MAAOtwD,KAAKuvD,gBAAgBvvD,KAAK4wD,eAAgBpD,IAChEG,EAAK2C,UAAU,SAAUb,GAAKzvD,KAAK0vD,YAAY1vD,KAAK4wD,eAAgBjD,EAAKa,YAG3EmC,EAAFpwD,UAAAmwD,kBAAE,WACE,OACE,SAAUjB,GAAQzvD,KAAKwwD,YAAYxwD,KAAK4wD,gBAA9C,MAAmE5wD,KAAKuwD,mBAItEI,EAAFpwD,UAAAswD,MAAE,SAAMC,GACJA,EAAKC,eAAe,SAAU,OAE9BD,EAAKE,OAAOjpD,QAAQ,SAAA4lD,GAClBA,EAAK2C,UAAU,MAAO,MACtB3C,EAAK2C,UAAU,SAAU,SAtL/BK,GA6JqChC,IAoCrCsC,GAAA,SAAA3sD,GAME,QAAF2sD,GAAc3nD,GAAZ,GAAFlJ,GACIkE,EADJ5D,KAAAV,OAAAA,WAEII,GAAK8wD,YAAY5nD,KAzMrB,MAiMqC7E,GAArCwsD,EAAA3sD,GAWE2sD,EAAF1wD,UAAA0vD,aAAE,SAAatC,EAAmBH,EAAkB0C,EACrCC,GACX,GAAIgB,GAAuBjB,EAAelwD,KAAKoxD,cAC/CpxD,MAAKqxD,eAAiBrxD,KAAKovD,gBAAgB+B,EAAsBhB,GAKjExC,EAAK2C,UAAU,YAAatwD,KAAKuvD,gBAAgBvvD,KAAKqxD,eAAgB7D,IACtEG,EAAK2C,UAAU,aAAcb,GAAKzvD,KAAK0vD,YAAY1vD,KAAKqxD,eAAgB1D,EAAKa,YAG/EyC,EAAF1wD,UAAAmwD,kBAAE,WACE,OACE,gBAAiBjB,GAAQzvD,KAAKwwD,YAAYxwD,KAAKqxD,gBAArD,MAA0ErxD,KAAKuwD,mBAI7EU,EAAF1wD,UAAAswD,MAAE,SAAMC,GACJA,EAAKC,eAAe,gBAAiB,OAErCD,EAAKE,OAAOjpD,QAAQ,SAAA4lD,GAClBA,EAAK2C,UAAU,YAAa,MAC5B3C,EAAK2C,UAAU,aAAc,SAIzBW,EAAV1wD,UAAA2wD,YAAA,SAAsB5nD,GAClB,GAAMgoD,GAAahoD,EAAMm7B,MAAM,IAE/B,IAA0B,IAAtB6sB,EAAW9wD,OACb,KAAMk1B,OAAM,uDAAuDpsB,EAAzE,IAGItJ,MAAKoxD,eAAiBtmC,WAAWwmC,EAAW,IAAMxmC,WAAWwmC,EAAW,KA9O5EL,GAiMqCtC,IAwDrC4C,GAAA,SAAAjtD,+DAzPA,MAyPmCG,GAAnC8sD,EAAAjtD,GAEEitD,EAAFhxD,UAAA0vD,aAAE,SAAatC,EAAmBH,GAE9B,GAAI2D,GAAuB,IAAMnxD,KAAK6uD,SAGlC2C,GAAuBxxD,KAAK4uD,MAAQ,GAAK5uD,KAAK4uD,MAG9CyC,EAAiBrxD,KAAKovD,gBAAgB+B,EAAsBK,EAEhE7D,GAAK2C,UAAU,MAAOtwD,KAAKuvD,gBAAgB8B,EAAgB7D,IAC3DG,EAAK2C,UAAU,SAAUb,GAAKzvD,KAAK0vD,YAAY2B,EAAgB1D,EAAKa,YAGtE+C,EAAFhxD,UAAAswD,MAAE,SAAMC,GACJA,EAAKE,OAAOjpD,QAAQ,SAAA4lD,GAClBA,EAAK2C,UAAU,MAAO,MACtB3C,EAAK2C,UAAU,SAAU,SA5Q/BiB,GAyPmC5C,kBCvLjC,QAAF8C,GAAsBjvC,EACY9R,GADZ1Q,KAAtBwiB,SAAsBA,EACYxiB,KAAlC0Q,KAAkCA,EATlC1Q,KAAA0xD,QAA4B,MAwB5B,MAZEtoD,QAAFC,eACMooD,EADNlxD,UAAA,YAAE,WACqB,MAAOP,MAAKmvD,WACjC,SAAS7lD,GACPtJ,KAAKmvD,MAAQ5jD,KAAK0L,IAAI,EAAG1L,KAAK2jB,MAAMrb,EAAAA,qBAAqBvK,sCAI3DF,OAAFC,eACMooD,EADNlxD,UAAA,kBAAE,WAC2B,MAAOP,MAAK0xD,aACvC,SAAepoD,GAAiBtJ,KAAK0xD,QAAU,IAAGpoD,GAAS,qCAG3DF,OAAFC,eACMooD,EADNlxD,UAAA,iBAAE,SACc+I,GACZ,GAAM+8B,GAAW,IAAG/8B,GAAS,GAEzB+8B,KAAarmC,KAAK2xD,aACpB3xD,KAAK2xD,WAAatrB,EAClBrmC,KAAK4xD,eAAe5xD,KAAK2xD,8CAI7BF,EAAFlxD,UAAA6N,SAAE,WACEpO,KAAK6xD,aACL7xD,KAAK8xD,mBAOPL,EAAFlxD,UAAAyT,sBAAE,WACEhU,KAAK+xD,gBAICN,EAAVlxD,UAAAsxD,sBACI,IAAK7xD,KAAKgvD,KACR,KAAMt5B,OAAM,qFAMR+7B,EAAVlxD,UAAAuxD,2BACS9xD,KAAK2xD,YACR3xD,KAAK4xD,eAAe,QAKhBH,EAAVlxD,UAAAqxD,eAAA,SAAyBI,GACjBhyD,KAAKiyD,aACPjyD,KAAKiyD,YAAYpB,MAAM7wD,MA5FR,QA+FbgyD,EACFhyD,KAAKiyD,YAAc,GAAIV,IACdS,GAAaA,EAAUnoC,QAAQ,MAAQ,EAChD7pB,KAAKiyD,YAAc,GAAIhB,IAAgBe,GAEvChyD,KAAKiyD,YAAc,GAAItB,IAAgBqB,IAKnCP,EAAVlxD,UAAAwxD,mCACUtE,EAAU,GAAIL,IAAgBptD,KAAKgvD,KAAMhvD,KAAKgxD,QAC9CjwC,EAAY/gB,KAAK0Q,KAAO1Q,KAAK0Q,KAAKpH,MAAQ,KAChDtJ,MAAKiyD,YAAYnD,KAAK9uD,KAAK+uD,WAAYtB,EAASztD,KAAKgvD,KAAMjuC,GAE3D/gB,KAAKgxD,OAAOjpD,QAAQ,SAAC4lD,EAAM1lD,GACzB,GAAMymB,GAAM++B,EAAQ7gD,UAAU3E,EAC9B7H,GAAK6xD,YAAYrC,SAASjC,EAAMj/B,EAAI+/B,IAAK//B,EAAIggC,OAG/C1uD,KAAK+wD,cAAc/wD,KAAKiyD,YAAYvB,sBAItCe,EAAFlxD,UAAAwwD,cAAE,SAActkD,GACRA,IACFzM,KAAKwiB,SAAS5hB,cAAc6L,MAAMA,EAAM,IAAMA,EAAM,oBAvH1DhL,KAACC,EAAAA,UAADC,OAAAC,SAAA,gBACEC,SAAU,cACVC,SAAU,uCACVC,QAAF,gvCACEE,MACFC,MAAA,iBAEAG,gBAAAC,EAAAA,wBAAAC,OACAC,cAAAC,EAAAA,kBAAAC,yHAlBA+uD,EAAQ1uD,mGAyCRgsD,aAAAttD,KAAA2D,EAAAA,QAMA4sD,YAAAvwD,KAAQ2D,EAAAA,SAYRqsD,iCClFA,sBAiBAhwD,KAACuB,EAAAA,SAADrB,OACEsB,SAAUymD,GAAexmD,IACzBC,SACEsuD,GACA1E,GACAC,GACAtD,GACAxmD,GACAgqD,GACAC,GACAF,IAEF5pD,cACEouD,GACA1E,GACAC,GACAE,GACAC,GACAF,QAnCJiF,KCsEAC,GAAA,WAME,QAAFA,GAAc7sD,GAGJ,EAAcitC,SAClBvyC,KAAKoyD,WAAU,EAEfpyD,KAAKqyD,IAAG,EAlFd,MAAAF,oBA6HE,QAAFG,GACwBC,EACZC,EACsBr0C,GAFVne,KAAxBuyD,YAAwBA,EACZvyD,KAAZwyD,WAAYA,EA1BZxyD,KAAAyyD,gBAA4B,GAAIx4B,KAMhCj6B,KAAA0yD,gBAA4B,GAAIz4B,KAGhCj6B,KAAA2yD,kBAA8B,GAAI14B,KAGlCj6B,KAAA4yD,sBAAkC,GAAI34B,KAGtCj6B,KAAA6yD,uBAAmC,GAAI54B,KAOvCj6B,KAAA8yD,qBAAiC,iBAM3B9yD,KAAKmB,UAAYgd,EAjIvB,MAyIEm0C,GAAF/xD,UAAAwyD,WAAE,SAAWC,EAAkBX,GAC3B,MAAOryD,MAAKizD,sBAAsB,GAAID,EAAUX,IAQlDC,EAAF/xD,UAAA2yD,kBAAE,SAAkBF,EAAkBG,GAClC,MAAOnzD,MAAKozD,6BAA6B,GAAIJ,EAAUG,IASzDb,EAAF/xD,UAAA0yD,sBAAE,SAAsBI,EAAmBL,EAAkBX,GACzD,MAAOryD,MAAKszD,kBAAkBD,EAAWL,EAAU,GAAIb,IAAcE,KASvEC,EAAF/xD,UAAA6yD,6BAAE,SAA6BC,EAAmBL,EAAkBG,GAChE,GAAMI,GAAmBvzD,KAAKwyD,WAAWgB,SAASC,EAAAA,gBAAgBC,KAAMP,EAExE,KAAKI,EACH,KAAMI,IAAuCR,EAG/C,IAAMf,GAAapyD,KAAK4zD,+BAA+BL,EACvD,OAAOvzD,MAAKszD,kBAAkBD,EAAWL,EAAU,GAAIb,IAAcC,KAOvEE,EAAF/xD,UAAAszD,cAAE,SAAcxB,GACZ,MAAOryD,MAAK8zD,yBAAyB,GAAIzB,IAO3CC,EAAF/xD,UAAAwzD,qBAAE,SAAqBZ,GACnB,MAAOnzD,MAAKg0D,gCAAgC,GAAIb,IAQlDb,EAAF/xD,UAAAuzD,yBAAE,SAAyBT,EAAmBhB,GAC1C,MAAOryD,MAAKi0D,qBAAqBZ,EAAW,GAAIlB,IAAcE,KAQhEC,EAAF/xD,UAAAyzD,gCAAE,SAAgCX,EAAmBF,GACjD,GAAMI,GAAmBvzD,KAAKwyD,WAAWgB,SAASC,EAAAA,gBAAgBC,KAAMP,EAExE,KAAKI,EACH,KAAMI,IAAuCR,EAG/C,IAAMf,GAAapyD,KAAKk0D,sBAAsBX,EAC9C,OAAOvzD,MAAKi0D,qBAAqBZ,EAAW,GAAIlB,IAAcC,KAWhEE,EAAF/xD,UAAA4zD,uBAAE,SAAuBC,EAAexW,GAEpC,WAFJ,KAAAA,IAAwCA,EAAxCwW,GACIp0D,KAAK6yD,uBAAuBr4B,IAAI45B,EAAOxW,GAChC59C,MAOTsyD,EAAF/xD,UAAA8zD,sBAAE,SAAsBD,GACpB,MAAOp0D,MAAK6yD,uBAAuB91C,IAAIq3C,IAAUA,GASnD9B,EAAF/xD,UAAA+zD,uBAAE,SAAuB1W,GAErB,MADA59C,MAAK8yD,qBAAuBlV,EACrB59C,MAOTsyD,EAAF/xD,UAAAg0D,uBAAE,WACE,MAAOv0D,MAAK8yD,sBAWdR,EAAF/xD,UAAAi0D,kBAAE,SAAkBC,GAAlB,GAAFr0D,GAAAJ,KACUqyD,EAAMryD,KAAKwyD,WAAWgB,SAASC,EAAAA,gBAAgBiB,aAAcD,EAEnE,KAAKpC,EACH,KAAMsC,IAAmCF,EAG3C,IAAMG,GAAa50D,KAAK2yD,kBAAkB51C,IAAIs1C,EAE9C,OAAIuC,GACKt/C,EAAAA,GAAau/C,GAASD,IAGxB50D,KAAK80D,uBAAuB,GAAI3C,IAAcsC,IAAU7sD,KAC7DmtD,EAAAA,IAAI,SAAAC,GAAO,MAAA50D,GAAKuyD,kBAAkBn4B,IAAG,EAAOw6B,KAC5CjrD,EAAAA,IAAI,SAAAirD,GAAO,MAAAH,IAASG,OAYxB1C,EAAF/xD,UAAA00D,gBAAE,SAAgBz0C,EAAc6yC,OAAhC,KAAAA,IAAgCA,EAAhC,GAEI,IAAM9pC,GAAM2rC,GAAQ7B,EAAW7yC,GACzBsW,EAAS92B,KAAKyyD,gBAAgB11C,IAAIwM,EAExC,IAAIuN,EACF,MAAO92B,MAAKm1D,kBAAkBr+B,EAIhC,IAAMs+B,GAAiBp1D,KAAK0yD,gBAAgB31C,IAAIs2C,EAEhD,OAAI+B,GACKp1D,KAAKq1D,0BAA0B70C,EAAM40C,GAGvCE,EAAAA,WAAgBC,GAA4BhsC,KAM7C+oC,EAAV/xD,UAAA40D,kBAAA,SAA4Br+B,GACxB,MAAIA,GAAOs7B,WAEF98C,EAAAA,GAAau/C,GAAS/9B,EAAOs7B,aAG7BpyD,KAAK80D,uBAAuBh+B,GAAQlvB,KACzCmtD,EAAAA,IAAI,SAAAC,GAAO,MAAAl+B,GAAOs7B,WAAa4C,IAC/BjrD,EAAAA,IAAI,SAAAirD,GAAO,MAAAH,IAASG,OAalB1C,EAAV/xD,UAAA80D,0BAAA,SAAoC70C,EAAc40C,cAIxCI,EAAYx1D,KAAKy1D,+BAA+Bj1C,EAAM40C,EAE5D,IAAII,EAIF,MAAOlgD,GAAAA,GAAakgD,EAKtB,IAAME,GAAwDN,EAC3Dt0D,OAAO,SAAA60D,GAAiB,OAACA,EAAcvD,aACvCroD,IAAI,SAAA4rD,GACH,MAAOv1D,GAAKw1D,0BAA0BD,GAAe/tD,KACnDiuD,EAAAA,WAAW,SAACC,GACV,GAAMzD,GAAMjyD,EAAKoyD,WAAWgB,SAASC,EAAAA,gBAAgBiB,aAAciB,EAActD,IAKjF,OADAvK,SAAQD,MAAM,yBAAyBwK,EAAnD,YAAkEyD,EAAI5+B,SACnD5hB,EAAAA,GAAa,UAO5B,OAAOygD,GAAAA,SAASL,GAAsB9tD,KAAKmC,EAAAA,IAAI,WAC7C,GAAMisD,GAAY51D,EAAKq1D,+BAA+Bj1C,EAAM40C,EAE5D,KAAKY,EACH,KAAMT,IAA4B/0C,EAGpC,OAAOw1C,OASH1D,EAAV/xD,UAAAk1D,+BAAA,SAAyCzC,EAAkBoC,GAGvD,IAAK,GAAIzsD,GAAIysD,EAAe50D,OAAS,EAAGmI,GAAK,EAAGA,IAAK,CACnD,GAAMmuB,GAASs+B,EAAezsD,EAC9B,IAAImuB,EAAOs7B,WAAY,CACrB,GAAM4D,GAAYh2D,KAAKi2D,uBAAuBn/B,EAAOs7B,WAAYY,EACjE,IAAIgD,EACF,MAAOA,IAIb,MAAO,OAOD1D,EAAV/xD,UAAAu0D,uBAAA,SAAiCh+B,aAC7B,OAAO92B,MAAKk2D,UAAUp/B,EAAOu7B,KACxBzqD,KAAKmC,EAAAA,IAAI,SAAAosD,GAAW,MAAA/1D,GAAKwzD,+BAA+BuC,OAOvD7D,EAAV/xD,UAAAq1D,0BAAA,SAAoC9+B,aAEhC,OAAIA,GAAOs7B,WACF98C,EAAAA,GAAawhB,EAAOs7B,YAGtBpyD,KAAKk2D,UAAUp/B,EAAOu7B,KAAKzqD,KAAKmC,EAAAA,IAAI,SAAAosD,GAOzC,MAJKr/B,GAAOs7B,aACVt7B,EAAOs7B,WAAahyD,EAAK8zD,sBAAsBiC,IAG1Cr/B,EAAOs7B,eAOVE,EAAV/xD,UAAAqzD,+BAAA,SAAyCwC,GACrC,GAAMpB,GAAMh1D,KAAKk0D,sBAAsBkC,EAEvC,OADAp2D,MAAKq2D,kBAAkBrB,GAChBA,GAQD1C,EAAV/xD,UAAA01D,uBAAA,SAAiCK,EAAqBtD,GAClD,GAAMuD,GAAaD,EAAQhP,cAAc,IAAM0L,EAE/C,KAAKuD,EACH,MAAO,KAKT,IAAMC,GAAcD,EAAWE,WAAU,EAKzC,IAJAD,EAAYE,gBAAgB,MAIe,QAAvCF,EAAYjkB,SAAS5oB,cACvB,MAAO3pB,MAAKq2D,kBAAiB,EAM/B,IAA2C,WAAvCG,EAAYjkB,SAAS5oB,cACvB,MAAO3pB,MAAKq2D,kBAAkBr2D,KAAK22D,cAAcH,GAQnD,IAAMxB,GAAMh1D,KAAKk0D,sBAAsB,cAIvC,OAFAc,GAAInuB,YAAY2vB,GAETx2D,KAAKq2D,kBAAkBrB,IAMxB1C,EAAV/xD,UAAA2zD,sBAAA,SAAgC0C,GAC5B,GAAMC,GAAM72D,KAAKmB,UAAUwlC,cAAc,MACzCkwB,GAAIC,UAAYF,CAChB,IAAM5B,GAAM6B,EAAIvP,cAAc,MAE9B,KAAK0N,EACH,KAAMt/B,OAAM,sBAGd,OAAOs/B,IAMD1C,EAAV/xD,UAAAo2D,cAAA,SAAwBvqD,GAGpB,IAAK,GAFD4oD,GAAMh1D,KAAKk0D,sBAAsB,eAE5BvrD,EAAI,EAAGA,EAAIyD,EAAQvL,WAAWL,OAAQmI,IACzCyD,EAAQvL,WAAW8H,GAAGzH,WAAalB,KAAKmB,UAAU41D,cACpD/B,EAAInuB,YAAYz6B,EAAQvL,WAAW8H,GAAG8tD,WAAU,GAIpD,OAAOzB,IAMD1C,EAAV/xD,UAAA81D,kBAAA,SAA4BrB,GAMxB,MALAA,GAAIgC,aAAa,MAAO,IACxBhC,EAAIgC,aAAa,SAAU,QAC3BhC,EAAIgC,aAAa,QAAS,QAC1BhC,EAAIgC,aAAa,sBAAuB,iBACxChC,EAAIgC,aAAa,YAAa,SACvBhC,GAOD1C,EAAV/xD,UAAA21D,UAAA,SAAoBzB,aAChB,KAAKz0D,KAAKuyD,YACR,KAAM0E,KAGR,IAAe,MAAXxC,EACF,KAAM/+B,OAAM,+BAA+B++B,EAAjD,KAGI,IAAMpC,GAAMryD,KAAKwyD,WAAWgB,SAASC,EAAAA,gBAAgBiB,aAAcD,EAEnE,KAAKpC,EACH,KAAMsC,IAAmCF,EAM3C,IAAMyC,GAAkBl3D,KAAK4yD,sBAAsB71C,IAAIs1C,EAEvD,IAAI6E,EACF,MAAOA,EAKT,IAAMC,GAAMn3D,KAAKuyD,YAAYx1C,IAAIs1C,GAAM+E,aAAc,SAASxvD,KAC5DyvD,EAAAA,SAAS,WAAM,MAAAj3D,GAAKwyD,sBAAsBn4B,OAAO43B,KACjDiF,EAAAA,QAIF,OADAt3D,MAAK4yD,sBAAsBp4B,IAAI63B,EAAK8E,GAC7BA,GASD7E,EAAV/xD,UAAA+yD,kBAAA,SAA4BD,EAAmBL,EAAkBl8B,GAE7D,MADA92B,MAAKyyD,gBAAgBj4B,IAAI06B,GAAQ7B,EAAWL,GAAWl8B,GAChD92B,MAQDsyD,EAAV/xD,UAAA0zD,qBAAA,SAA+BZ,EAAmBv8B,GAC9C,GAAMygC,GAAkBv3D,KAAK0yD,gBAAgB31C,IAAIs2C,EAQjD,OANIkE,GACFA,EAAgBhwD,KAAKuvB,GAErB92B,KAAK0yD,gBAAgBl4B,IAAI64B,GAAYv8B,IAGhC92B,qBA5eXyB,KAACsd,EAAAA,WAADpd,OAAakK,WAAY,+CArFzBpK,KAAQ+1D,EAAAA,WAAR50D,aAAAnB,KAqHK2W,EAAAA,aA5GL3W,KAAQg2D,EAAAA,eA8GRh2D,SAAAkB,GAAAC,aAAAnB,KAAK2W,EAAAA,WAAL3W,KAAiBoB,EAAAA,OAAjBlB,MAAwBmB,EAAAA,4LAhIxBwvD,KAwlBaoF,IAEX5yD,QAASwtD,GACTpzC,OACG,GAAI9G,GAAAA,SAAY,GAAI+G,GAAAA,SAAYmzC,KAChC,GAAIl6C,GAAAA,SAAYo/C,EAAAA,YACjBC,EAAAA,cACC,GAAIr/C,GAAAA,SAAYtV,EAA+B,WAElDsc,WAAYu4C,ICtkBdC,GAAA,WACE,QAAFA,GAAqBj3D,GAAAX,KAArBW,YAAqBA,EA5BrB,MAAAi3D,MA8BaC,GACTp/C,EAAWm/C,mBAiFb,QAAFE,GACMxlD,EACQylD,EACkBC,GAH9B,GAAF53D,GAIIkE,EAJJ5D,KAAAV,KAIUsS,IAJVtS,WAEcI,GAAd23D,cAAcA,EA1Bd33D,EAAA63D,SAA6B,EAgCpBD,GACH1lD,EAAW1R,cAAco2D,aAAa,cAAe,UAnB3D,MA1B6BvyD,GAA7BqzD,EAAAxzD,GAKE8E,OAAFC,eACMyuD,EADNv3D,UAAA,cAAE,WAEE,MAAOP,MAAKi4D,aAEd,SAAWC,GACTl4D,KAAKi4D,QAAU3+C,EAAAA,sBAAsB4+C,oCAQvC9uD,OAAFC,eACMyuD,EADNv3D,UAAA,eAAE,WACwB,MAAOP,MAAKm4D,cACpC,SAAY7uD,GACVtJ,KAAKm4D,SAAWn4D,KAAKo4D,kBAAkB9uD,oCAKzCF,OAAFC,eACMyuD,EADNv3D,UAAA,gBAAE,WACyB,MAAOP,MAAKq4D,eACrC,SAAa/uD,GACXtJ,KAAKq4D,UAAYr4D,KAAKo4D,kBAAkB9uD,oCAiClCwuD,EAAVv3D,UAAA+3D,eAAA,SAAyBtF,GACrB,IAAKA,EACH,OAAQ,GAAI,GAEd,IAAMuF,GAAQvF,EAASvuB,MAAM,IAC7B,QAAQ8zB,EAAM/3D,QACZ,IAAK,GAAG,OAAQ,GAAI+3D,EAAM,GAC1B,KAAK,GAAG,MAAA,EACR,SAAS,KAAM7iC,OAAM,uBAAuBs9B,EAAlD,OAIE8E,EAAFv3D,UAAA0N,YAAE,SAAY/N,GAAZ,GAAFE,GAAAJ,IAEI,IAAIE,EAAR,QACM,GAAIF,KAAKw4D,QAAS,CAChB,GAAR/zC,GAAAzkB,KAAAs4D,eAAAt4D,KAAAw4D,SAAenF,EAAf5uC,EAAA,GAA0BuuC,EAA1BvuC,EAAA,EAEQzkB,MAAK+3D,cAAc9C,gBAAgBjC,EAAUK,GAAWzrD,KAAKC,EAAAA,KAAK,IAAI1H,UACpE,SAAA60D,GAAO,MAAA50D,GAAKq4D,eAAezD,IAC3B,SAACc,GAAe,MAAAhO,SAAQ4Q,IAAI,0BAA0B5C,EAAI5+B,eAG5Dl3B,MAAK24D,kBAIL34D,MAAK44D,kBACP54D,KAAK64D,0BAITf,EAAFv3D,UAAA6N,SAAE,WAGMpO,KAAK44D,kBACP54D,KAAK64D,0BAIDf,EAAVv3D,UAAAq4D,0BACI,OAAQ54D,KAAKw4D,SAGPV,EAAVv3D,UAAAk4D,eAAA,SAAyBzD,GACrBh1D,KAAK24D,kBAOL,KAAK,GAFCG,GAAY9D,EAAI+D,iBAAiB,SAE9BpwD,EAAI,EAAGA,EAAImwD,EAAUt4D,OAAQmI,IACpCmwD,EAAUnwD,GAAGrH,aAAe,GAG9BtB,MAAKW,YAAYC,cAAcimC,YAAYmuB,IAGrC8C,EAAVv3D,UAAAo4D,4BAMI,IALA,GAAMK,GAA6Bh5D,KAAKW,YAAYC,cAChDq4D,EAAaD,EAAcn4D,WAAWL,OAInCy4D,KAAc,CACnB,GAAMjxD,GAAQgxD,EAAcn4D,WAAWo4D,EAIhB,KAAnBjxD,EAAM9G,UAAmD,QAAjC8G,EAAMuqC,SAAS5oB,eACzCqvC,EAAcE,YAAYlxD,KAKxB8vD,EAAVv3D,UAAAs4D,kCACI,GAAK74D,KAAK44D,iBAAV,CAIA,GAAMO,GAAoBn5D,KAAKW,YAAYC,cACrCw4D,EAAep5D,KAAKq5D,QACtBr5D,KAAK+3D,cAAc1D,sBAAsBr0D,KAAKq5D,SAC9Cr5D,KAAK+3D,cAAcxD,wBAEnB6E,IAAgBp5D,KAAKs5D,wBACnBt5D,KAAKs5D,uBACPH,EAAKn4D,UAAUwY,OAAOxZ,KAAKs5D,uBAEzBF,GACFD,EAAKn4D,UAAU0Y,IAAI0/C,GAErBp5D,KAAKs5D,sBAAwBF,GAG3Bp5D,KAAKu5D,UAAYv5D,KAAKw5D,yBACpBx5D,KAAKw5D,wBACPL,EAAKn4D,UAAUwY,OAAOxZ,KAAKw5D,wBAEzBx5D,KAAKu5D,UACPJ,EAAKn4D,UAAU0Y,IAAI1Z,KAAKu5D,UAE1Bv5D,KAAKw5D,uBAAyBx5D,KAAKu5D,YAS/BzB,EAAVv3D,UAAA63D,kBAAA,SAA4B9uD,GACxB,MAAwB,gBAAVA,GAAqBA,EAAM/H,OAAOkjC,MAAM,KAAK,GAAKn7B,kBA9LpE7H,KAACC,EAAAA,UAADC,OAAAG,SAAA,4BACEF,SAAU,WACVC,SAAU,UACVE,QAAF,spBACEC,QAAF,SACEC,MACFsC,KAAA,MACMrC,MAAN,WACIu3D,0BAAJ,UAEAj3D,cAAAC,EAAAA,kBAAAC,KACAL,gBAAAC,EAAAA,wBAAAC,6EA3DAd,KAAEyD,OAAFtC,aAAAnB,KAAA0D,EAAAA,UAAAxD,MAAA,oBAsGAm2D,EAAA/0D,iEAlCAs2D,UAAA53D,KAAA2D,EAAAA,QAUAm0D,WAAA93D,KAAA2D,EAAAA,SAWA0yD,mCCtGA,sBAaAr2D,KAACuB,EAAAA,SAADrB,OACEsB,SAAUC,IACVC,SAAU20D,GAAS50D,IACnBG,cAAey0D,QAhBjBpyC,KR8BAg0C,GAAA,yBA9BA,MAAAA,MA+Ba/M,GACT35C,EAAmB0mD,IAIvBC,GAAA,yBApCA,MAAAA,MAqCaC,GACT5mD,EAAmB2mD,+EAevB,MACgCl1D,GAAhColD,EAAAvlD,kBAdA7C,KAACC,EAAAA,UAADC,OAAAC,SAAA,eACEC,SAAU,aACVI,MACFsC,KAAA,aACMrC,MAAN,gBAEAJ,SAAA,4BACAC,QAAA;w/8BACEC,QAAF,iBACEQ,cAAFC,EAAAA,kBAAAC,KACEL,gBAAFC,EAAAA,wBAAAC,WAGAsnD,OACAD,GAAA,SAAAtlD,gBAaA,MAAA,QAAAA,GAAAA,EAAAwF,MAAA9J,KAAAukB,YAAAvkB,KAHA,MAVAyE,GAAAmlD,EAAAtlD,kGAEAxC,SAAA,4BACEG,MAAQC,MAAS,YACjBH,QAAF;w/8BACEC,QAAF,iBACEQ,cAAFC,EAAAA,kBAAAC,KACEL,gBAAgBC,EAAAA,wBAAlBC,WAGAqnD,GACA+C,gCASA,+HAAA5C,iCAUA,yHAAAC,iCAUA,0HAAAC,KAGAH,GAAA,SAAAxlD,yDAkBAlE,EAAAwsD,SAAAA,EAQAxsD,EAAAysD,YAAA,EAAEzsD,EAAFysD,aAAAD,CACkC,IAAlCxgD,GAA0ChM,EAA1CyiB,iBAOI,OAdJzW,GAAAmmC,UAAA,WAAqCnmC,EAArCmmC,SAAA5oB,gBASAvd,EAAmB0gD,aAAa;kHAKhC1sD,gBAIA0pD,EAAAvpD,UAAAkF,+FASE,gHAKA,8DAAFhE,KAAAC,EAAAA,UAAAC,OAAAC,SAAA,yDACgBC,SAAhB,cACAI,4BAlDAmoD,+BAAA,mBACAC,oCAAA,oBAEEroD,QAAF,iBACAF,SAAA,8aAEAO,gBAAAC,EAAAA,wBAAAC,WAIAunD,EAAA9kC,eAAe,WAAf,QACAvjB,KAAAuD,EAAAA,aACAvD,KAAAooD,GAAAjnD,aAAAnB,KAAA2W,EAAAA,sHAlGAkyC,QAAA7oD,KAAAm+B,EAAAA,aAAAj+B,MAAAqoD,cF6BAO,GAAA,yBA5CA,MAAAA,MA6Cad,GACTz2C,EAAmBu3C,IAGvBC,GAAA,yBAjDA,MAAAA,MAkDaC,GACTz3C,EAAmBw3C,IAGVlB,IACXxkD,QAASw8B,EAAAA,kBACTv8B,YAAayL,EAAAA,WAAW,WAAM,MAAA+4C,MAC9B/nB,OAAO,GAITkpB,GAAA,WACE,QAAFA,GAEW96B,EAEA40B,GAFAxkD,KAAX4vB,OAAWA,EAEA5vB,KAAXwkD,OAAWA,EAlEX,MAAAkG,qBA0IE,QAAFlB,GAAsBhnC,EACAqlB,EAE2C8iB,GAH/D,GAAFvqD,GAIIkE,EAJJ5D,KAAAV,OAAAA,WAAsBI,GAAtBoiB,SAAsBA,EACApiB,EAAtBynC,gBAAsBA,EAE2CznC,EAAjEuqD,cAAiEA,EA3CjEvqD,EAAA2nC,WAAsB,EACtB3nC,EAAA8nC,WAAsB,EAUtB9nC,EAAAwqD,iBAAkD,UAkBlD,MAhCmCnmD,GAAnC+kD,EAAAllD,GAoBE8E,OAAFC,eACMmgD,EADNjpD,UAAA,gBAAE,WACiB,MAAOP,MAAKkoC,WAAcloC,KAAK2qD,eAAiB3qD,KAAK2qD,cAAcn0C,cACpF,SAAalN,GACX,GAAM+8B,GAAW/sB,EAAAA,sBAAsBhQ,EAEnC+8B,KAAarmC,KAAKkoC,YACpBloC,KAAKkoC,UAAY7B,EACjBrmC,KAAK6nC,gBAAgB12B,iDAKzB/H,OAAFC,eACMmgD,EADNjpD,UAAA,gBAAE,WAC0B,MAAOP,MAAK2qD,cAAc3E,gBAAgBwC,WAAWxoD,WAC/E,SAAasJ,GACX,GAAMk/C,GAAalvC,EAAAA,sBAAsBhQ,EAErCk/C,KAAexoD,KAAK+nC,YACtB/nC,KAAK6qD,aAAarC,GAClBxoD,KAAK2qD,cAAcG,uDAWvBtB,EAAFjpD,UAAA6N,SAAE,WAAA,GAAFhO,GAAAJ,KAMUuoD,EAAcvoD,KAAK+nC,SAEzB58B,SAAQC,UAAUC,KAAK,YACjBjL,EAAK2nC,WAAawgB,KACpBnoD,EAAK6iB,UAAW,EAChB7iB,EAAKynC,gBAAgB12B,mBAK3Bq4C,EAAFjpD,UAAAkF,mBAAE,WAGE,GAAIslD,IAAc/qD,KAAKgrD,OAAQhrD,KAAKwiB,WAGtCgnC,EAAFjpD,UAAAmF,YAAE,WAAA,GAAFtF,GAAAJ,IACQA,MAAKijB,UAGP9X,QAAQC,UAAUC,KAAK,WAAM,MAAAjL,GAAK6iB,UAAW,IAG/CjjB,KAAK2qD,cAAcM,sBAAsBjrD,OAI3CwpD,EAAFjpD,UAAAoiC,OAAE,WACE3iC,KAAKijB,UAAYjjB,KAAKijB,UAIxBumC,EAAFjpD,UAAAgS,MAAE,WACEvS,KAAKwiB,SAAS5hB,cAAc2R,SAO9Bi3C,EAAFjpD,UAAAw7C,SAAE,WACE,MAAO/7C,MAAKkrD,MAASlrD,KAAKkrD,MAAMtqD,cAAcU,aAAe,GAAM,IAIrEkoD,EAAFjpD,UAAAgpC,kBAAE,WACE,MAAOvpC,MAAKwW,UAAYxW,KAAKwpC,eAAiBxpC,KAAK2qD,cAAcnhB,eAGnEggB,EAAFjpD,UAAAua,aAAE,WACO9a,KAAKwW,WACRxW,KAAK2iC,SAGL3iC,KAAK2qD,cAAcr9B,iBAAiBttB,QAIxCwpD,EAAFjpD,UAAA4qD,aAAE,WACEnrD,KAAK2qD,cAAcS,kBAAkBprD,OAGvCwpD,EAAFjpD,UAAA8qD,YAAE,WACErrD,KAAK2qD,cAAc3G,cAIrBwF,EAAFjpD,UAAAsiB,gBAAE,WACE,MAAO7iB,MAAKwiB,SAAS5hB,eAIvB4oD,EAAFjpD,UAAAsqD,aAAE,SAAa5nC,GACX,MAAIA,KAAajjB,KAAK+nC,YAItB/nC,KAAK+nC,UAAY9kB,EAEbA,EACFjjB,KAAK2qD,cAAc3E,gBAAgBV,OAAOtlD,MAE1CA,KAAK2qD,cAAc3E,gBAAgBR,SAASxlD,MAG9CA,KAAK6nC,gBAAgB12B,gBACd,IAQTq4C,EAAFjpD,UAAAooC,cAAE,WACE3oC,KAAK6nC,gBAAgB12B,+BA5KzB1P,KAACC,EAAAA,UAADC,OAAAC,SAAA,kBACEC,SAAU,gBACVG,QAAF,iBACEC,MACFsC,KAAA,SACMrC,MAAN,gCACIquB,UAAJ,iBACIC,SAAJ,gBACI/pB,UAAW,iBACX6kD,SAAJ,KACIC,iCAAJ,WACIlB,oCAAJ,mBACImB,uBAAJ,sBACI34C,uBAAJ,uBAEA/Q,SAAA,6gBACAU,cAAAC,EAAAA,kBAAAC,KACEL,gBAAFC,EAAAA,wBAAAC,8FAvEAd,KAAE8nD,GAAF3mD,aAAAnB,KAAAoB,EAAAA,OAAAlB,MAAA6O,EAAAA,WAAA,WAAA,MAAA+4C,YAyHAC,EAAAzmD,kGAxCAioD,SAAAvpD,KAAAoE,EAAAA,gBAAAlE,MAAA8pD,MACAP,QAAAzpD,KAAG+M,EAAAA,UAAH7M,MAAA,UACAipD,mBAAAnpD,KAAA2D,EAAAA,QAGAkE,QAAA7H,KAAG2D,EAAAA,QAGHoR,WAAA/U,KAAA2D,EAAAA,QAGA6d,WAAAxhB,KAAA2D,EAAAA,SAeAokD,sCAmJA,GAAAppD,GAAAkE,EAAA5D,KAAAV,OAAAA,IAoDA,OAEAI,GAAAoiB,SAAAA,iOAFApiB,EAtCA,4DAUA2c,2KAWAE,YAAA,EACAC,cAAA,mGAuBAvH,WACSkoC,gBAGT6N,cAAA,WAAA,OAAA,IACM1rD,KAAN2rD,cACA3rD,KAAA4rD,sBAAA5rD,KAAA2rD,aAEQ3rD,KAAK2rD,YAAb,MAGA3rD,KAAA6rD,cAAA7rD,KAAAgmD,gBAAA,SAAA7lD,UAAA,SAAAuU,cAGA,IAAA,GAAAo3C,GAAA,EAAArnC,EAAA/P,EAAA2wC,MAAAyG,EAAArnC,EAAAjkB,OAAAsrD,IAAA,CACA,GAAA7N,GAAAx5B,EAAAqnC,EACA7N,GAAAh7B,UAAA,EAEA,GAAAvO,EAAA6wC,QACA,IAAA,GAAA3D,GAAA,EAAAE,EAAAptC,EAAA6wC,QAAA3D,EAAAE,EAAAthD,OAAAohD,IAAA,CAEA,GAAA3D,GAAyB6D,EAAzBF,EACA3D,GAAAh7B,UAAA,4aAgCA,GAAA8oC,GAAA/rD,KAAAipD,gBAAAzE,gDAGAuH,EAAA,2CAGA,IAAaA,GAAb/rD,KAAAusC,QAAA/rC,OAAA,GACAR,KAAA8T,YAAAk4C,uDAOA,GAAAr3C,GAAAD,EAAAC,QACU4xC,EAAUvmD,KAAK8T,YACfm4C,EAAV1F,EAAAlH,0BACU,IAAVnqC,GAAAA,MAEA,IAAAD,GAAAA,MACAjV,KAAAksD,uBAEQx3C,EAARI,sBAEA,KAAAF,GAAAA,KACA,IAAAG,GAAAA,IACAJ,IAAAC,EAAAA,KAAA2xC,EAAA1xC,qBAAA0xC,EAAAvxC,oBACAN,EAAAI,gBACQ,MACR,KAAA0xC,GAAAA,EACA9xC,EAAA+xC,UACAzmD,KAAAusC,QAAAzwB,KAAA,SAAA0oC,GAAA,OAAAA,EAAAvhC,WAAAjjB,KAAAmsD,YAAAnsD,KAAAosD,cACY13C,EAAMI,iBAElB,MACA,SACQyxC,EAARnxC,UAAAV,GAEAC,IAAAyZ,EAAAA,UAAAzZ,IAAA2Z,EAAAA,aAAA5Z,EAAAmyC,UACAN,EAAAlH,kBAAA4M,GAEQjsD,KAARksD,gFAOAlsD,KAAA+jD,UAAA/jD,KAAAqsD,iKAYArsD,KAAA4rD,sBAAAU,OAGAtsD,KAAA2rD,YAAAW,6OAqBAtsD,MAAAusC,QAAAxkC,QAAA,SAAAy8C,GAAA,MAAAA,GAAAqG,cAAA,OACS9gD,IAAT,SAAAT,GAEA,MAAAlJ,GAAAmsC,QAAAzwB,KAAA,SAAA0oC,GACU,MAAVpkD,GAAAswC,YAAAtwC,EAAAswC,YAAA8T,EAAAl7C,MAAAA,GAAAk7C,EAAAl7C,QAAAA,MAE6FxI,OAA7FyrD,SACAxkD,QAAA,SAAAy8C,GAAA,MAAA,GAAAqG,cAAA,yQAcQ,GAAR2B,GAA4BxsD,KAA5BusC,QAAAh2B,UAAmDk2C,oBACzCD,EAAV7pB,oFAgBA,GAAA+pB,IAAA,mCAGAlI,EAAAqG,aAAArC,KAEAkE,GAAyB,KAGzBA,GACA1sD,KAAA8qD,kLAkBAvB,EAAA3mD,+FA1RAZ,QAAA,WAAA,gBAAA,YACEC,MACFsC,KAAA,UACAusB,aAAA,WACA5uB,MAAA,qBACMquB,UAAN,UACIC,SAAJ,eACIC,YAAJ,mBACI5d,uBAAJ,uBAEA/Q,SAAA,4BACAC,QAAA;w/8BACAS,cAAAC,EAAAA,kBAAAC,KACAmC,WAAAykD,IACEjnD,gBAAFC,EAAAA,wBAAAC,WAIAgnD,EAAAvkC,eAAA,WAAA,QACAvjB,KAAAuD,EAAAA,gGA7PAunC,UAAA9qC,KAAYoE,EAAAA,gBAAZlE,MAAA6nD,MAoTA3Y,kBAAApvC,KAAAuQ,EAAAA,gEA/CAwE,WAAA/U,KAAA2D,EAAAA,SAOAmkD,GAOAE,gCCvSA,sBA4BAhoD,KAACuB,EAAAA,SAADrB,OACEsB,SAAUymD,GAAe9rC,GAAiB1a,GAAiBymD,GAAyB/iD,EAAAA,cACpFzD,SACEymD,GACAC,GACAC,GACAC,GACAL,GACAxmD,GACA8mD,GACAC,GACAN,GACAJ,GACAC,GACAU,IAEF7mD,cACEumD,GACAC,GACAC,GACAC,GACAC,GACAC,GACAV,GACAC,QApDJW,mBTmCE,QAAF9P,GACYE,EACAG,EACAC,EACAtkB,EACA5oB,EACkBtM,GALlBnB,KAAZu6C,UAAYA,EACAv6C,KAAZ06C,0BAAYA,EACA16C,KAAZ26C,QAAYA,EACA36C,KAAZq2B,UAAYA,EACAr2B,KAAZyN,kBAAYA,EACkBzN,KAA9BmB,UAA8BA;iBAR9BnB,KAAAo6C,UAAc,GAAIvsC,GAAAA,QAjClB,MA+CEwsC,GAAF95C,UAAA0P,OAAE,SAAOqqC,OAAT,KAAAA,IAASA,MACAt6C,KAAKwzC,UACRxzC,KAAKwzC,QAAU,GAAInlC,GAAAA,eAAerO,KAAKu6C,UAAWv6C,KAAKyN,oBAGzDzN,KAAKoQ,SAEApQ,KAAKw6C,UACRx6C,KAAKw6C,QAAU,GAAIC,GAAAA,gBAAgBz6C,KAAKmB,UAAUwlC,cAAc,OAC5D3mC,KAAK06C,0BAA2B16C,KAAK26C,QAAS36C,KAAKq2B,WAGzD,IAAMjqB,GAAuBpM,KAAKu6C,UAAUjoC,WAAW1R,aAKvDwL,GAAkB,WAAEwuC,aAAa56C,KAAKw6C,QAAQK,cAAezuC,GAC7DpM,KAAKwzC,QAAQvjC,OAAOjQ,KAAKw6C,QAASF,GAClCt6C,KAAKo6C,UAAU7wC,QAOjB8wC,EAAF95C,UAAA6P,OAAE,WACMpQ,KAAKwzC,QAAQsH,YACf96C,KAAKwzC,QAAQpjC,UAIjBiqC,EAAF95C,UAAAmF,YAAE,WACM1F,KAAKw6C,SACPx6C,KAAKw6C,QAAQjnB,0BAxDnB9xB,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,sEAhBZH,KAAEyL,EAAAA,cACFzL,KAAE6O,EAAAA,2BACF7O,KAAEs5C,EAAAA,iBACFt5C,KAAEk4B,EAAAA,WACFl4B,KAAEiC,EAAAA,mBA2BFjC,SAAAkB,GAAAC,aAAAnB,KAAKoB,EAAAA,OAALlB,MAAYmB,EAAAA,eAzCZu3C,KCwBaW,IAYXC,cAAepsC,EAAAA,QAAQ,iBACrBC,EAAAA,MAAM,OAAQrC,EAAAA,OACZ+nB,QAAS,EACTzlB,UAAW,gBAEbE,EAAAA,WAAW,gBAAiBw9B,EAAAA,OAC1B/tB,EAAAA,MAAM,oBAAqBxP,EAAAA,QAAQ,eAAgBzC,EAAAA,OAAO+nB,QAAS,MACnEtlB,EAAAA,QAAQ,mCAAoCzC,EAAAA,OAAOsC,UAAW,iBAEhEE,EAAAA,WAAW,YAAaC,EAAAA,QAAQ,oBAAqBzC,EAAAA,OAAO+nB,QAAS,QAQvE0mB,YAAarsC,EAAAA,QAAQ,eAGnBC,EAAAA,MAAM,UAAWrC,EAAAA,OAAO+nB,QAAS,KACjCvlB,EAAAA,WAAW,aACTxC,EAAAA,OAAO+nB,QAAS,IAChBtlB,EAAAA,QAAQ,qDASDgsC,GAAcF,GAAkBE,YAMhCD,GAAgBD,GAAkBC,cCxDlCE,GAAiB,GAAIvvC,GAAAA,eAA6B,kBCY/DwvC,GAAA,yBA9BA,MAAAA,MA+BaC,GACTroC,EAAmBjP,EAAcq3C,oBAwCnC,QAAFE,GACY36C,EACUwd,EACV/B,EACoCm/B,GAJ9C,GAAFn7C,GAOIkE,EAAJ5D,KAAAV,OAAAA,WANYI,GAAZO,YAAYA,EAEAP,EAAZgc,cAAYA,EACoChc,EAAhDm7C,YAAgDA,EAZhDn7C,EAAAo7C,SAA4C,GAAI3tC,GAAAA,QAGhDzN,EAAAq7C,cAA0B,EAG1Br7C,EAAAs7C,kBAA8B,EAWtBt/B,GAIFA,EAAcU,QAAQ1c,EAAKO,aAAa,GAGtC46C,GAAeA,EAAYI,SAC7BJ,EAAYI,QAAQv7C,GAGtBA,EAAKe,UAAYgd,IAhBrB,MAlBiC1Z,GAAjC62C,EAAAh3C,GAsCEg3C,EAAF/6C,UAAAgS,MAAE,SAAMxE,OAAR,KAAAA,IAAQA,EAAR,WACQ/N,KAAKoc,cACPpc,KAAKoc,cAAcqgB,SAASz8B,KAAK6iB,kBAAmB9U,GAEpD/N,KAAK6iB,kBAAkBtQ,SAI3B+oC,EAAF/6C,UAAAmF,YAAE,WACM1F,KAAKoc,eACPpc,KAAKoc,cAAce,eAAend,KAAKW,aAGrCX,KAAKu7C,aAAev7C,KAAKu7C,YAAYK,YACvC57C,KAAKu7C,YAAYK,WAAW57C,MAG9BA,KAAKw7C,SAASrtC,YAIhBmtC,EAAF/6C,UAAA0a,aAAE,WACE,MAAOjb,MAAKwW,SAAW,KAAO,KAIhC8kC,EAAF/6C,UAAAsiB,gBAAE,WACE,MAAO7iB,MAAKW,YAAYC,eAI1B06C,EAAF/6C,UAAAs7C,eAAE,SAAennC,GACT1U,KAAKwW,WACP9B,EAAMI,iBACNJ,EAAMqnB,oBAKVuf,EAAF/6C,UAAAu7C,kBAAE,WACE97C,KAAKw7C,SAASjyC,KAAKvJ,OAIrBs7C,EAAF/6C,UAAAw7C,SAAE,WACE,GAAM3vC,GAAuBpM,KAAKW,YAAYC,cACxCo7C,EAAeh8C,KAAKmB,UAAYnB,KAAKmB,UAAU86C,UAAY,EAC7DC,EAAS,EAEb,IAAI9vC,EAAQvL,WAMV,IAAK,GALCs7C,GAAS/vC,EAAQvL,WAAWL,OAKzBmI,EAAI,EAAGA,EAAIwzC,EAAQxzC,IACtByD,EAAQvL,WAAW8H,GAAGzH,WAAa86C,IACrCE,GAAU9vC,EAAQvL,WAAW8H,GAAGrH,YAKtC,OAAO46C,GAAO36C,uBAxHlBE,KAACC,EAAAA,UAADC,OAAAC,SAAA,kBACEC,SAAU,cACVG,QAAF,WAAA,iBACEC,MACFsC,KAAA,WACMrC,MAAN,gBACIk6C,oCAAJ,eACIC,wCAAJ,mBACIxN,kBAAJ,iBACIh8B,uBAAJ,sBACIypC,kBAAmB,mBACnB71C,UAAJ,yBACI2a,eAAJ,uBAEA/e,gBAAAC,EAAAA,wBAAyCC,OACzCC,cAAAC,EAAAA,kBAAAC,KACEZ,SAAF,yRA1CAL,KAAEic,EAAAA,eA8DFjc,SAAAkB,GAAAC,aAAAnB,KAAKoB,EAAAA,OAALlB,MAAYw5C,MAAZ15C,KAAA2W,EAAAA,cAEAkjC,OCdaiB,GACT,GAAI3wC,GAAAA,eAAsC,4BACxCC,WAAY,OACZC,QAAS0wC,mBAqKb,QAAFC,GACY97C,EACAsL,EACkC6lC,GAFlC9xC,KAAZW,YAAYA,EACAX,KAAZiM,QAAYA,EACkCjM,KAA9C8xC,gBAA8CA,EAnI9C9xC,KAAA08C,WAAsC18C,KAAK8xC,gBAAgB6K,UAC3D38C,KAAA48C,WAAsC58C,KAAK8xC,gBAAgB+K,UAI3D78C,KAAA88C,UAGA98C,KAAA+8C,aAAyB,GAAIlvC,GAAAA,QAG7B7N,KAAAg9C,iBAA6BxtC,EAAAA,aAAaC,MAG1CzP,KAAAi9C,cAGAj9C,KAAAk9C,qBAA2C,OAG3Cl9C,KAAAq2C,eAAmB,GAAIxoC,GAAAA,QAYvB7N,KAAAm9C,cAAmCn9C,KAAK8xC,gBAAgBqL,cA8CxDn9C,KAAAo9C,gBAAqCp9C,KAAK8xC,gBAAgBuL,eAQ1Dr9C,KAAAs9C,aAA8Ct9C,KAAK8xC,gBAAgByL,YAiCnEv9C,KAAA6yB,OAAM,GAAI/hB,GAAAA,aAOV9Q,KAAA87B,MAAoB97B,KAAK6yB,OAAzB,MA3FEzpB,QAAFC,eACMozC,EADNl8C,UAAA,iBAAE,WACiC,MAAOP,MAAK08C,gBAC7C,SAAcpzC,GACE,WAAVA,GAAgC,UAAVA,GACxBk0C,KAEFx9C,KAAK08C,WAAapzC,EAClBtJ,KAAKy9C,sDAIPr0C,OAAFC,eACMozC,EADNl8C,UAAA,iBAAE,WACiC,MAAOP,MAAK48C,gBAC7C,SAActzC,GACE,UAAVA,GAA+B,UAAVA,GACvBo0C,KAEF19C,KAAK48C,WAAatzC,EAClBtJ,KAAKy9C,sDAoBPr0C,OAAFC,eACMozC,EADNl8C,UAAA,sBAAE,WACgC,MAAOP,MAAKo9C,qBAC5C,SAAmB9zC,GACjBtJ,KAAKo9C,gBAAkB9jC,EAAAA,sBAAsBhQ,oCAK/CF,OAAFC,eACMozC,EADNl8C,UAAA,mBAAE,WACyC,MAAOP,MAAKs9C,kBACrD,SAAgBh0C,GACdtJ,KAAKs9C,aAAehkC,EAAAA,sBAAsBhQ,oCAU5CF,OAAFC,eACMozC,EADNl8C,UAAA,kBAAE,SACeo9C,GACTA,GAAWA,EAAQn9C,SACrBR,KAAKi9C,WAAaU,EAAQlZ,MAAM,KAAK/a,OAAO,SAACc,EAAUozB,GAErD,MADApzB,GAAIozB,IAAa,EACVpzB,OAGTxqB,KAAKW,YAAYC,cAAcg9C,UAAY,qCAW/Cx0C,OAAFC,eACMozC,EADNl8C,UAAA,iBAAE,WAC0B,MAAOP,MAAKw1B,gBACtC,SAAcmoB,GAAmB39C,KAAKw1B,WAAamoB,mCAkBnDlB,EAAFl8C,UAAA6N,SAAE,WACEpO,KAAKy9C,sBAGPhB,EAAFl8C,UAAAkF,mBAAE,WAAA,GAAFrF,GAAAJ,IACIA,MAAK8T,YAAc,GAAI2B,GAAAA,gBAA6BzV,KAAK88C,QAAQnnC,WAAWkoC,gBAC5E79C,KAAKg9C,iBAAmBh9C,KAAK8T,YAAYgqC,OAAO39C,UAAU,WAAM,MAAAC,GAAKyyB,OAAOphB,KAAK,UAGnFgrC,EAAFl8C,UAAAmF,YAAE,WACE1F,KAAKg9C,iBAAiB3sC,cACtBrQ,KAAK6yB,OAAO1kB,YAIdsuC,EAAFl8C,UAAAi7C,SAAE,WACE,MAAOx7C,MAAK+8C,aAAan1C,KACvBgI,EAAAA,UAAU5P,KAAK88C,QACfiB,EAAAA,UAAU,SAAAC,GAAS,MAAAn0C,GAAAA,MAFzBC,UAAA,GAEkCk0C,EAAMj0C,IAAI,SAAAk0C,GAAQ,MAAAA,GAAKzC,gBAKvDiB,EAAFl8C,UAAAkU,eAAE,SAAeC,GACb,GAAMC,GAAUD,EAAMC,OAEtB,QAAQA,GACN,IAAKi/B,GAAAA,OACH5zC,KAAK6yB,OAAOphB,KAAK,WACjBiD,EAAMqnB,iBACR,MACA,KAAK5N,GAAAA,WACCnuB,KAAKk+C,YAAiC,QAAnBl+C,KAAK+gB,WAC1B/gB,KAAK6yB,OAAOphB,KAAK,UAErB,MACA,KAAK4c,GAAAA,YACCruB,KAAKk+C,YAAiC,QAAnBl+C,KAAK+gB,WAC1B/gB,KAAK6yB,OAAOphB,KAAK,UAErB,MACA,SACMkD,IAAYyZ,EAAAA,UAAYzZ,IAAY2Z,EAAAA,YACtCtuB,KAAK8T,YAAYqqC,eAAe,YAGlCn+C,KAAK8T,YAAYsB,UAAUV,KAQjC+nC,EAAFl8C,UAAA69C,eAAE,SAAerwC,GAAf,GAAF3N,GAAAJ,SAAA,KAAA+N,IAAiBA,EAAjB,WAEQ/N,KAAKq+C,YACPr+C,KAAKiM,QAAQqyC,SAAS5qB,eACnB9rB,KAAKC,EAAAA,KAAK,IACV1H,UAAU,WAAM,MAAAC,GAAK0T,YAAYqqC,eAAepwC,GAAQ8G,uBAE3D7U,KAAK8T,YAAYqqC,eAAepwC,GAAQ8G,sBAQ5C4nC,EAAFl8C,UAAAg+C,gBAAE,WACEv+C,KAAK8T,YAAYuC,eAAe,IAOlComC,EAAFl8C,UAAAi+C,aAAE,SAAaC,GAEX,GAAMC,GAAe,mBAzOO,EAyOqCD,GAC3DE,EAAkBv1C,OAAOqgB,KAAKzpB,KAAKi9C,YAAYnhC,KAAK,SAAA8iC,GAAK,MAAAA,GAAEC,WAAW,oBAEvEF,IAAmBA,IAAoB3+C,KAAK8+C,qBAC3C9+C,KAAK8+C,qBACP9+C,KAAKi9C,WAAWj9C,KAAK8+C,qBAAsB,GAG7C9+C,KAAKi9C,WAAWyB,IAAgB,EAChC1+C,KAAK8+C,mBAAqBJ,IAQ9BjC,EAAFl8C,UAAAo7C,QAAE,SAAQsC,IAM6B,IAA/Bj+C,KAAK88C,OAAOjzB,QAAQo0B,KACtBj+C,KAAK88C,OAAOv1C,KAAK02C,GACjBj+C,KAAK+8C,aAAaxzC,KAAKvJ,KAAK88C,UAQhCL,EAAFl8C,UAAAq7C,WAAE,SAAWqC,GACT,GAAMh2C,GAAQjI,KAAK88C,OAAOjzB,QAAQo0B,EAE9Bj+C,MAAK88C,OAAOjzB,QAAQo0B,IAAS,IAC/Bj+C,KAAK88C,OAAO7xC,OAAOhD,EAAO,GAC1BjI,KAAK+8C,aAAaxzC,KAAKvJ,KAAK88C,UAWhCL,EAAFl8C,UAAAk9C,mBAAE,SAAmBsB,EAAsCC,OAA3D,KAAAD,IAAqBA,EAAsB/+C,KAAK28C,eAAhD,KAAAqC,IAA2DA,EAAsBh/C,KAAK68C,UAClF,IAAMc,GAAU39C,KAAKi9C,UACrBU,GAAQ,mBAA8B,WAAToB,EAC7BpB,EAAQ,kBAA6B,UAAToB,EAC5BpB,EAAQ,kBAA6B,UAATqB,EAC5BrB,EAAQ,kBAA6B,UAATqB,GAI9BvC,EAAFl8C,UAAA0+C,gBAAE,WAEEj/C,KAAKk9C,qBAAuB,SAI9BT,EAAFl8C,UAAA2+C,gBAAE,WAEEl/C,KAAKk9C,qBAAuB,QAI9BT,EAAFl8C,UAAA4+C,iBAAE,SAAiBzqC,GACf1U,KAAKq2C,eAAe9sC,KAAKmL,GACzB1U,KAAKo/C,cAAe,EAQE,UAAlB1qC,EAAMlD,SAA4D,IAArCxR,KAAK8T,YAAYurC,kBAChD3qC,EAAMtI,QAAQkzC,UAAY,mBAvThC79C,KAACC,EAAAA,UAADC,OAAAC,SAAA,WACEE,SAAU,wXACVC,QAAF,mzDACEM,gBAAFC,EAAAA,wBAAAC,OACEC,cAAFC,EAAAA,kBAAAC,KACEb,SAAF,UACEiQ,YACFkpC,GAAAC,cACAD,GAAAE,aAEAr2C,YACAC,QAAAq2C,GAAAp2C,YAAA03C,gFA7EAh7C,SAAEkB,GAAFC,aAAAnB,KAAAoB,EAAAA,OAAAlB,MAAA46C,SAuNAE,EAAA15C,0EAnGA85C,YAAAp7C,KAAA2D,EAAAA,QAGAke,cAAA7hB,KAAA+M,EAAAA,UAAA7M,MAAAuL,EAAAA,eAWA8wC,QAAAv8C,KAAAoE,EAAAA,gBAAAlE,MAAA25C,MAWA+C,cAAA58C,KAAGm+B,EAAAA,aAAHj+B,MAAA04C,MAOAgD,iBAAA57C,KAAA2D,EAAAA,QAMAm4C,cAAA97C,KAAG2D,EAAAA,QAGHowB,aAAA/zB,KAAA2D,EAAAA,MAAAzD,MAAA,WAQAX,YAAAS,KAAA2D,EAAAA,QAaAytB,SAAApxB,KAAAuQ,EAAAA,SAmBA8pB,QAAAr6B,KAAAuQ,EAAAA,UAaAyqC,KCxLa8C,GACT,GAAI3zC,GAAAA,eAAqC,4BAQhC4zC,IACX16C,QAASy6C,GACTrgC,MAAOua,EAAAA,SACPra,WAAYqgC,kBA2EZ,QAAFC,GAAsBvpB,EACA3T,EACA/U,EACkCokC,EACtB0J,EACQoE,EACRjvC,EAGZ0L,GATApc,KAAtBm2B,SAAsBA,EACAn2B,KAAtBwiB,SAAsBA,EACAxiB,KAAtByN,kBAAsBA,EACkCzN,KAAxD6xC,gBAAwDA,EACtB7xC,KAAlCu7C,YAAkCA,EACQv7C,KAA1C2/C,kBAA0CA,EACR3/C,KAAlC0Q,KAAkCA,EAGZ1Q,KAAtBoc,cAAsBA,EA3DtBpc,KAAAoyB,YAA2C,KAC3CpyB,KAAA4/C,WAA+B,EAC/B5/C,KAAA6/C,mBAA+BrwC,EAAAA,aAAaC,MAC5CzP,KAAA8/C,mBAA+BtwC,EAAAA,aAAaC,MAI5CzP,KAAA+/C,gBAAoC,EAsBpC//C,KAAAggD,WAAsD,GAAIlvC,GAAAA,aAQ1D9Q,KAAAigD,WAAsDjgD,KAAKggD,WAG3DhgD,KAAAkgD,WAAsD,GAAIpvC,GAAAA,aAQ1D9Q,KAAAmgD,YAAuDngD,KAAKkgD,WAapDP,IACFA,EAAkBjE,iBAAmB17C,KAAKogD,mBA/IhD,MA8FEh3C,QAAFC,eACMq2C,EADNn/C,UAAA,oCAAE,WAEE,MAAOP,MAAKqgD,UAGd,SAAiCrpC,GAC/BhX,KAAKqgD,KAAOrpC,mCA+Cd0oC,EAAFn/C,UAAAkF,mBAAE,WAAA,GAAFrF,GAAAJ,IACIA,MAAKsgD,aAELtgD,KAAKqgD,KAAKvkB,MAAM37B,UAAU,SAAAogD,GACxBngD,EAAKogD,eAGW,UAAXD,GAAiC,QAAXA,IAAqBngD,EAAKm7C,aACnDn7C,EAAKm7C,YAAY1oB,OAAOphB,KAAK8uC,KAIjCvgD,KAAKygD,gBAGPf,EAAFn/C,UAAAmF,YAAE,WACM1F,KAAKoyB,cACPpyB,KAAKoyB,YAAYmB,UACjBvzB,KAAKoyB,YAAc,MAGrBpyB,KAAK0gD,yBAIPt3C,OAAFC,eAAMq2C,EAANn/C,UAAA,gBAAE,WACE,MAAOP,MAAK4/C,2CAIdx2C,OAAFC,eAAMq2C,EAANn/C,UAAA,WAAE,WACE,MAAOP,MAAK0Q,MAA4B,QAApB1Q,KAAK0Q,KAAKpH,MAAkB,MAAQ,uCAI1Do2C,EAAFn/C,UAAA6/C,gBAAE,WACE,SAAUpgD,KAAK2/C,oBAAqB3/C,KAAKu7C,cAI3CmE,EAAFn/C,UAAAogD,WAAE,WACE,MAAO3gD,MAAK4/C,UAAY5/C,KAAK4gD,YAAc5gD,KAAK6gD,YAIlDnB,EAAFn/C,UAAAsgD,SAAE,WAAA,GAAFzgD,GAAAJ,IACI,KAAIA,KAAK4/C,UAAT,CAIA5/C,KAAKsgD,YAEL,IAAMhpB,GAAat3B,KAAKi4B,gBACxBj4B,MAAK8gD,aAAaxpB,EAAWqd,YAAiE,kBAC9Frd,EAAWrnB,OAAOjQ,KAAKwzC,SAEnBxzC,KAAKqgD,KAAKhC,aACZr+C,KAAKqgD,KAAKhC,YAAYpuC,OAAOjQ,KAAK+gD,UAGpC/gD,KAAK6/C,mBAAqB7/C,KAAKghD,sBAAsB7gD,UAAU,WAAM,MAAAC,GAAKwgD,cAC1E5gD,KAAKihD,YAEDjhD,KAAKqgD,eAAgB5D,KACvBz8C,KAAKqgD,KAAKpB,oBAKdS,EAAFn/C,UAAAqgD,UAAE,WACE5gD,KAAKqgD,KAAKvkB,MAAMrqB,QAOlBiuC,EAAFn/C,UAAAgS,MAAE,SAAMxE,OAAR,KAAAA,IAAQA,EAAR,WACQ/N,KAAKoc,cACPpc,KAAKoc,cAAcqgB,SAASz8B,KAAKwiB,SAAUzU,GAE3C/N,KAAKwiB,SAAS5hB,cAAc2R,SAKxBmtC,EAAVn/C,UAAAigD,kCACI,IAAKxgD,KAAKoyB,aAAgBpyB,KAAKkhD,SAA/B,CAIA,GAAMb,GAAOrgD,KAAKqgD,IAElBrgD,MAAK6/C,mBAAmBxvC,cACxBrQ,KAAKoyB,YAAYhiB,SAEbiwC,YAAgB5D,KAClB4D,EAAKnB,kBAEDmB,EAAKhC,YAEPgC,EAAKhK,eACFzuC,KACC9G,EAAAA,OAAO,SAAA4T,GAAS,MAAkB,SAAlBA,EAAMlD,UACtB3J,EAAAA,KAAK,GAELgO,EAAAA,UAAUwqC,EAAKhC,YAAYjE,YAE5Bj6C,UAAU,WAArB,MAA2BkgD,GAAgB,YAAEjwC,cAAUzN,GAAW,WAEtDvC,EAAK+gD,eAGTnhD,KAAKmhD,eAGPnhD,KAAKmhD,aAEDd,EAAKhC,aACPgC,EAAKhC,YAAYjuC,YASfsvC,EAAVn/C,UAAA0gD,qBACIjhD,KAAKqgD,KAAKnC,WAAal+C,KAAKogD,kBAAoBpgD,KAAKu7C,gBAAc54C,GACnE3C,KAAKqgD,KAAKt/B,UAAY/gB,KAAKiR,IAC3BjR,KAAKohD,oBACLphD,KAAKqhD,gBAAe,GACpBrhD,KAAKqgD,KAAKjC,eAAep+C,KAAK+/C,eAAiB,QAAU,YAInDL,EAAVn/C,UAAA6gD,6BACI,GAAIphD,KAAKqgD,KAAK7B,aAAc,CAI1B,IAHA,GAAIC,GAAQ,EACRP,EAAal+C,KAAKqgD,KAAKnC,WAEpBA,GACLO,IACAP,EAAaA,EAAWA,UAG1Bl+C,MAAKqgD,KAAK7B,aAAaC,KAQnBiB,EAAVn/C,UAAA4gD,sBACInhD,KAAKqhD,gBAAe,GAKfrhD,KAAK+/C,eAIE//C,KAAKogD,mBACfpgD,KAAKuS,MAAM,SAFXvS,KAAKuS,QAKPvS,KAAK+/C,gBAAiB,GAIhBL,EAAVn/C,UAAA8gD,eAAA,SAAyBxkB,GACrB78B,KAAK4/C,UAAY/iB,EACjB78B,KAAK4/C,UAAY5/C,KAAKggD,WAAWvuC,OAASzR,KAAKkgD,WAAWzuC,OAEtDzR,KAAKogD,oBACPpgD,KAAK2/C,kBAAkBlE,aAAe5e,IAQlC6iB,EAAVn/C,UAAA+/C,sBACStgD,KAAKqgD,MACRiB,MAQI5B,EAAVn/C,UAAA03B,0BACI,IAAKj4B,KAAKoyB,YAAa,CACrBpyB,KAAKwzC,QAAU,GAAInlC,GAAAA,eAAerO,KAAKqgD,KAAK/8B,YAAatjB,KAAKyN,kBAC9D,IAAMqpB,GAAS92B,KAAKuhD,mBACpBvhD,MAAKwhD,sBAAsB1qB,EAA4D,kBACvF92B,KAAKoyB,YAAcpyB,KAAKm2B,SAASqD,OAAO1C,GAG1C,MAAO92B,MAAKoyB,aAONstB,EAAVn/C,UAAAghD,6BACI,MAAO,IAAIxoB,GAAAA,eACTC,iBAAkBh5B,KAAKm2B,SAASroB,WAC3BkmC,oBAAoBh0C,KAAKwiB,UACzBi/B,qBACAxN,sBAAsB,mBAC3BsJ,YAAsC,MAAzBv9C,KAAKqgD,KAAK9C,aAAuBv9C,KAAKogD,kBAAoBpgD,KAAKqgD,KAAK9C,YACjFJ,cAAen9C,KAAKqgD,KAAKlD,eAAiB,mCAC1CzI,eAAgB10C,KAAK6xC,kBACrB9wB,UAAW/gB,KAAK0Q,QASZgvC,EAAVn/C,UAAAihD,sBAAA,SAAgC1zC,aACxB9N,MAAKqgD,KAAK5C,oBACZ3vC,EAASymC,gBAAgBp0C,UAAU,SAAA6Q,GACjC,GAAM+tC,GAAyD,UAAnC/tC,EAAO0wC,eAAejM,SAAuB,QAAU,SAC7EuJ,EAAyD,QAAnChuC,EAAO0wC,eAAehM,SAAqB,QAAU,OAEjFt1C,GAAKigD,KAAuB,mBAAEtB,EAAMC,MAUlCU,EAAVn/C,UAAAugD,aAAA,SAAuB9nB,GACnB,GAAJvU,GAAA,WAAAzkB,KAAAqgD,KAAA1D,WAAA,MAAA,UAAA,QAAA,OAASvH,EAAT3wB,EAAA,GAAkBk9B,EAAlBl9B,EAAA,GAGAm9B,EAAA,UAAA5hD,KAAAqgD,KAAAxD,WAAA,SAAA,QAAA,MAAA,UAASnH,EAATkM,EAAA,GAAmBC,EAAnBD,EAAA,GAGAE,GAAApM,EAAAmM,GAASxM,EAATyM,EAAA,GAAkBC,EAAlBD,EAAA,GACAE,GAAA5M,EAAAuM,GAASlM,EAATuM,EAAA,GAAmBC,EAAnBD,EAAA,GACQE,EAAU,CAEVliD,MAAKogD,mBAGP6B,EAAmB7M,EAAkC,WAAxBp1C,KAAKqgD,KAAK1D,UAAyB,QAAU,MAC1EgF,EAAkBlM,EAAuB,QAAZL,EAAoB,QAAU,MAC3D8M,EAAuB,WAAbxM,EA5VsB,GAAA,GA6VtB11C,KAAKqgD,KAAKhD,iBACpBhI,EAAuB,QAAbK,EAAqB,SAAW,MAC1CqM,EAAuC,QAArBF,EAA6B,SAAW,OAG5D7oB,EAAiB+b,gBACdK,QAAPA,EAAgBC,QAAhBA,EAAyBI,SAAzBA,EAAmCC,SAAnCA,EAA6CwM,QAA7CA,IACO9M,QAASuM,EAAiBtM,QAAjCA,EAA0CI,SAAUwM,EAAkBvM,SAAtEA,EAAgFwM,QAAhFA,IAEQ9M,QAARA,EACQC,QAAS0M,EACTtM,SAARA,EACQC,SAAUmM,EACVK,SAAUA,IAGV9M,QAASuM,EACTtM,QAAS0M,EACTtM,SAAUwM,EACVvM,SAAUmM,EACVK,SAAUA,MAMRxC,EAAVn/C,UAAAmgD,iCACI1gD,KAAK6/C,mBAAmBxvC,cACxBrQ,KAAK8/C,mBAAmBzvC,eAIlBqvC,EAAVn/C,UAAAygD,0CACUmB,EAAWniD,KAAgB,YAAE+9B,gBAC7BtF,EAAcz4B,KAAgB,YAAEy4B,cAChC2pB,EAAcpiD,KAAKu7C,YAAcv7C,KAAKu7C,YAAY1oB,OAASvd,EAAAA,KAC3D+sC,EAAQriD,KAAKu7C,YAAcv7C,KAAKu7C,YAAYC,WAAW5zC,KAC3D9G,EAAAA,OAAO,SAAAib,GAAU,MAAAA,KAAW3b,EAAKu/C,oBACjC7+C,EAAAA,OAAO,WAAM,MAAAV,GAAKw/C,aAChBtqC,EAAAA,IAEJ,OAAOzL,GAAAA,MAAMs4C,EAAUC,EAAaC,EAAO5pB,IAI7CinB,EAAFn/C,UAAA+hD,iBAAE,SAAiB5tC,GACV6tC,EAAAA,gCAAgC7tC,KACnC1U,KAAK+/C,gBAAiB,EAKlB//C,KAAKogD,mBACP1rC,EAAMI,mBAMZ4qC,EAAFn/C,UAAAkU,eAAE,SAAeC,GACb,GAAMC,GAAUD,EAAMC,OAElB3U,MAAKogD,oBACAzrC,IAAY0Z,EAAAA,aAA4B,QAAbruB,KAAKiR,KAChC0D,IAAYwZ,EAAAA,YAA2B,QAAbnuB,KAAKiR,MACtCjR,KAAK6gD,YAKTnB,EAAFn/C,UAAAua,aAAE,SAAapG,GACP1U,KAAKogD,mBAEP1rC,EAAMqnB,kBACN/7B,KAAK6gD,YAEL7gD,KAAK2gD,cAKDjB,EAAVn/C,UAAAkgD,kCAESzgD,MAAKogD,oBAIVpgD,KAAK8/C,mBAAqB9/C,KAAKu7C,YAAYC,WAIxC5zC,KACC9G,EAAAA,OAAO,SAAAib,GAAU,MAAAA,KAAW3b,EAAKu/C,oBAAsB5jC,EAAOvF,WAC9D88B,EAAAA,MAAM,EAAGkP,EAAAA,gBAEVriD,UAAU,WACTC,EAAK2/C,gBAAiB,EAKlB3/C,EAAKigD,eAAgB5D,KAAWr8C,EAAKigD,KAAKjB,aAG5Ch/C,EAAKigD,KAAKhK,eACPzuC,KAAKC,EAAAA,KAAK,GAAIyrC,EAAAA,MAAM,EAAGkP,EAAAA,eAAgB3sC,EAAAA,UAAUzV,EAAKm7C,YAAYC,aAClEr7C,UAAU,WAAM,MAAAC,GAAKygD,aAExBzgD,EAAKygD,8BAjcfp/C,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,8CACVK,MACEwgD,gBAAiB,OACjB/9C,uBAAwB,mBACxBg+C,cAAe,2BACfjyB,YAAa,yBACbhqB,UAAW,wBAEb5E,SAAU,yDA/DZJ,KAAEg4B,EAAAA,UAUFh4B,KAAEuD,EAAAA,aASFvD,KAAEiC,EAAAA,mBAqGFjC,SAAAkB,GAAAC,aAAAnB,KAAeoB,EAAAA,OAAflB,MAAsB49C,QAjGtB99C,KAAQg7C,GAAR75C,aAAAnB,KAkGe2W,EAAAA,aAhGf3W,KAAQ65C,GAAR14C,aAAAnB,KAiGe2W,EAAAA,WAjGf3W,KAiG2ByuC,EAAAA,SA/H3BzuC,KAAmB0W,EAAAA,eAAnBvV,aAAAnB,KAgIe2W,EAAAA,aAjIf3W,KAAQic,EAAAA,kCAsFRilC,+BAAAlhD,KAAG2D,EAAAA,MAAHzD,MAAS,0BAUT0+C,OAAA5+C,KAAG2D,EAAAA,MAAHzD,MAAS,uBAGTo/C,WAAAt/C,KAAG2D,EAAAA,MAAHzD,MAAS,wBAGTq+C,aAAAv+C,KAAGuQ,EAAAA,SAQHiuC,aAAAx+C,KAAGuQ,EAAAA,SAGHkuC,aAAAz+C,KAAGuQ,EAAAA,SAQHmuC,cAAA1+C,KAAGuQ,EAAAA,UAjIH0tC,iCCAA,sBAqBAj+C,KAACuB,EAAAA,SAADrB,OACEsB,SACE2D,EAAAA,aACA1D,GACA0a,GACAiY,EAAAA,eAEF1yB,SAAUs5C,GAASnB,GAAaoE,GAAgBrF,GAAgBn3C,IAChEG,cAAeo5C,GAASnB,GAAaoE,GAAgBrF,IACrDx1C,WAAY26C,QA9BdoD,KCuBalT,IAaXC,eAAgB9gC,EAAAA,QAAQ,kBACtBC,EAAAA,MAAM,OAAQrC,EAAAA,OACZsC,UAAW,cACX8zC,SAAU,OACVruB,QAAS,KAEX1lB,EAAAA,MAAM,UAAWrC,EAAAA,OACf+nB,QAAS,EACTquB,SAAU,oBACV9zC,UAAW,eAEbD,EAAAA,MAAM,mBAAoBrC,EAAAA,OACxB+nB,QAAS,EACTquB,SAAU,oBACV9zC,UAAW,eAEbE,EAAAA,WAAW,YAAaC,EAAAA,QAAQ,qCAChCD,EAAAA,WAAW,YAAaC,EAAAA,QAAQ,oBAAqBzC,EAAAA,OAAO+nB,QAAS,QAUvEsuB,cAAej0C,EAAAA,QAAQ,iBACrBC,EAAAA,MAAM,UAAWrC,EAAAA,OAAO+nB,QAAS,KACjCvlB,EAAAA,WAAW,mBACTxC,EAAAA,OAAO+nB,QAAS,IAChBtlB,EAAAA,QAAQ,qDAUDygC,GAAiBD,GAAoBC,eAMrCmT,GAAgBpT,GAAoBoT,clEgB7C1hB,GAAe,CA8BnBj+B,GAAAkpC,gCAA6C,CAM7C,IAGa8D,IACT,GAAIvkC,GAAAA,eAAqC,8BAShColC,IACXlsC,QAASqrC,GACTjxB,MAAOua,EAAAA,SACPra,WAAY2jC,IAIdC,GAAA,WACE,QAAFA,GAEWpzB,EAEAtmB,GAFAtJ,KAAX4vB,OAAWA,EAEA5vB,KAAXsJ,MAAWA,EAhKX,MAAA05C,MAqKAC,GAAA,WACE,QAAFA,GAAqBtiD,EACAuiD,EACAC,EACAC,EACAC,GAJArjD,KAArBW,YAAqBA,EACAX,KAArBkjD,0BAAqBA,EACAljD,KAArBmjD,YAAqBA,EACAnjD,KAArBojD,iBAAqBA,EACApjD,KAArBqjD,UAAqBA,EA1KrB,MAAAJ,MA4KaK,GAMLtwC,EAAmBlP,EAAcC,EAAcw/C,EAAgBN,mCAlLvE,sBAwLAxhD,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,yBAzLZ4uC,KA2LA5F,GAAA,SAAAtmC,GAkSE,QAAFsmC,GACYz3B,EACAD,EACAjH,EACRi3C,EACA5wC,EACoB5B,EACRyyC,EACAC,EACQ9X,EACO+X,EACJh/C,EACqBm/C,GAZ9C,GAAFpjD,GAaIkE,EAbJ5D,KAAAV,KAaUsS,EAAY4wC,EAA2BC,EACvCC,EAAkBC,IAd5BrjD,WACYI,GAAZ+S,eAAYA,EACA/S,EAAZ8S,mBAAYA,EACA9S,EAAZ6L,QAAYA,EAGY7L,EAAxBsQ,KAAwBA,EAGAtQ,EAAxBkrC,iBAAwBA,EACOlrC,EAA/BijD,UAA+BA,EAEiBjjD,EAAhDojD,uBAAgDA,EAhQhDpjD,EAAAuuC,YAAuB,EAGvBvuC,EAAA6hC,WAA+B,EAG/B7hC,EAAA+sC,WAAuB,EAMvB/sC,EAAAqjD,WAA+B,EAG/BrjD,EAAAsjD,aAAyB,SAACC,EAASC,GAAY,MAAAD,KAAOC,GAGtDxjD,EAAAyjD,KAAiB,cAAcziB,KAG/BhhC,EAAA0jD,SAA8B,GAAIj2C,GAAAA,QASlCzN,EAAAiuC,iBAAqB,EASrBjuC,EAAA2jD,UAAoC,aAGpC3jD,EAAA4jD,WAAe,aAGf5jD,EAAA6jD,WAAuB,GAGvB7jD,EAAA4tC,iBAA6B,MAG7B5tC,EAAA8jD,0BAA8B,GAAIr2C,GAAAA,QAGlCzN,EAAAyxC,gBAAoBzxC,EAAKojD,yBAOzBpjD,EAAAkqC,SAAa,EAQblqC,EAAA+jD,aAEM/O,QAAS,QACTC,QAAS,MACTI,SAAU,QACVC,SAAU,QAGVN,QAAS,QACTC,QAAS,SACTI,SAAU,QACVC,SAAU,WAKhBt1C,EAAA8sC,yBAA6C,EAa7C9sC,EAAAgkD,UAAqB,EAGrBhkD,EAAAikD,YAAgB,aAuFhBjkD,EAAAqO,UAA2C,GAwB3CrO,EAAAkkD,uBAA0EC,EAAAA,MAAM,WAC5E,MAAInkD,GAAKmsC,QACA1iC,EAAAA,MAAbC,UAAA,GAAsB1J,EAAKmsC,QAAQxiC,IAAI,SAAAy6C,GAAU,MAAAA,GAAOC,qBAG7CrkD,EAAK6L,QAAQqyC,SACjB5qB,eACA9rB,KAAKC,EAAAA,KAAK,GAAIk2C,EAAAA,UAAU,WAAM,MAAA39C,GAAKkkD,4BAI1ClkD,EAAAo7B,aAA2D,GAAI1qB,GAAAA,aAI/D1Q,EAAAs9B,cAAMt9B,EAAKo7B,aAAa5zB,KAAK9G,EAAAA,OAAO,SAAA4jD,GAAK,MAAAA,KAAI36C,EAAAA,IAAI,eAIjD3J,EAAAw9B,cAAMx9B,EAAKo7B,aAAa5zB,KAAK9G,EAAAA,OAAO,SAAA4jD,GAAK,OAACA,IAAI36C,EAAAA,IAAI,eAIlD3J,EAAAywC,gBAAM,GAAI//B,GAAAA,aAOV1Q,EAAAgvB,YAAsD,GAAIte,GAAAA,aAkBlD1Q,EAAKijD,YAGPjjD,EAAKijD,UAAUsB,cAAgBvkD,GAGjCA,EAAKiE,SAAWkY,SAASlY,IAAa,EAGtCjE,EAAK0e,GAAK1e,EAAK0e,KA3BnB,MAtP+Bra,GAA/BmmC,EAAAtmC,GA4FE8E,OAAFC,eAAMuhC,EAANrqC,UAAA,eAAE,WACE,MAAOP,MAAKokD,UAAYpkD,KAAK2uC,gBAM/B,SAAYrlC,GACVtJ,KAAKokD,SAAW96C,mCA6BlBF,OAAFC,eACMuhC,EADNrqC,UAAA,mBAAE,WAC4B,MAAOP,MAAK4kD,kBACxC,SAAgBt7C,GACdtJ,KAAK4kD,aAAet7C,EACpBtJ,KAAK6kD,aAAat7C,wCAIpBH,OAAFC,eACMuhC,EADNrqC,UAAA,gBAAE,WAC0B,MAAOP,MAAKiiC,eACtC,SAAa34B,GACXtJ,KAAKiiC,UAAY3oB,EAAAA,sBAAsBhQ,GACvCtJ,KAAK6kD,aAAat7C,wCAIpBH,OAAFC,eACMuhC,EADNrqC,UAAA,gBAAE,WAC0B,MAAOP,MAAKyjD,eACtC,SAAan6C,GACX,GAAItJ,KAAKssC,gBACP,KAAMwY,KAGR9kD,MAAKyjD,UAAYnqC,EAAAA,sBAAsBhQ,oCAIzCF,OAAFC,eACMuhC,EADNrqC,UAAA,8BAAE,WACwC,MAAOP,MAAKktC,6BACpD,SAA2B5jC,GACzBtJ,KAAKktC,wBAA0B5zB,EAAAA,sBAAsBhQ,oCAQvDF,OAAFC,eACMuhC,EADNrqC,UAAA,mBAAE,WACoB,MAAOP,MAAK0jD,kBAChC,SAAgBxzB,GACd,GAAkB,kBAAPA,GACT,KAAM60B,KAER/kD,MAAK0jD,aAAexzB,EAChBlwB,KAAKssC,iBAEPtsC,KAAKglD,wDAKT57C,OAAFC,eACMuhC,EADNrqC,UAAA,aAAE,WACmB,MAAOP,MAAK2qB,YAC/B,SAAU0b,GACJA,IAAarmC,KAAK2qB,SACpB3qB,KAAKgwB,WAAWqW,GAChBrmC,KAAK2qB,OAAS0b,oCAqBlBj9B,OAAFC,eACMuhC,EADNrqC,UAAA,UAAE,WACmB,MAAOP,MAAKilD,SAC/B,SAAO37C,GACLtJ,KAAKilD,IAAM37C,GAAStJ,KAAK6jD,KACzB7jD,KAAK6kD,aAAat7C,wCAiEpBqhC,EAAFrqC,UAAA6N,SAAE,WAAA,GAAFhO,GAAAJ,IACIA,MAAKssC,gBAAkB,GAAI4Y,GAAAA,eAA0BllD,KAAKosC,UAC1DpsC,KAAK6kD,aAAat7C,OAKlBvJ,KAAKkkD,0BACFt8C,KAAKu9C,EAAAA,uBAAwBtvC,EAAAA,UAAU7V,KAAK8jD,WAC5C3jD,UAAU,WACLC,EAAKsrC,WACPtrC,EAAK+sC,WAAa,EAClB/sC,EAAKo7B,aAAa/pB,MAAK,KAEvBrR,EAAKo7B,aAAa/pB,MAAK,GACvBrR,EAAK2rC,WAAWF,QAAU,EAC1BzrC,EAAK8S,mBAAmB/B,mBAKhCy5B,EAAFrqC,UAAAkF,mBAAE,WAAA,GAAFrF,GAAAJ,IACIA,MAAKolD,kBAELplD,KAAKssC,gBAAwB,SAAE1kC,KAAKiO,EAAAA,UAAU7V,KAAK8jD,WAAW3jD,UAAU,SAAAuU,GACtEA,EAAM2wC,MAAMt9C,QAAQ,SAAAy8C,GAAU,MAAAA,GAAOc,WACrC5wC,EAAM6wC,QAAQx9C,QAAQ,SAAAy8C,GAAU,MAAAA,GAAOgB,eAGzCxlD,KAAKusC,QAAQrsC,QAAQ0H,KAAKgI,EAAAA,UAAU,MAAOiG,EAAAA,UAAU7V,KAAK8jD,WAAW3jD,UAAU,WAC7EC,EAAKqlD,gBACLrlD,EAAK4kD,0BAITpa,EAAFrqC,UAAAw+B,UAAE,WACM/+B,KAAKqjD,WACPrjD,KAAK0lD,oBAIT9a,EAAFrqC,UAAA0N,YAAE,SAAY/N,GAGNA,EAAR,UACMF,KAAK6kD,aAAat7C,QAItBqhC,EAAFrqC,UAAAmF,YAAE,WACE1F,KAAK8jD,SAASv6C,OACdvJ,KAAK8jD,SAAS31C,WACdnO,KAAK6kD,aAAa12C,YAIpBy8B,EAAFrqC,UAAAoiC,OAAE,WACE3iC,KAAK0rC,UAAY1rC,KAAK87B,QAAU97B,KAAKi3B,QAIvC2T,EAAFrqC,UAAA02B,KAAE,WAAA,GAAF72B,GAAAJ,MACQA,KAAKwW,UAAaxW,KAAKusC,SAAYvsC,KAAKusC,QAAQ/rC,SAAUR,KAAK2uC,aAInE3uC,KAAK+sC,aAAe/sC,KAAK6O,QAAQjO,cAAcmvB,wBAG/C/vB,KAAKquC,iBAAmB9xB,SAASopC,iBAAiB3lD,KAAK6O,QAAQjO,eAAe,cAE9EZ,KAAK2uC,YAAa,EAClB3uC,KAAK8T,YAAY4B,0BAA0B,MAC3C1V,KAAK4lD,4BACL5lD,KAAK6lD,0BACL7lD,KAAKkT,mBAAmB/B,eAGxBnR,KAAKiM,QAAQqyC,SAAS5qB,eAAe9rB,KAAKC,EAAAA,KAAK,IAAI1H,UAAU,WACvDC,EAAKiuC,kBAAoBjuC,EAAK2rC,WAAWzU,YACzCl3B,EAAK2rC,WAAWzU,WAAWqB,iBAC7Bv4B,EAAK2rC,WAAWzU,WAAWqB,eAAelsB,MAAMq5C,SAAc1lD,EAAKiuC,iBAA3E,UAMEzD,EAAFrqC,UAAAu7B,MAAE,WACM97B,KAAK2uC,aACP3uC,KAAK2uC,YAAa,EAClB3uC,KAAK8T,YAAY4B,0BAA0B1V,KAAKksC,SAAW,MAAQ,OACnElsC,KAAKkT,mBAAmB/B,eACxBnR,KAAKgkD,eAUTpZ,EAAFrqC,UAAAyvB,WAAE,SAAW1mB,GACLtJ,KAAKusC,SACPvsC,KAAK+lD,qBAAqBz8C,IAW9BshC,EAAFrqC,UAAA0vB,iBAAE,SAAiBC,GACflwB,KAAK+jD,UAAY7zB,GAUnB0a,EAAFrqC,UAAA4vB,kBAAE,SAAkBD,GAChBlwB,KAAKgkD,WAAa9zB,GASpB0a,EAAFrqC,UAAA6vB,iBAAE,SAAiBC,GACfrwB,KAAKwW,SAAW6Z,EAChBrwB,KAAKkT,mBAAmB/B,eACxBnR,KAAK6kD,aAAat7C,QAIpBH,OAAFC,eAAMuhC,EAANrqC,UAAA,iBAAE,WACE,MAAOP,MAAK2uC,4CAIdvlC,OAAFC,eAAMuhC,EAANrqC,UAAA,gBAAE,WACE,MAAOP,MAAKosC,SAAWpsC,KAAKssC,gBAAgBrpB,SAAWjjB,KAAKssC,gBAAgBrpB,SAAS,oCAIvF7Z,OAAFC,eAAMuhC,EAANrqC,UAAA,oBAAE,WACE,GAAIP,KAAK4uC,MACP,MAAO,EAGT,IAAI5uC,KAAKyjD,UAAW,CAClB,GAAMuC,GAAkBhmD,KAAKssC,gBAAgBrpB,SAASlZ,IAAI,SAAAy6C,GAAU,MAAAA,GAAOyB,WAO3E,OALIjmD,MAAKksC,UACP8Z,EAAgBE,UAIXF,EAAgBvX,KAAK,MAG9B,MAAOzuC,MAAKssC,gBAAgBrpB,SAAS,GAAGgjC,2CAI1Crb,EAAFrqC,UAAA2rC,OAAE,WACE,QAAOlsC,KAAK0Q,MAA2B,QAApB1Q,KAAK0Q,KAAKpH,OAI/BshC,EAAFrqC,UAAAkU,eAAE,SAAeC,GACR1U,KAAKwW,WACRxW,KAAK0rC,UAAY1rC,KAAKmmD,mBAAmBzxC,GAAS1U,KAAKomD,qBAAqB1xC,KAKxEk2B,EAAVrqC,UAAA6lD,qBAAA,SAA+B1xC,GAC3B,GAAMC,GAAUD,EAAMC,QAChB0xC,EAAa1xC,IAAY2Z,EAAAA,YAAc3Z,IAAYyZ,EAAAA,UACrDzZ,IAAYwZ,EAAAA,YAAcxZ,IAAY0Z,EAAAA,WACxB1Z,KAAYM,EAAAA,OAASN,IAAYO,EAAAA,QAGhClV,KAAKosC,UAAY13B,EAAM4xC,SAAWD,GACnD3xC,EAAMI,iBACN9U,KAAKi3B,QACKj3B,KAAKosC,UACfpsC,KAAK8T,YAAYsB,UAAUV,IAKvBk2B,EAAVrqC,UAAA4lD,mBAAA,SAA6BzxC,GACzB,GAAMC,GAAUD,EAAMC,QAChB0xC,EAAa1xC,IAAY2Z,EAAAA,YAAc3Z,IAAYyZ,EAAAA,SACnDm4B,EAAUvmD,KAAK8T,WAErB,IAAIa,IAAYC,EAAAA,MAAQD,IAAYI,EAAAA,IAClCL,EAAMI,iBACNH,IAAYC,EAAAA,KAAO2xC,EAAQ1xC,qBAAuB0xC,EAAQvxC,wBACrD,IAAIqxC,GAAc3xC,EAAM4xC,OAE7B5xC,EAAMI,iBACN9U,KAAK87B,YACA,IAAKnnB,IAAYM,EAAAA,OAASN,IAAYO,EAAAA,QAAUqxC,EAAQ5a,WAGxD,GAAI3rC,KAAKyjD,WAAa9uC,IAAY6xC,EAAAA,GAAK9xC,EAAM+xC,QAAS,CAC3D/xC,EAAMI,gBACN,IAAM4xC,GAAuB1mD,KAAKusC,QAAQlrC,KAAK,SAAAslD,GAAO,OAACA,EAAInwC,WAAamwC,EAAI1jC,UAE5EjjB,MAAKusC,QAAQxkC,QAAQ,SAAAy8C,GACdA,EAAOhuC,WACVkwC,EAAuBlC,EAAOc,SAAWd,EAAOgB,kBAG/C,CACL,GAAMoB,GAAyBL,EAAQlH,eAEvCkH,GAAQnxC,UAAUV,GAEd1U,KAAKyjD,WAAa4C,GAAc3xC,EAAMmyC,UAAYN,EAAQ5a,YAC1D4a,EAAQlH,kBAAoBuH,GAC9BL,EAAQ5a,WAAWmb,4BAlBrBpyC,GAAMI,iBACNyxC,EAAQ5a,WAAWmb,yBAsBvBlc,EAAFrqC,UAAAqtB,SAAE,WACO5tB,KAAKwW,WACRxW,KAAKokD,UAAW,EAChBpkD,KAAK6kD,aAAat7C,SAQtBqhC,EAAFrqC,UAAAstB,QAAE,WACE7tB,KAAKokD,UAAW,EAEXpkD,KAAKwW,UAAaxW,KAAK0rC,YAC1B1rC,KAAKgkD,aACLhkD,KAAKkT,mBAAmB/B,eACxBnR,KAAK6kD,aAAat7C,SAOtBqhC,EAAFrqC,UAAAwmD,YAAE,WAAA,GAAF3mD,GAAAJ,IACIA,MAAK+rC,WAAWib,eAAep/C,KAAKC,EAAAA,KAAK,IAAI1H,UAAU,WACrDC,EAAK6mD,gCACL7mD,EAAK8S,mBAAmBsZ,gBACxBpsB,EAAKwrC,2BACLxrC,EAAK8mD,MAAMtmD,cAAc0+C,UAAYl/C,EAAK+sC,cAK9CvC,EAAFrqC,UAAA4mD,eAAE,WACE,MAAOnnD,MAAKsrC,iBAAmB,OAAOtrC,KAAKsrC,iBAAiB8b,MAAU,IAKhExc,EAAVrqC,UAAA0mD,yCACI,IAAK5a,EAAAA,iCAAmCrsC,KAAKosC,SAAU,CACrD,GAAMib,GAAiBrnD,KAAKknD,MAAMtmD,cAAc0mD,cAAc,uBAC1DD,KACFhb,EAAAA,gCAAkChiC,GAA+Bg9C,EAAe10C,eAMtFvJ,OAAFC,eAAMuhC,EAANrqC,UAAA,aAAE,WACE,OAAQP,KAAKssC,iBAAmBtsC,KAAKssC,gBAAgBib,2CAG/C3c,EAAVrqC,UAAAykD,0CAGI75C,SAAQC,UAAUC,KAAK,WACrBjL,EAAK2lD,qBAAqB3lD,EAAKijD,UAAYjjD,EAAKijD,UAAU/5C,MAAQlJ,EAAKuqB,WAQnEigB,EAAVrqC,UAAAwlD,qBAAA,SAA+Bz8C,aAC3B,IAAItJ,KAAKosC,UAAY9iC,EAAO,CAC1B,IAAK7B,MAAMC,QAAQ4B,GACjB,KAAMk+C,KAGRxnD,MAAKssC,gBAAgB+G,QACrB/pC,EAAMvB,QAAQ,SAAC0/C,GAAsB,MAAArnD,GAAKsnD,aAAaD,KACvDznD,KAAK2nD,kBACA,CACL3nD,KAAKssC,gBAAgB+G,OACrB,IAAMuU,GAAsB5nD,KAAK0nD,aAAap+C,EAI1Cs+C,IACF5nD,KAAK8T,YAAYuC,cAAcuxC,GAInC5nD,KAAKkT,mBAAmB/B,gBAOlBy5B,EAAVrqC,UAAAmnD,aAAA,SAAuBp+C,cACbs+C,EAAsB5nD,KAAKusC,QAAQzwB,KAAK,SAAC0oC,GAC7C,IAEE,MAAuB,OAAhBA,EAAOl7C,OAAiBlJ,EAAKsjD,aAAac,EAAOl7C,MAAQA,GAChE,MAAOu+C,GAKP,MAJIxpC,GAAAA,aAEFypC,QAAQC,KAAKF,IAER,IAQX,OAJID,IACF5nD,KAAKssC,gBAAgBgZ,OAAOsC,GAGvBA,GAIDhd,EAAVrqC,UAAA6kD,qCACIplD,MAAK8T,YAAc,GAAIk0C,GAAAA,2BAAsChoD,KAAKusC,SAC/DsR,gBACAoK,0BACAvyC,0BAA0B1V,KAAKksC,SAAW,MAAQ,OAErDlsC,KAAK8T,YAAYgqC,OAAOl2C,KAAKiO,EAAAA,UAAU7V,KAAK8jD,WAAW3jD,UAAU,WAG/DC,EAAKmS,QACLnS,EAAK07B,UAGP97B,KAAK8T,YAAY9C,OAAOpJ,KAAKiO,EAAAA,UAAU7V,KAAK8jD,WAAW3jD,UAAU,WAC3DC,EAAKuuC,YAAcvuC,EAAK8mD,MAC1B9mD,EAAK8nD,8BACK9nD,EAAKuuC,YAAevuC,EAAKgsC,WAAYhsC,EAAK0T,YAAY63B,YAChEvrC,EAAK0T,YAAY63B,WAAWmb,2BAM1Blc,EAAVrqC,UAAAklD,oCACU0C,EAAqBt+C,EAAAA,MAAM7J,KAAKusC,QAAQrsC,QAASF,KAAK8jD,SAE5D9jD,MAAKskD,uBAAuB18C,KAAKiO,EAAAA,UAAUsyC,IAAqBhoD,UAAU,SAAAuU,GACxEtU,EAAKgoD,UAAU1zC,EAAMkb,OAAQlb,EAAM2zC,aAE/B3zC,EAAM2zC,cAAgBjoD,EAAKgsC,UAAYhsC,EAAKuuC,aAC9CvuC,EAAK07B,QACL17B,EAAKmS,WAMT1I,EAAAA,MAAJC,UAAA,GAAa9J,KAAKusC,QAAQxiC,IAAI,SAAAy6C,GAAU,MAAAA,GAAO52C,iBACxChG,KAAKiO,EAAAA,UAAUsyC,IACfhoD,UAAU,WACTC,EAAK8S,mBAAmB/B,eACxB/Q,EAAKykD,aAAat7C,SAGtBvJ,KAAKsoD,iBAIC1d,EAAVrqC,UAAA6nD,UAAA,SAAoB5D,EAAmB6D,GACnC,GAAME,GAAcvoD,KAAKssC,gBAAgBkc,WAAWhE,EAEhC,OAAhBA,EAAOl7C,OAAkBtJ,KAAKyjD,WAKhCe,EAAOvhC,SAAWjjB,KAAKssC,gBAAgBgZ,OAAOd,GAAUxkD,KAAKssC,gBAAgBkZ,SAAShB,GAElF6D,GACFroD,KAAK8T,YAAYuC,cAAcmuC,GAG7BxkD,KAAKosC,WACPpsC,KAAK2nD,cAEDU,GAKFroD,KAAKuS,WAlBTiyC,EAAOgB,WACPxlD,KAAKssC,gBAAgB+G,QACrBrzC,KAAKyoD,kBAAkBjE,EAAOl7C,QAqB5Bi/C,IAAgBvoD,KAAKssC,gBAAgBkc,WAAWhE,IAClDxkD,KAAKyoD,oBAGPzoD,KAAK6kD,aAAat7C,QAIZqhC,EAAVrqC,UAAAonD,iCACI,IAAI3nD,KAAKosC,SAAU,CACjB,GAAMsc,GAAU1oD,KAAKusC,QAAQh2B,SAE7BvW,MAAKssC,gBAAgB3hC,KAAK,SAACoe,EAAGC,GAC5B,MAAO5oB,GAAKwwC,eAAiBxwC,EAAKwwC,eAAe7nB,EAAGC,EAAG0/B,GAC1BA,EAAQ7+B,QAAQd,GAAK2/B,EAAQ7+B,QAAQb,KAEpEhpB,KAAK6kD,aAAat7C,SAKdqhC,EAAVrqC,UAAAkoD,kBAAA,SAA4BE,GACxB,GAAIC,GAAmB,IAGrBA,GADE5oD,KAAKosC,SACQpsC,KAA4B,SAAE+J,IAAI,SAAAy6C,GAAU,MAAAA,GAAOl7C,QAEpDtJ,KAAKijB,SAAYjjB,KAA0B,SAAEsJ,MAAQq/C,EAGrE3oD,KAAK2qB,OAASi+B,EACd5oD,KAAKovB,YAAY3d,KAAKm3C,GACtB5oD,KAAK+jD,UAAU6E,GACf5oD,KAAK6wC,gBAAgBp/B,KAAK,GAAIuxC,IAAgBhjD,KAAM4oD,IACpD5oD,KAAKkT,mBAAmB/B,gBAIlBy5B,EAAVrqC,UAAA+nD,yBACItoD,KAAKikD,WAAajkD,KAAKusC,QAAQxiC,IAAI,SAAAy6C,GAAU,MAAAA,GAAO1lC,KAAI2vB,KAAK,MAOvD7D,EAAVrqC,UAAAslD,mCACQ7lD,KAAK8T,cACH9T,KAAK4uC,MACP5uC,KAAK8T,YAAYe,qBAEjB7U,KAAK8T,YAAYuC,cAAcrW,KAAKssC,gBAAgBrpB,SAAS,MAM3D2nB,EAAVrqC,UAAA2nD,uCACI,GAAMW,GAAoB7oD,KAAK8T,YAAYurC,iBAAmB,EACxDyJ,EAAaC,EAA8BF,EAAmB7oD,KAAKusC,QACrEvsC,KAAKouC,aAETpuC,MAAKknD,MAAMtmD,cAAc0+C,UAAY0J,EACnCH,EAAoBC,EACpB9oD,KAAK+qC,iBACL/qC,KAAKknD,MAAMtmD,cAAc0+C,UAz3BQ,MA+3BrC1U,EAAFrqC,UAAAgS,MAAE,WACEvS,KAAKW,YAAYC,cAAc2R,SAIzBq4B,EAAVrqC,UAAA0oD,gBAAA,SAA0BzE,GACtB,MAAOxkD,MAAKusC,QAAQ7iB,OAAO,SAACw/B,EAA4BC,EAAoBlhD,GAC1E,WAAkBtF,KAAXumD,EAAwB1E,IAAW2E,EAAUlhD,MAAQtF,GAAaumD,OACxEvmD,KAIGioC,EAAVrqC,UAAAqlD,qCACI,GAAM9a,GAAa9qC,KAAK+qC,iBAClBiT,EAAQh+C,KAAKqtC,gBACb+b,EAAc79C,KAAKE,IAAIuyC,EAAQlT,EA94BF,KA+4B7Bue,EAAwBrL,EAAQlT,EAGhCJ,EAAY2e,EAAwBD,EAGtC5e,EACAxqC,KAAK4uC,MAAQ,EAAI5uC,KAAKipD,gBAAgBjpD,KAAKssC,gBAAgBrpB,SAAS,GAExEunB,IAAwBue,EAA8Bve,EAAsBxqC,KAAKusC,QAC7EvsC,KAAKouC,aAIT,IAAM3D,GAAe2e,EAAc,CACnCppD,MAAKmtC,WAAantC,KAAK6qC,wBAAwBL,EAAsBC,EAAcC;qDACnF1qC,KAAKsqC,SAAWtqC,KAAKuqC,yBAAyBC,EAAsBC,EAAcC,GAElF1qC,KAAK2qC,4BAA4BD,IAUnCE,EAAFrqC,UAAAsqC,wBAAE,SAAwB/yB,EAAuB2yB,EACvBC,GACtB,GAAMI,GAAa9qC,KAAK+qC,iBAClBC,EAA4BF,EAAahzB,EACzCmzB,EAAmBH,EAAa,EAMhCI,EAAwBF,EAA4BP,EAAeQ,CACzE,OAAO1/B,MAAKE,IAAIF,KAAK0L,IAAI,EAAGi0B,GAAwBR,IAItDE,EAAFrqC,UAAA4qC,cAAE,WAGE,MAAOnrC,MAAK0O,eAAiB,KAAO1O,KAAKyO,WAAazO,KAAKorC,aAI7DR,EAAFrqC,UAAA8qC,mBAAE,WACE,MAAIrrC,MAAK0O,eACA1O,KAAK0O,eAKT1O,KAAKsrC,kBAAqBtrC,KAAKsrC,iBAAiBC,sBACnDvrC,KAAKmrC,gBAIAnrC,KAAKsrC,iBAAiBE,UAAY,KAHhC,MAOXZ,EAAFrqC,UAAAkrC,yBAAE,WACE,MAAIzrC,MAAK0rC,WAAa1rC,KAAK8T,aAAe9T,KAAK8T,YAAY63B,WAClD3rC,KAAK8T,YAAY63B,WAAW7sB,GAG9B,MAUD8rB,EAAVrqC,UAAAqrC,oCACI,GAKIC,GALEC,EAAc9rC,KAAK+rC,WAAWzU,WAAWqB,eAAe5I,wBACxDic,EAAehsC,KAAKmT,eAAe84B,kBACnC/S,EAAQl5B,KAAKksC,SACbC,EAAensC,KAAKosC,SAAWC,EAAAA,gCAj+BH,GAk+BGhiC,EAIrC,IAAIrK,KAAKosC,SACPP,EAAUQ,EAAAA,oCACL,CACL,GAAIppB,GAAWjjB,KAAKssC,gBAAgBrpB,SAAS,IAAMjjB,KAAKusC,QAAQC,KAChEX,GAAU5oB,GAAYA,EAASwpB,MAv+BQpiC,GAHP,GA8+B7B6uB,IACH2S,IAAY,EAId,IAAMa,GAAe,GAAKZ,EAAYh/B,KAAO++B,GAAW3S,EAAQiT,EAAe,IACzEQ,EAAgBb,EAAYzS,MAAQwS,EAAUG,EAAaj/B,OACxCmsB,EAAQ,EAAIiT,EAGjCO,GAAe,EACjBb,GAAWa,EAj+B4B,EAk+B9BC,EAAgB,IACzBd,GAAWc,EAn+B4B,GAy+BzC3sC,KAAK+rC,WAAWF,QAAUtgC,KAAK2jB,MAAM2c,GACrC7rC,KAAK+rC,WAAWzU,WAAWsV,kBAQrBhC,EAAVrqC,UAAAgqC,yBAAA,SAAmCzyB,EAAuB2yB,EACxBC,GAC9B,GAGImC,GAHE/B,EAAa9qC,KAAK+qC,iBAClB+B,GAA0BhC,EAAa9qC,KAAK+sC,aAAapyB,QAAU,EACnEqyB,EAAsBzhC,KAAK0hC,MAjhCE,IAihC8BnC,EAIjE,IAAI9qC,KAAKktC,wBACP,MAAO,EAGT,IAAwB,IAApBltC,KAAKmtC,WACPN,EAA2B/0B,EAAgBgzB,MACtC,IAAI9qC,KAAKmtC,aAAezC,EAAW,CACxC,GAAM0C,GAAsBptC,KAAKqtC,gBAAkBL,EAC7CM,EAAuBx1B,EAAgBs1B,EAIzCG,EACAzC,GAAc9qC,KAAKqtC,gBAAkBvC,EAliCR,KAkiCgDA,CAMjF+B,GAA2BS,EAAuBxC,EAAayC,MAK/DV,GAA2BpC,EAAeK,EAAa,CAMzD,OAAOv/B,MAAK2jB,OAAkC,EAA5B2d,EAAgCC,IAS5ClC,EAAVrqC,UAAAoqC,4BAAA,SAAsCD,GAClC,GAAMI,GAAa9qC,KAAK+qC,iBAClBiB,EAAehsC,KAAKmT,eAAe84B,kBAEnCuB,EAAoBxtC,KAAK+sC,aAAane,IAriCH,EAsiCnC6e,EACFzB,EAAarxB,OAAS3a,KAAK+sC,aAAaxT,OAviCH,EAyiCnCmU,EAAiBniC,KAAKoiC,IAAI3tC,KAAKsqC,UAC/BsD,EACFriC,KAAKE,IAAIzL,KAAKqtC,gBAAkBvC,EAtkCD,KAukC7B+C,EAAoBD,EAAmBF,EAAiB1tC,KAAK+sC,aAAapyB,MAE5EkzB,GAAoBJ,EACtBztC,KAAK8tC,eAAeD,EAAmBJ,GAC9BC,EAAiBF,EAC3BxtC,KAAK+tC,iBAAiBL,EAAgBF,EAAmB9C,GAExD1qC,KAAKguC,iBAAmBhuC,KAAKiuC,2BAKzBrD,EAAVrqC,UAAAutC,eAAA,SAAyBD,EAA2BJ,GAEhD,GAAMS,GAAwB3iC,KAAK2jB,MAAM2e,EAAoBJ,EAI7DztC,MAAKmtC,YAAce,EACnBluC,KAAKsqC,UAAY4D,EACjBluC,KAAKguC,iBAAmBhuC,KAAKiuC,0BAKzBjuC,KAAKmtC,YAAc,IACrBntC,KAAKmtC,WAAa,EAClBntC,KAAKsqC,SAAW,EAChBtqC,KAAKguC,iBAAmB,mBAKpBpD,EAAVrqC,UAAAwtC,iBAAA,SAA2BL,EAAwBF,EACxB9C,GAEvB,GAAMyD,GAAwB5iC,KAAK2jB,MAAMwe,EAAiBF,EAW1D,IAPAxtC,KAAKmtC,YAAcgB,EACnBnuC,KAAKsqC,UAAY6D,EACjBnuC,KAAKguC,iBAAmBhuC,KAAKiuC,0BAKzBjuC,KAAKmtC,YAAczC,EAIrB,MAHA1qC,MAAKmtC,WAAazC,EAClB1qC,KAAKsqC,SAAW,OAChBtqC,KAAKguC,iBAAmB,gBAMpBpD,EAAVrqC,UAAA0tC,mCACI,GAAMnD,GAAa9qC,KAAK+qC,iBAClB+B,GAA0BhC,EAAa9qC,KAAK+sC,aAAapyB,QAAU,CAEzE,OAAO,QADSpP,KAAKoiC,IAAI3tC,KAAKsqC,UAAYwC,EAAyBhC,EAAa,GACpF,UAIUF,EAAVrqC,UAAA8sC,yBACI,MAAOrtC,MAAKusC,QAAQ/rC,OAASR,KAAKouC,aAAa5tC,QAIzCoqC,EAAVrqC,UAAAwqC,0BACI,MApoCiC,GAooC1B/qC,KAAKquC,kBAOdzD,EAAFrqC,UAAA+tC,kBAAE,SAAkBC,GAChBvuC,KAAKwuC,iBAAmBD,EAAIE,KAAK,MAOnC7D,EAAFrqC,UAAAmuC,iBAAE,WACE1uC,KAAKuS,QACLvS,KAAKi3B,QAOP7tB,OAAFC,eAAMuhC,EAANrqC,UAAA,wBAAE,WACE,MAAOP,MAAK2uC,aAAe3uC,KAAK4uC,sDAplCpCntC,KAACC,EAAAA,UAADC,OAAAC,SAAA,aACEC,SAAU,YACVC,SAAU,27CACVC,QAAF,ujEACEC,QAAF,WAAA,gBAAA,YACEQ,cAAFC,EAAAA,kBAAAC,KACEL,gBAAFC,EAAAA,wBAAAC,OACEN,MACFsC,KAAA,UACMslC,YAAN,KACIgF,kBAAJ,WACIC,oBAAJ,kBACIC,yBAAJ,uBACIC,uBAAJ,sBACIn8B,uBAAwB,sBACxBo8B,sBAAJ,aACIC,mBAAJ,gCACIC,8BAAJ,WACIC,0BAAJ,2BACIC,+BAAJ,6BACIC,8BAAJ,WACIC,6BAA8B,aAC9BC,8BAA+B,WAC/BC,2BAA4B,QAC5BvtC,MAAJ,aACIuuB,YAAJ,yBACIF,UAAJ,aACIC,SAAJ,aAEA1e,YACA49B,GAAAC,gBAEA9qC,YACAC,QAAA8qC,GAAA7qC,YAAA6lC,IACA9lC,QAAA+qC,GAAA9qC,YAAA6lC,8FAnMAnpC,KAAQuL,EAAAA,SAKRvL,KAAE2iB,KAYF3iB,KAAEuD,EAAAA,aAsBFvD,KAAE0W,EAAAA,eAAFvV,aAAAnB,KAAA2W,EAAAA,aA5BA3W,KAAEquC,EAAAA,OAAFltC,aAAAnB,KAAA2W,EAAAA,aA/BA3W,KAAQsuC,EAAAA,mBAARntC,aAAAnB,KAAA2W,EAAAA,aAiDA3W,KAA6DuuC,GAA7DptC,aA0aKnB,KA1aL2W,EAAAA,aAAA3W,KAA8BwuC,EAAAA,UAA9BrtC,aAAAnB,KAAAyuC,EAAAA,OAAAzuC,KAAA2W,EAAAA,aAsBA3W,KAAQyD,OAARtC,aAAAnB,KAAA0D,EAAAA,UAAAxD,MAAA,gBAtBAF,SAAkDkB,GAAlDC,aAAAnB,KA6aKoB,EAAAA,OA7aLlB,MAAAwuC,SA+aAvF,EAAA7nC,wGAxJAgpC,aAAAtqC,KAAA+M,EAAAA,UAAA7M,MAAAyuC,EAAAA,uBAGA7D,UAAA9qC,KAAAoE,EAAAA,gBAAAlE,MAAA0uC,IAAAxH,aAAA,MAGAuF,eAAA3sC,KAAAoE,EAAAA,gBAAAlE,MAAA2uC,MAGA9a,aAAA/zB,KAAA2D,EAAAA,QAGAmrC,gBAAA9uC,KAAAm+B,EAAAA,aAAkBj+B,MAAlB6uC,MAGApF,cAAA3pC,KAAA2D,EAAAA,QAGA4+B,WAAAviC,KAAA2D,EAAAA,QAGAgnC,WAAA3qC,KAAA2D,EAAAA,QAQAqrC,yBAAAhvC,KAAA2D,EAAAA,QAQAsrC,cAAAjvC,KAAA2D,EAAAA,QAWAkE,QAAA7H,KAAA2D,EAAAA,QAWAqJ,YAAAhN,KAAA2D,EAAAA,MAAQzD,MAAR,gBAcA+M,iBAAAjN,KAAA2D,EAAAA,MAAAzD,MAAA,qBAWAgvC,oBAAAlvC,KAAA2D,EAAAA,QAGAwrC,iBAAAnvC,KAAG2D,EAAAA,QAGH0Z,KAAArd,KAAA2D,EAAAA,QAMAo2B,eAAA/5B,KAAAuQ,EAAAA,SAGA0rB,gBAAQj8B,KAARuQ,EAAAA,OAAArQ,MAAA,YAoBAi8B,gBAAAn8B,KAAAuQ,EAAAA,OAAArQ,MAAA,YAGAkvC,kBAAApvC,KAAAuQ,EAAAA,SAIAod,cAAA3tB,KAAAuQ,EAAAA,UAYA44B,mCqD3dA,sBAgBAnpC,KAACuB,EAAAA,SAADrB,OACEsB,SACE2D,EAAAA,aACAivB,EAAAA,cACAib,GACA5tC,IAEFC,SAAU4tC,GAAoBnG,GAAW4F,GAAkBM,GAAiB5tC,IAC5EG,cAAeunC,GAAW4F,IAC1B3rC,WAAYmsC,QAzBdC,KCkBaC,IAIXC,aAActiC,EAAAA,QAAQ,SACpBC,EAAAA,MAAM,wBAAyBrC,EAAAA,OAAO+nB,QAAS,EAAGzlB,UAAW,cAC7DD,EAAAA,MAAM,UAAWrC,EAAAA,OAAOsC,UAAW,cACnCE,EAAAA,WAAW,eAAgBC,EAAAA,QAAQ,mCAAoCsP,EAAAA,WACrE/R,EAAAA,OAAO+nB,QAAS,EAAGzlB,UAAW,WAAY4f,OAAQ,IAClDliB,EAAAA,OAAO+nB,QAAS,GAAKzlB,UAAW,cAAe4f,OAAQ,KACvDliB,EAAAA,OAAO+nB,QAAS,EAAGzlB,UAAW,WAAY4f,OAAQ,QAEpD1f,EAAAA,WAAW,cAAeC,EAAAA,QAAQ,mCAAoCzC,EAAAA,OAAO+nB,QAAS,SrDmB7E4c,GAAqB,GAcrBC,GACT,GAAIzlC,GAAAA,eAAqC,+BAQhC0lC,IACXxsC,QAASusC,GACTnyB,MAAOua,EAAAA,SACPra,WAAYmyB,IAWDC,GACT,GAAI5lC,GAAAA,eAAyC,+BAC3CC,WAAY,OACZC,QAAS2lC,mBA2Gb,QAAFC,GACYvb,EACAx1B,EACAgxC,EACAlkC,EACAxB,EACAiS,EACA0zB,EACAx1B,EACqCy1B,EACzBnhC,EAEVohC,GAZZ,GAAF1xC,GAAAJ,IACYA,MAAZm2B,SAAYA,EACAn2B,KAAZW,YAAYA,EACAX,KAAZ2xC,kBAAYA,EACA3xC,KAAZyN,kBAAYA,EACAzN,KAAZiM,QAAYA,EACAjM,KAAZke,UAAYA,EACAle,KAAZ4xC,eAAYA,EACA5xC,KAAZoc,cAAYA,EACqCpc,KAAjD6xC,gBAAiDA,EACzB7xC,KAAxB0Q,KAAwBA,EAEV1Q,KAAd8xC,gBAAcA,EAvFd9xC,KAAA8P,UAAuC,QACvC9P,KAAAkoC,WAA+B,EAmC/BloC,KAAA+xC,UAA4C/xC,KAAK8xC,gBAAgBC,UAGjE/xC,KAAAgyC,UAA4ChyC,KAAK8xC,gBAAgBE,UAEjEhyC,KAAAiyC,SAAqB,GA6BrBjyC,KAAAkyC,iBAA6B,GAAIjY,KAGjCj6B,KAAAsT,WAAgC,GAAIzF,GAAAA,OAgBhC,IAAMzB,GAAuBzL,EAAYC,aAIpCsd,GAAUi0B,KAAQj0B,EAAUk0B,SAC/BpyC,KAAKkyC,iBACF1X,IAAI,aAAc,WAAM,MAAAp6B,GAAKiM,SAC7BmuB,IAAI,aAAc,WAAM,MAAAp6B,GAAKuM,SAC7B5E,QAAQ,SAACsqC,EAAU39B,GAAU,MAAAtI,GAAQkmC,iBAAiB59B,EAAO29B,KAGzC,UAArBjmC,EAAQmmC,UAA6C,aAArBnmC,EAAQmmC,WAM1CnmC,EAAQK,MAAM+lC,iBAAmBpmC,EAAQK,MAAMgmC,WAAarmC,EAAQK,MAAMimC,aAAe,IAMvFtmC,EAAQumC,WAAiD,SAApCvmC,EAAQK,MAAsB,iBACrDL,EAAQK,MAAsB,eAAI,IAGpC2P,EAAcU,QAAQnc,GAAaiH,KAAKiO,EAAAA,UAAU7V,KAAKsT,aAAanT,UAAU,SAAA4N,GAEvEA,EAEiB,aAAXA,GACT9B,EAAQiK,IAAI,WAAM,MAAA9V,GAAKiM,SAFvBJ,EAAQiK,IAAI,WAAM,MAAA9V,GAAKuM,KAAK,OAhPpC,MA8HEvD,QAAFC,eACMqoC,EADNnxC,UAAA,gBAAE,WACkC,MAAOP,MAAK8P,eAC9C,SAAaxG,GACPA,IAAUtJ,KAAK8P,YACjB9P,KAAK8P,UAAYxG,EAEbtJ,KAAKoyB,cACPpyB,KAAK4yC,kBAED5yC,KAAK6yC,kBACP7yC,KAAqB,iBAAEqM,KAAK,GAG9BrM,KAAKoyB,YAAYwa,oDAMvBxjC,OAAFC,eACMqoC,EADNnxC,UAAA,gBAAE,WAC0B,MAAOP,MAAKkoC,eACtC,SAAa5+B,GACXtJ,KAAKkoC,UAAY5uB,EAAAA,sBAAsBhQ,GAGnCtJ,KAAKkoC,WACPloC,KAAK2M,KAAK,oCAadvD,OAAFC,eACMqoC,EADNnxC,UAAA,eAAE,WACgB,MAAOP,MAAKiyC,cAC5B,SAAY3oC,GACVtJ,KAAK4xC,eAAekB,kBAAkB9yC,KAAKW,YAAYC,cAAeZ,KAAKiyC,UAG3EjyC,KAAKiyC,SAAoB,MAAT3oC,GAAgB,GAAGA,GAAQ/H,OAAS,IAE/CvB,KAAKiyC,UAAYjyC,KAAK+yC,oBACzB/yC,KAAK2M,KAAK,IAEV3M,KAAKgzC,wBACLhzC,KAAK4xC,eAAeqB,SAASjzC,KAAKW,YAAYC,cAAeZ,KAAKk3B,2CAKtE9tB,OAAFC,eACMqoC,EADNnxC,UAAA,oBAAE,WACqB,MAAOP,MAAKkzC,mBACjC,SAAiB5pC,GACftJ,KAAKkzC,cAAgB5pC,EACjBtJ,KAAK6yC,kBACP7yC,KAAKmzC,iBAAiBnzC,KAAKkzC,gDA+D/BxB,EAAFnxC,UAAAmF,YAAE,WAAA,GAAFtF,GAAAJ,IACQA,MAAKoyB,cACPpyB,KAAKoyB,YAAYmB,UACjBvzB,KAAK6yC,iBAAmB,MAIrB7yC,KAAKke,UAAUi0B,MAClBnyC,KAAKkyC,iBAAiBnqC,QAAQ,SAACsqC,EAAU39B,GACvC,MAAAtU,GAAKO,YAAYC,cAAcwyC,oBAAoB1+B,EAAO29B,KAE5DryC,KAAKkyC,iBAAiBmB,SAGxBrzC,KAAKsT,WAAW/J,OAChBvJ,KAAKsT,WAAWnF,WAEhBnO,KAAK4xC,eAAekB,kBAAkB9yC,KAAKW,YAAYC,cAAeZ,KAAKk3B,SAC3El3B,KAAKoc,cAAce,eAAend,KAAKW,cAIzC+wC,EAAFnxC,UAAA8L,KAAE,SAAKinC,GAAL,GAAFlzC,GAAAJ,IACI,QADJ,KAAAszC,IAAOA,EAAgBtzC,KAAK+xC,YACpB/xC,KAAKwW,UAAaxW,KAAKk3B,QAA3B,CAEA,GAAMI,GAAat3B,KAAKi4B,gBAExBj4B,MAAKuzC,UACLvzC,KAAKwzC,QAAUxzC,KAAKwzC,SAAW,GAAI5b,GAAAA,gBAAgB6b,GAAkBzzC,KAAKyN,mBAC1EzN,KAAK6yC,iBAAmBvb,EAAWrnB,OAAOjQ,KAAKwzC,SAAS1b,SACxD93B,KAAK6yC,iBAAiBa,cACnB9rC,KAAKiO,EAAAA,UAAU7V,KAAKsT,aACpBnT,UAAU,WAAM,MAAAC,GAAKmzC,YACxBvzC,KAAKmzC,iBAAiBnzC,KAAKkzC,eAC3BlzC,KAAKgzC,wBACLhzC,KAAqB,iBAAEqM,KAAKinC,KAI9B5B,EAAFnxC,UAAAoM,KAAE,SAAK2mC,OAAP,KAAAA,IAAOA,EAAgBtzC,KAAKgyC,WACpBhyC,KAAK6yC,kBACP7yC,KAAK6yC,iBAAiBlmC,KAAK2mC,IAK/B5B,EAAFnxC,UAAAoiC,OAAE,WACE3iC,KAAK+yC,oBAAsB/yC,KAAK2M,OAAS3M,KAAKqM,QAIhDqlC,EAAFnxC,UAAAwyC,kBAAE,WACE,QAAS/yC,KAAK6yC,kBAAoB7yC,KAAK6yC,iBAAiBc,aAI1DjC,EAAFnxC,UAAAkU,eAAE,SAAelD,GACTvR,KAAK+yC,qBAAuBxhC,EAAEoD,UAAYi/B,EAAAA,SAC5CriC,EAAEwqB,kBACF/7B,KAAK2M,KAAK,KAKd+kC,EAAFnxC,UAAAszC,gBAAE,WACE7zC,KAAK2M,KAAK3M,KAAK8xC,gBAAgBgC,oBAIzBpC,EAAVnxC,UAAA03B,oCACI,IAAIj4B,KAAKoyB,YACP,MAAOpyB,MAAKoyB,WAId,IAAM2hB,GAAW/zC,KAAKm2B,SAASroB,WAC5BkmC,oBAAoBh0C,KAAKW,aACzBszC,sBAAsB,gBACtBC,wBAAuB,GACvBC,mBAAmB,GAEhBC,EAAsBp0C,KAAK2xC,kBAC9B0C,4BAA4Br0C,KAAKW,YA2BpC,OAzBAozC,GAASO,yBAAyBF,GAElCL,EAASQ,gBAAgB3sC,KAAKiO,EAAAA,UAAU7V,KAAKsT,aAAanT,UAAU,SAAA6Q,GAC9D5Q,EAAKyyC,kBACH7hC,EAAOwjC,yBAAyBC,kBAAoBr0C,EAAKyyC,iBAAiBc,aAG5EvzC,EAAK6L,QAAQiK,IAAI,WAAM,MAAA9V,GAAKuM,KAAK,OAKvC3M,KAAKoyB,YAAcpyB,KAAKm2B,SAASqD,QAC/BzY,UAAW/gB,KAAK0Q,KAChBsoB,iBAAkB+a,EAClBve,WAzS6B,oBA0S7Bkf,eAAgB10C,KAAK6xC,oBAGvB7xC,KAAK4yC,kBAEL5yC,KAAKoyB,YAAYqG,cACd7wB,KAAKiO,EAAAA,UAAU7V,KAAKsT,aACpBnT,UAAU,WAAM,MAAAC,GAAKmzC,YAEjBvzC,KAAKoyB,aAINsf,EAAVnxC,UAAAgzC,mBACQvzC,KAAKoyB,aAAepyB,KAAKoyB,YAAYpiB,eACvChQ,KAAKoyB,YAAYhiB,SAGnBpQ,KAAK6yC,iBAAmB,MAIlBnB,EAAVnxC,UAAAqyC,2BACI,GAAM9kC,GACF9N,KAAgB,YAAE20C,YAA4B,iBAC5C5mC,EAAS/N,KAAK40C,aACdC,EAAU70C,KAAK80C,qBAErBhnC,GAASinC,eACb3d,MAAUrpB,EAAOinC,KAASH,EAAQG,MAClC5d,MAAUrpB,EAAOknC,SAAaJ,EAAQI,aAQpCvD,EAAFnxC,UAAAq0C,WAAE,WACE,GAEIM,GAFEC,GAASn1C,KAAK0Q,MAA2B,OAAnB1Q,KAAK0Q,KAAKpH,MAChCwE,EAAW9N,KAAK8N,QAGtB,IAAgB,SAAZA,GAAmC,SAAZA,EACzBonC,GAAkBE,QAAS,SAAUC,QAAqB,SAAZvnC,EAAsB,MAAQ,cACvE,IACO,UAAZA,GACa,QAAZA,GAAsBqnC,GACV,SAAZrnC,IAAwBqnC,EACzBD,GAAkBE,QAAS,QAASC,QAAS,cACxC,CAAA,KACO,SAAZvnC,GACa,SAAZA,GAAuBqnC,GACX,QAAZrnC,IAAuBqnC,GAGxB,KAAMG,IAAkCxnC,EAFxConC,IAAkBE,QAAS,MAAOC,QAAS,UAK7C,GAAJ5wB,GAAAzkB,KAAAu1C,gBAAAL,EAAAE,QAAAF,EAAAG,QAEI,QACEL,KAAME,EACND,UAAWG,QAJjB3wB,EAAAwI,EAI6BooB,QAJ7B5wB,EAAA0I,KASEukB,EAAFnxC,UAAAu0C,oBAAE,WACE,GAEIU,GAFEL,GAASn1C,KAAK0Q,MAA2B,OAAnB1Q,KAAK0Q,KAAKpH,MAChCwE,EAAW9N,KAAK8N,QAGtB,IAAgB,SAAZA,EACF0nC,GAAmBC,SAAU,SAAUC,SAAU,cAC5C,IAAgB,SAAZ5nC,EACT0nC,GAAmBC,SAAU,SAAUC,SAAU,WAC5C,IACO,UAAZ5nC,GACa,QAAZA,GAAsBqnC,GACV,SAAZrnC,IAAwBqnC,EACzBK,GAAmBC,SAAU,MAAOC,SAAU,cACzC,CAAA,KACO,SAAZ5nC,GACa,SAAZA,GAAuBqnC,GACX,QAAZrnC,IAAuBqnC,GAGxB,KAAMG,IAAkCxnC,EAFxC0nC,IAAmBC,SAAU,QAASC,SAAU,UAKlD,GAAJjxB,GAAAzkB,KAAAu1C,gBAAAC,EAAAC,SAAAD,EAAAE,SAEI,QACEV,KAAMQ,EACNP,UAAWQ,SAJjBhxB,EAAAwI,EAI8ByoB,SAJ9BjxB,EAAA0I,KASUukB,EAAVnxC,UAAAyyC,2CAGQhzC,MAAK6yC,mBACP7yC,KAAK6yC,iBAAiB3b,QAAUl3B,KAAKk3B,QACrCl3B,KAAK6yC,iBAAiBlK,gBAEtB3oC,KAAKiM,QAAQqpB,iBAAiB5B,eAAe9rB,KAC3CC,EAAAA,KAAK,GACLgO,EAAAA,UAAU7V,KAAKsT,aACfnT,UAAU,WACNC,EAAKyyC,kBACPzyC,EAAgB,YAAEwsC,qBAOlB8E,EAAVnxC,UAAA4yC,iBAAA,SAA2BwC,GACnB31C,KAAK6yC,mBACP7yC,KAAK6yC,iBAAiB8C,aAAeA,EACrC31C,KAAK6yC,iBAAiBlK,kBAKlB+I,EAAVnxC,UAAAg1C,gBAAA,SAA0BtoB,EAA4BE,GAelD,MAdsB,UAAlBntB,KAAK8N,UAA0C,UAAlB9N,KAAK8N,SAC1B,QAANqf,EACFA,EAAI,SACW,WAANA,IACTA,EAAI,OAGI,QAANF,EACFA,EAAI,QACW,UAANA,IACTA,EAAI,QAIAA,EAAZA,EAAeE,EAAfA,mBAjYA1rB,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,eACVC,SAAU,aACVI,MACEof,cAAe,SACfoP,YAAa,yBACbmlB,aAAc,6DAhGlBn0C,KAAEg4B,EAAAA,UAeFh4B,KAAEuD,EAAAA,aATFvD,KAAQ4+B,EAAAA,mBAgBR5+B,KAAEiC,EAAAA,mBAHFjC,KAAEuL,EAAAA,SAZFvL,KAAQ+b,EAAAA,WAhBR/b,KAAQo0C,EAAAA,gBAARp0C,KAAuBic,EAAAA,eAqMvBjc,SAAAkB,GAAAC,aAAAnB,KAAKoB,EAAAA,OAALlB,MAAY0vC,QApMZ5vC,KAAQ0W,EAAAA,eAARvV,aAAAnB,KAqMK2W,EAAAA,aACL3W,SAAAkB,GAAAC,aAAAnB,KAAK2W,EAAAA,WAAL3W,KAAiBoB,EAAAA,OAAjBlB,MAAwB6vC,2BAjFxB1jC,WAAArM,KAAG2D,EAAAA,MAAHzD,MAAS,wBAmBT6U,WAAA/U,KAAG2D,EAAAA,MAAHzD,MAAS,wBAYTowC,YAAAtwC,KAAG2D,EAAAA,MAAHzD,MAAS,yBAGTqwC,YAAAvwC,KAAG2D,EAAAA,MAAHzD,MAAS,yBAKTu1B,UAAAz1B,KAAG2D,EAAAA,MAAHzD,MAAS,gBAiBTg0C,eAAAl0C,KAAG2D,EAAAA,MAAHzD,MAAS,sBAtLT+vC,mBA+hBE,QAAF+B,GACYvgC,EACAojB,GADAt2B,KAAZkT,mBAAYA,EACAlT,KAAZs2B,oBAAYA,EAbZt2B,KAAA81C,YAAmC,UAGnC91C,KAAA+1C,qBAAyC,EAGzC/1C,KAAAg2C,QAA2C,GAAInoC,GAAAA,QAG/C7N,KAAAi2C,WAA4Cj2C,KAAKs2B,oBAAoBgC,QAAQC,EAAAA,YAAYC,SAjhBzF,MA2hBEib,GAAFlzC,UAAA8L,KAAE,SAAKinC,GAAL,GAAFlzC,GAAAJ,IAEQA,MAAKk2C,gBACPnjB,aAAa/yB,KAAKk2C,gBAIpBl2C,KAAK+1C,qBAAsB,EAC3B/1C,KAAKm2C,eAAiB9iB,WAAW,WAC/BjzB,EAAK01C,YAAc,UAInB11C,EAAKuoC,iBACJ2K,IAOLG,EAAFlzC,UAAAoM,KAAE,SAAK2mC,GAAL,GAAFlzC,GAAAJ,IAEQA,MAAKm2C,gBACPpjB,aAAa/yB,KAAKm2C,gBAGpBn2C,KAAKk2C,eAAiB7iB,WAAW,WAC/BjzB,EAAK01C,YAAc,SAInB11C,EAAKuoC,iBACJ2K,IAILG,EAAFlzC,UAAAmzC,YAAE,WACE,MAAO1zC,MAAKg2C,QAAQtiB,gBAItB+f,EAAFlzC,UAAAozC,UAAE,WACE,MAA4B,YAArB3zC,KAAK81C,aAGdrC,EAAFlzC,UAAA61C,gBAAE,WACEp2C,KAAK+1C,qBAAsB,GAG7BtC,EAAFlzC,UAAA81C,eAAE,SAAe3hC,GACb,GAAMlD,GAAUkD,EAAkC,OAElC,YAAZlD,GAAyBxR,KAAK2zC,aAChC3zC,KAAKg2C,QAAQzsC,OAGC,YAAZiI,GAAqC,WAAZA,IAC3BxR,KAAK+1C,qBAAsB,IAS/BtC,EAAFlzC,UAAA+1C,uBAAE,WACMt2C,KAAK+1C,qBACP/1C,KAAK2M,KAAK,IASd8mC,EAAFlzC,UAAAooC,cAAE,WACE3oC,KAAKkT,mBAAmB/B,+BAhI5B1P,KAACC,EAAAA,UAADC,OAAAC,SAAA,wBACEE,SAAU,mOACVC,QAAF,wVACES,cAAFC,EAAAA,kBAAAC,KACEL,gBAAFC,EAAAA,wBAAAC,OACEuP,YAAao/B,GAAfC,cACElvC,2GAKEs0C,cAAJ,wGArfA9C,iCsDZA,sBAmBAhyC,KAACuB,EAAAA,SAADrB,OACEsB,SACE6a,EAAAA,WACAlX,EAAAA,aACAivB,EAAAA,cACA3yB,IAEFC,SAAUuuC,GAAY+B,GAAkBvwC,IACxCG,cAAequC,GAAY+B,IAC3B3d,iBAAkB2d,IAClB5uC,WAAYysC,QA7BdkF,gCCsBAx2C,KAAAE,QAAoC,GAAI2N,GAAAA,QAGxC7N,KAAAy2C,kBAA8B,kBAG9Bz2C,KAAA02C,cAA0B,YAG1B12C,KAAA22C,kBAA8B,gBAG9B32C,KAAA42C,eAA2B,aAG3B52C,KAAA62C,cAA0B,YAG1B72C,KAAA82C,cAAkB,SAAC5sB,EAAclf,EAAkBxK,GAC/C,GAAc,GAAVA,GAA2B,GAAZwK,EAAiB,MAAO,QAAQxK,CAEnDA,GAAS+K,KAAK0L,IAAIzW,EAAQ,EAE1B,IAAMsK,GAAaof,EAAOlf,CAO1B,OAAUF,GAAa,EAA3B,OAJqBA,EAAatK,EAC1B+K,KAAKE,IAAIX,EAAaE,EAAUxK,GAChCsK,EAAaE,GAErB,OAAiDxK,GApDjD,sBAgBAiB,KAACsd,EAAAA,WAADpd,OAAakK,WAAY,8GAhBzBkrC,KA8DaC,IAEXlyC,QAASiyC,GACT73B,OAAQ,GAAI9G,GAAAA,SAAY,GAAI+G,GAAAA,SAAY43B,KACxC33B,WAAY63B,IC9BdC,GAAA,yBApCA,MAAAA,MAuDAC,GAAA,yBAvDA,MAAAA,MAwDaC,GACTrd,EAAiBod,mBAqFnB,QAAFE,GAAqB53B,EACCvM,GADpB,GAAF9S,GAEIkE,EAFJ5D,KAAAV,OAAAA,WAAqBI,GAArBqf,MAAqBA,EACCrf,EAAtB8S,mBAAsBA,EArDtB9S,EAAAk3C,WAAuB,EASvBl3C,EAAAm3C,QAAoB,EAkBpBn3C,EAAAo3C,oBAQAp3C,EAAAq3C,eAA0B,EAS1Br3C,EAAAs3C,uBAAkC,EAGlCt3C,EAAA8pB,KAAqD,GAAIpZ,GAAAA,aAQrD1Q,EAAKu3C,aAAel4B,EAAMvf,QAAQC,UAAU,WAAM,MAAAC,GAAK8S,mBAAmB/B,mBAR9E,MA7DkC1M,GAAlC4yC,EAAA/yC,GAQE8E,OAAFC,eACMguC,EADN92C,UAAA,iBAAE,WAC0B,MAAOP,MAAKs3C,gBACtC,SAAchuC,GACZtJ,KAAKs3C,WAAa/rC,KAAK0L,IAAIpD,EAAAA,qBAAqBvK,GAAQ,GACxDtJ,KAAKkT,mBAAmB/B,gDAK1B/H,OAAFC,eACMguC,EADN92C,UAAA,cAAE,WACuB,MAAOP,MAAKu3C,aACnC,SAAWjuC,GACTtJ,KAAKu3C,QAAU1jC,EAAAA,qBAAqBvK,GACpCtJ,KAAKkT,mBAAmB/B,gDAK1B/H,OAAFC,eACMguC,EADN92C,UAAA,gBAAE,WACyB,MAAOP,MAAK43C,eACrC,SAAatuC,GACXtJ,KAAK43C,UAAYrsC,KAAK0L,IAAIpD,EAAAA,qBAAqBvK,GAAQ,GACvDtJ,KAAK63C,mEAKPzuC,OAAFC,eACMguC,EADN92C,UAAA,uBAAE,WACkC,MAAOP,MAAKw3C,sBAC9C,SAAoBluC,GAClBtJ,KAAKw3C,kBAAoBluC,OAAaS,IAAI,SAAA+tC,GAAK,MAAAjkC,GAAAA,qBAAqBikC,KACpE93C,KAAK63C,mEAKPzuC,OAAFC,eACMguC,EADN92C,UAAA,oBAAE,WAC8B,MAAOP,MAAKy3C,mBAC1C,SAAiBnuC,GACftJ,KAAKy3C,cAAgBn+B,EAAAA,sBAAsBhQ,oCAM7CF,OAAFC,eACMguC,EADN92C,UAAA,4BAAE,WACsC,MAAOP,MAAK03C,2BAClD,SAAyBpuC,GACvBtJ,KAAK03C,sBAAwBp+B,EAAAA,sBAAsBhQ,oCAgBrD+tC,EAAF92C,UAAA6N,SAAE,WACEpO,KAAK+3C,cAAe,EACpB/3C,KAAK63C,kCACL73C,KAAK86B,oBAGPuc,EAAF92C,UAAAmF,YAAE,WACE1F,KAAK23C,aAAatnC,eAIpBgnC,EAAF92C,UAAAy3C,SAAE,WACE,GAAKh4C,KAAKi4C,cAAV,CAEA,GAAMC,GAAoBl4C,KAAK+K,SAC/B/K,MAAK+K,YACL/K,KAAKm4C,eAAeD,KAItBb,EAAF92C,UAAA63C,aAAE,WACE,GAAKp4C,KAAKq4C,kBAAV,CAEA,GAAMH,GAAoBl4C,KAAK+K,SAC/B/K,MAAK+K,YACL/K,KAAKm4C,eAAeD,KAItBb,EAAF92C,UAAA+3C,UAAE,WAEE,GAAKt4C,KAAKq4C,kBAAV,CAEA,GAAMH,GAAoBl4C,KAAK+K,SAC/B/K,MAAK+K,UAAY,EACjB/K,KAAKm4C,eAAeD,KAItBb,EAAF92C,UAAAg4C,SAAE,WAEE,GAAKv4C,KAAKi4C,cAAV,CAEA,GAAMC,GAAoBl4C,KAAK+K,SAC/B/K,MAAK+K,UAAY/K,KAAKw4C,mBACtBx4C,KAAKm4C,eAAeD,KAItBb,EAAF92C,UAAA83C,gBAAE,WACE,MAAOr4C,MAAK+K,WAAa,GAAsB,GAAjB/K,KAAKgL,UAIrCqsC,EAAF92C,UAAA03C,YAAE,WACE,GAAMQ,GAAgBz4C,KAAKw4C,kBAC3B,OAAOx4C,MAAK+K,UAAY0tC,GAAkC,GAAjBz4C,KAAKgL,UAIhDqsC,EAAF92C,UAAAi4C,iBAAE,WACE,MAAOjtC,MAAKC,KAAKxL,KAAKQ,OAASR,KAAKgL,UAAY,GAYlDqsC,EAAF92C,UAAAm4C,gBAAE,SAAgB1tC,GAGd,GAAMF,GAAa9K,KAAK+K,UAAY/K,KAAKgL,SACnCktC,EAAoBl4C,KAAK+K,SAE/B/K,MAAK+K,UAAYQ,KAAK0hC,MAAMniC,EAAaE,IAAa,EACtDhL,KAAKgL,SAAWA,EAChBhL,KAAKm4C,eAAeD,IAOdb,EAAV92C,UAAAs3C,2CACS73C,KAAK+3C,eAGL/3C,KAAKgL,WACRhL,KAAK43C,UAA2C,GAA/B53C,KAAK24C,gBAAgBn4C,OAClCR,KAAK24C,gBAAgB,GApNL,IAwNtB34C,KAAK44C,0BAA4B54C,KAAK24C,gBAAgBl4C,SAES,IAA3DT,KAAK44C,0BAA0B/uB,QAAQ7pB,KAAKgL,WAC9ChL,KAAK44C,0BAA0BrxC,KAAKvH,KAAKgL,UAI3ChL,KAAK44C,0BAA0BjuC,KAAK,SAACoe,EAAGC,GAAM,MAAAD,GAAIC,IAClDhpB,KAAKkT,mBAAmB/B,iBAIlBkmC,EAAV92C,UAAA43C,eAAA,SAAyBD,GACrBl4C,KAAKkqB,KAAKzY,MACRymC,kBAANA,EACMntC,UAAW/K,KAAK+K,UAChBC,SAAUhL,KAAKgL,SACfxK,OAAQR,KAAKQ,yBAvMnBiB,KAACC,EAAAA,UAADC,OAAAC,SAAA,gBACEC,SAAU,eACVC,SAAU,ugFACVC,QAAF,8xBACEE,MACFC,MAAA,iBAEAG,gBAAAC,EAAAA,wBAAAC,OACAC,cAAAC,EAAAA,kBAAAC,mFA7DA20C,EAAAt0C,kEAsEAvC,SAAAiB,KAAA2D,EAAAA,QAGA4F,WAAAvJ,KAAA2D,EAAAA,QASAuzC,kBAAAl3C,KAAA2D,EAAAA,QASAyzC,eAAAp3C,KAAA2D,EAAAA,QASA0zC,uBAAAr3C,KAAQ2D,EAAAA,QASR8kB,OAAAzoB,KAAAuQ,EAAAA,UAiBAqlC,mCCzIA,sBAiBA51C,KAACuB,EAAAA,SAADrB,OACEsB,SACE2D,EAAAA,aACA4e,GACAyrB,GACAuF,IAEFrzC,SAAUk0C,IACVh0C,cAAeg0C,IACfxyC,WAAYmyC,QA1Bd+B,KZmCAC,GAAA,WACE,QAAFA,GAAqBr4C,GAAAX,KAArBW,YAAqBA,EApCrB,MAAAq4C,MA4CaC,GACTxgC,EAAWugC,GAAoB,WAOtBrU,GAA4B,GAAI/4B,GAAAA,eAC3C,6BACCC,WAAY,OAAQC,QAASotC,KAoB5BC,GAAgB,iBA0BlB,QAAFvU,GAAqBjkC,EAAiCsL,EACU6xB,EAKHsb,GAN3D,GAAFh5C,GAOIkE,EAPJ5D,KAAAV,KAOUW,IAPVX,IAAqBI,GAArBO,YAAqBA,EAAiCP,EAAtD6L,QAAsDA,EACU7L,EAAhE09B,eAAgEA,EAqBhE19B,EAAAi5C,kBAAqB,EAarBj5C,EAAAuqB,OAA2B,EAM3BvqB,EAAAk5C,aAAiC,EASjCl5C,EAAA0kC,aAA2B,GAAIh0B,GAAAA,aAG/B1Q,EAAAm5C,0BAAoD/pC,EAAAA,aAAaC,MASjErP,EAAA+7B,KAAwE,cAGxE/7B,EAAA+4C,cAAkB,oBAAoBA,IAjDlC,IAAMK,GAAOJ,GAAYA,EAASK,SAAWL,EAASK,SAAShV,MAAM,KAAK,GAAK,SAC/ErkC,GAAKs5C,oBAAsB,QAAQF,EAAvC,IAA+Cp5C,EAAK+4C,cAApD,KACI/4C,EAAKi5C,iBAAsC,mBAAnBvb,IA4C5B,MAhEoCr5B,GAApCmgC,EAAAtgC,GA2BE8E,OAAFC,eACMu7B,EADNrkC,UAAA,aAAE,WACsB,MAAOP,MAAK2qB,YAClC,SAAU3T,GACRhX,KAAK2qB,OAASgvB,GAAM3iC,GAAK,GAGrBhX,KAAKq5C,kBACPr5C,KAAK45C,oDAMTxwC,OAAFC,eACMu7B,EADNrkC,UAAA,mBAAE,WAC4B,MAAOP,MAAKs5C,kBACxC,SAAgBtiC,GAAahX,KAAKs5C,aAAeK,GAAM3iC,GAAK,oCA+B5D4tB,EAAFrkC,UAAAs5C,kBAAE,WAEE,OAAQ9qC,UAAW,UADL/O,KAAKsJ,MAAQ,IAC/B,MAOEs7B,EAAFrkC,UAAAu5C,iBAAE,WACE,GAAkB,WAAd95C,KAAKm8B,KAAmB,CAE1B,OAAQptB,UAAW,UADL/O,KAAK+5C,YAAc,IACvC,OAIEnV,EAAFrkC,UAAA6d,gBAAE,WAAA,GAAFhe,GAAAJ,IACSA,MAAKq5C,kBAGRr5C,KAAKiM,QAAQM,kBAAiB,WAC5BnM,EAAKm5C,0BACDS,EAAAA,UAA2B55C,EAAKykC,iBAAiBjkC,cAAe,iBAC/DgH,KAAK9G,EAAAA,OAAM,SAAGyQ,GACb,MAAAA,GAAE0oC,SAAW75C,EAAKykC,iBAAiBjkC,iBACpCT,UAAU,SAAA4hC,GAAK,MAAA3hC,GAAK6L,QAAQiK,IAAI,WAAM,MAAA9V,GAAKw5C,0BAKtDhV,EAAFrkC,UAAAmF,YAAE,WACE1F,KAAKu5C,0BAA0BlpC,eAIzBu0B,EAAVrkC,UAAAq5C,4BACsB,gBAAd55C,KAAKm8B,MAAwC,WAAdn8B,KAAKm8B,MACtCn8B,KAAK8kC,aAAav7B,MAAMD,MAAOtJ,KAAKsJ,wBAjI1C7H,KAACC,EAAAA,UAADC,OAAAC,SAAA,mBACEC,SAAU,iBACVI,MACFsC,KAAA,cACM21C,gBAAN,IACIC,gBAAJ,MACIlpB,uBAAJ,QACIoW,cAAe,OACfnlC,MAAJ,mBACI0vB,kCAAJ,oBAEA5vB,QAAA,SACAF,SAAA,spBACEC,QAAS;y3JACTM,gBAAFC,EAAAA,wBAAAC,OACEC,cAAFC,EAAAA,kBAAAC,iFApFAjB,KAAEyD,OAAFtC,aAAAnB,KAAA2W,EAAAA,WAAA3W,KAAAoB,EAAAA,OAAAlB,MAAAkwB,EAAAA,2BAMApwB,SAAEkB,GAAFC,aAAAnB,KAAA2W,EAAAA,WAAA3W,KAAAoB,EAAAA,OAAAlB,MAAAgjC,SA0FAC,EAAA7hC,oEAmBA8hC,mBAAQpjC,KAAR+M,EAAAA,UAAA7M,MAAA,qBAaAmjC,eAAArjC,KAAAuQ,EAAAA,SAKAmqB,OAAA16B,KAAA2D,EAAAA,SAmBAw/B,mCClKA,sBAcAnjC,KAACuB,EAAAA,SAADrB,OACEsB,SAAU2D,EAAAA,aAAc1D,IACxBC,SAAUyhC,GAAgB1hC,IAC1BG,cAAeuhC,QAjBjBG,KCgCMC,GAAY,IAUlBC,GAAA,WACE,QAAFA,GAAqBtkC,GAAAX,KAArBW,YAAqBA,EA3CrB,MAAAskC,MA6CaC,GACTzsB,EAAWwsB,GAAwB,WAgB1BE,GACT,GAAIv5B,GAAAA,eAAiD,wCACnDC,WAAY,OACZC,QAASs5B,KAYTC,GAAmC,27CAoGvC,QAAFC,GAAqB3kC,EACP4kC,EACsCpkC,EAEaqkC,EAEvC3D,GANxB,GAAFzhC,GAQIkE,EARJ5D,KAAAV,KAQUW,IARVX,IAAqBI,GAArBO,YAAqBA,EAE+BP,EAApDe,UAAoDA,EAEaf,EAAjEolC,cAAiEA,EAEvCplC,EAA1ByhC,SAA0BA,EAxD1BzhC,EAAAuqB,OAAmB,EAEnBvqB,EAAAqlC,oBAA+B,EAY/BrlC,EAAAslC,gBAAoD,mBAAvBtlC,EAAKolC,iBAC1BplC,EAAKyhC,WAAazhC,EAAKyhC,SAAS8D,iBAYxCvlC,EAAAwlC,UAAsBZ,GAYtB5kC,EAAA+7B,KAAuC,cAoBnC/7B,EAAKqlC,mBAAqBF,EAASM,MAAQN,EAASO,QAEhDjE,IACEA,EAASkE,WACX3lC,EAAK2lC,SAAWlE,EAASkE,UAGvBlE,EAASmE,cACX5lC,EAAK4lC,YAAcnE,EAASmE,aAMhC,IAAMC,GACJ,sCAAqC7lC,EAAKqlC,mBAAqB,YAAc,IADnF,mBAGI9kC,GAAYC,cAAcI,UAAU0Y,IAAIusB,KAlC5C,MA5CwCxhC,GAAxC6gC,EAAAhhC,GAoBE8E,OAAFC,eACMi8B,EADN/kC,UAAA,gBAAE,WACyB,MAAOP,MAAK4lC,eACrC,SAAa/W,GACX7uB,KAAK4lC,UAAY/xB,EAAAA,qBAAqBgb,GAEjC7uB,KAAKylC,oBAAuBH,EAAmBY,UAAU5L,IAAIt6B,KAAK4lC,YACrE5lC,KAAKmmC,oDAMT/8B,OAAFC,eACMi8B,EADN/kC,UAAA,mBAAE,WAEE,MAAOP,MAAKomC,cAAgBpmC,KAAK+lC,SAAW,QAE9C,SAAgBz8B,GACdtJ,KAAKomC,aAAevyB,EAAAA,qBAAqBvK,oCAO3CF,OAAFC,eACMi8B,EADN/kC,UAAA,aAAE,WAEE,MAAqB,gBAAdP,KAAKm8B,KAAyBn8B,KAAK2qB,OAAS,OAErD,SAAU0b,GACRrmC,KAAK2qB,OAASpf,KAAK0L,IAAI,EAAG1L,KAAKE,IAAI,IAAKoI,EAAAA,qBAAqBwyB,sCAiC/Dj9B,OAAFC,eAAMi8B,EAAN/kC,UAAA,qBAAE,WACE,OAAQP,KAAK+lC,SA1KS,IA0KuB,mCAI/C38B,OAAFC,eAAMi8B,EAAN/kC,UAAA,gBAAE,WACE,GAAM+lC,GAA+B,EAArBtmC,KAAKumC,cAAoBvmC,KAAKgmC,WAC9C,OAAO,OAAOM,EAAlB,IAA6BA,mCAI3Bl9B,OAAFC,eAAMi8B,EAAN/kC,UAAA,4BAAE,WACE,MAAO,GAAIgL,KAAKi7B,GAAKxmC,KAAKumC,+CAI5Bn9B,OAAFC,eAAMi8B,EAAN/kC,UAAA,yBAAE,WACE,MAAkB,gBAAdP,KAAKm8B,KACAn8B,KAAKymC,sBAAwB,IAAMzmC,KAAK2qB,QAAU,IAIvD3qB,KAAKylC,oBAAoC,kBAAdzlC,KAAKm8B,KACC,GAA5Bn8B,KAAKymC,qBAGP,sCAITr9B,OAAFC,eAAMi8B,EAAN/kC,UAAA,0BAAE,WACE,MAAOP,MAAKgmC,YAAchmC,KAAK+lC,SAAW,qCAIpCT,EAAV/kC,UAAA4lC,4BACI,GAAIO,GAAWpB,EAAmBoB,QAE7BA,KACHA,EAAW1mC,KAAKmB,UAAUwlC,cAAc,SACxC3mC,KAAKmB,UAAUylC,KAAKC,YAAYH,GAChCpB,EAAmBoB,SAAWA,GAG5BA,GAAYA,EAASI,OACtBJ,EAA+B,MAAEK,WAAW/mC,KAAKgnC,oBAAqB,GAGzE1B,EAAmBY,UAAUxsB,IAAI1Z,KAAK+lC,WAIhCT,EAAV/kC,UAAAymC,6BACI,MAAO3B,IAEF4B,QAAQ,eAAgB,GAAG,IAAOjnC,KAAKymC,sBACvCQ,QAAQ,aAAc,GAAG,GAAMjnC,KAAKymC,sBACpCQ,QAAQ,YAAa,GAAGjnC,KAAK+lC,WApItCT,EAAAY,UAA6B,GAAIgB,MAAalC,KAM9CM,EAAAoB,SAAmD,oBAlCnDjlC,KAACC,EAAAA,UAADC,OAAAC,SAAA,uBACEC,SAAU,qBACVI,MACFsC,KAAA,cACMrC,MAAN,uBACI0vB,kCAAJ,kBACIuV,mBAAJ,WACIC,oBAAJ,WACIpW,uBAAJ,oCACID,uBAAJ,sCACIE,uBAAwB,QACxBoW,cAAJ,QAEArlC,QAAA,SACAF,SAAA,8sBACEC,QAAS,mkGACTM,gBAAFC,EAAAA,wBAAAC,OACEC,cAAFC,EAAAA,kBAAAC,mFA3GAjB,SAAEkB,GAAFC,aAAAnB,KAAA2W,EAAAA,WAAA3W,KAAAoB,EAAAA,OAAAlB,MAAAmB,EAAAA,cALArB,KAAQyD,OAAQtC,aAAhBnB,KAAA2W,EAAAA,WAAA3W,KAAAoB,EAAAA,OAAAlB,MAAAkwB,EAAAA,2BA0KApwB,SAAAkB,GAAAC,aAAAnB,KAAeoB,EAAAA,OAAQlB,MAAvBwjC,SAGAG,EAAAviC,uEArCAo5B,OAAA16B,KAAA2D,EAAAA,QAYAkE,QAAA7H,KAAA2D,EAAAA,SAYAkgC,uCA4HEE,EAAF3D,qCAAE,OAGFzhC,GAAA+7B,KAAA,gBAHA/7B,EACA,6BAOAqB,KAAAC,EAAAA,UAAAC,OAAAC,SAAA,oBA1BA2C,KAAA,cACA43B,KAAA,gBACAj6B,MAAA,mCACM0vB,kCAAN,kBACIuV,mBAAJ,WACIC,oBAAJ,YAEAplC,QAAA,SACAF,SAAA,8sBACAC,QAAA,mkGACAM,gBAAAC,EAAAA,wBAAAC,OACEC,cAAFC,EAAAA,kBAAAC,SAIA4kC,EAAAtiB,eAAA,WAAA,QACAvjB,KAAAuD,EAAAA,0MArRAvD,SAAEkB,GAAFC,aAAAnB,KAAAoB,EAAAA,OAAAlB,MAAAwjC,SAwRAmC,GAEAhC,ICjSAiC,GAAA,yBAPA,sBAaA9lC,KAACuB,EAAAA,SAADrB,OACEsB,SAAUC,GAAiB0D,EAAAA,cAC3BzD,SACEmiC,GACAgC,GACApkC,IAEFG,cACEiiC,GACAgC,QAtBJC,KCmDInG,GAAe,EAONoG,IACX1iC,QAASw8B,EAAAA,kBACTv8B,YAAayL,EAAAA,WAAW,WAAM,MAAAi3B,MAC9BjG,OAAO,GAITkG,GAAA,WACE,QAAFA,GAEW9X,EAEAtmB,GAFAtJ,KAAX4vB,OAAWA,EAEA5vB,KAAXsJ,MAAWA,EAtEX,MAAAo+B,MA4EAC,GAAA,yBA5EA,MAAAA,MA6EaC,GACT7jC,EAAc4jC,mBAiIhB,QAAFF,GAAsBI,GAApB,GAAFznC,GACIkE,EADJ5D,KAAAV,OAAAA,WAAsBI,GAAtBynC,gBAAsBA,EA9GtBznC,EAAAuqB,OAAwB,KAGxBvqB,EAAA0nC,MAA0B,mBAAmB1G,KAG7ChhC,EAAA2nC,UAA6C,KAG7C3nC,EAAA4nC,gBAAoC,EAGpC5nC,EAAA6nC,eAA+C,QAG/C7nC,EAAA8nC,WAA+B,EAG/B9nC,EAAA6hC,WAA+B,EAG/B7hC,EAAA+uB,8BAAwD,aAMxD/uB,EAAA0tB,UAAyB,aAOzB1tB,EAAA4Q,OAA4D,GAAIF,GAAAA,eAnIhE,MA6FmCrM,GAAnCgjC,EAAAnjC,GA6CE8E,OAAFC,eACMo+B,EADNlnC,UAAA,YAAE,WACqB,MAAOP,MAAK8nC,WACjC,SAASx+B,GACPtJ,KAAK8nC,MAAQx+B,EACbtJ,KAAKmoC,2DAIP/+B,OAAFC,eACMo+B,EADNlnC,UAAA,qBAAE,WAEE,MAAOP,MAAKioC,oBAEd,SAAkBjxB,GAChBhX,KAAKioC,eAAuB,WAANjxB,EAAiB,SAAW,QAClDhX,KAAKooC,uDASPh/B,OAAFC,eACMo+B,EADNlnC,UAAA,aAAE,WACmB,MAAOP,MAAK2qB,YAC/B,SAAU0b,GACJrmC,KAAK2qB,SAAW0b,IAElBrmC,KAAK2qB,OAAS0b,EAEdrmC,KAAKqoC,gCACLroC,KAAKsoC,8DAITb,EAAFlnC,UAAA+nC,0BAAE,WACMtoC,KAAK+nC,YAAc/nC,KAAK+nC,UAAUrG,UACpC1hC,KAAK+nC,UAAUrG,SAAU,IAQ7Bt4B,OAAFC,eACMo+B,EADNlnC,UAAA,gBAAE,WACiB,MAAOP,MAAK+nC,eAC7B,SAAa9kB,GACXjjB,KAAK+nC,UAAY9kB,EACjBjjB,KAAKsJ,MAAQ2Z,EAAWA,EAAS3Z,MAAQ,KACzCtJ,KAAKsoC,6DAIPl/B,OAAFC,eACMo+B,EADNlnC,UAAA,gBAAE,WAC0B,MAAOP,MAAKkoC,eACtC,SAAa5+B,GACXtJ,KAAKkoC,UAAY5uB,EAAAA,sBAAsBhQ,GACvCtJ,KAAKooC,uDAIPh/B,OAAFC,eACMo+B,EADNlnC,UAAA,gBAAE,WAC0B,MAAOP,MAAKiiC,eACtC,SAAa34B,GACXtJ,KAAKiiC,UAAY3oB,EAAAA,sBAAsBhQ,GACvCtJ,KAAKooC,uDAWPX,EAAFlnC,UAAAkF,mBAAE,WAIEzF,KAAKgoC,gBAAiB,GAOxBP,EAAFlnC,UAAAgoC,OAAE,WACMvoC,KAAK8tB,WACP9tB,KAAK8tB,aAID2Z,EAAVlnC,UAAA4nC,6CACQnoC,MAAKwoC,SACPxoC,KAAKwoC,QAAQzgC,QAAQ,SAAA0gC,GACnBA,EAAMjoB,KAAOpgB,EAAKogB,QAMhBinB,EAAVlnC,UAAA8nC,oDAEUK,EAAuC,OAAnB1oC,KAAK+nC,WAAsB/nC,KAAK+nC,UAAUz+B,QAAUtJ,KAAK2qB,MAE/E3qB,MAAKwoC,UAAYE,IACnB1oC,KAAK+nC,UAAY,KACjB/nC,KAAKwoC,QAAQzgC,QAAQ,SAAA0gC,GACnBA,EAAM/G,QAAUthC,EAAKkJ,QAAUm/B,EAAMn/B,MACjCm/B,EAAM/G,UACRthC,EAAK2nC,UAAYU,OAOzBhB,EAAFlnC,UAAA+sB,iBAAE,WACMttB,KAAKgoC,gBACPhoC,KAAKgR,OAAOS,KAAK,GAAIi2B,IAAe1nC,KAAc,UAAGA,KAAK2qB,UAI9D8c,EAAFlnC,UAAA6nC,oBAAE,WACMpoC,KAAKwoC,SACPxoC,KAAKwoC,QAAQzgC,QAAQ,SAAA0gC,GAAS,MAAAA,GAAME,mBAQxClB,EAAFlnC,UAAAyvB,WAAE,SAAW1mB,GACTtJ,KAAKsJ,MAAQA,EACbtJ,KAAK6nC,gBAAgB12B,gBAQvBs2B,EAAFlnC,UAAA0vB,iBAAE,SAAiBC,GACflwB,KAAKmvB,8BAAgCe,GAQvCuX,EAAFlnC,UAAA4vB,kBAAE,SAAkBD,GAChBlwB,KAAK8tB,UAAYoC,GAOnBuX,EAAFlnC,UAAA6vB,iBAAE,SAAiBC,GACfrwB,KAAKwW,SAAW6Z,EAChBrwB,KAAK6nC,gBAAgB12B,+BA3NzB1P,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,kBACVC,SAAU,gBACVgD,WAAY2iC,IACZvlC,MACEsC,KAAQ,aACRrC,MAAS,mBAEXF,QAAS,oDA5EXP,KAAEsQ,EAAAA,uCAoHFf,SAAAvP,KAAGuQ,EAAAA,SAGHw2B,UAAA/mC,KAAGoE,EAAAA,gBAAHlE,MAAmB6O,EAAAA,WAAW,WAAM,MAAAo4B,OAAmBC,aAAa,MAIpEroB,OAAA/e,KAAG2D,EAAAA,QAQHg9B,gBAAA3gC,KAAG2D,EAAAA,QAeHkE,QAAA7H,KAAG2D,EAAAA,QAsBH6d,WAAAxhB,KAAG2D,EAAAA,QASHoR,WAAA/U,KAAG2D,EAAAA,QAQH4+B,WAAAviC,KAAG2D,EAAAA,SAxMHqiC,GA6FmCG,IAuNnCkB,GAAA,WAME,QAAFA,GAAqBnoC,GAAAX,KAArBW,YAAqBA,EA1TrB,MAAAmoC,MA8TaC,GAELtwB,EAAWzF,EAAmBlP,EAAcglC,KAAsB,yBAuJxE,QAAFF,GAA0BI,EACZ12B,EACQu1B,EACAzrB,EACA6sB,EAC0CnL,GAL9D,GAAF19B,GAMIkE,EANJ5D,KAAAV,KAMUsS,IANVtS,WAEsBI,GAAtBynC,gBAAsBA,EACAznC,EAAtBgc,cAAsBA,EACAhc,EAAtB6oC,iBAAsBA,EAC0C7oC,EAAhE09B,eAAgEA,EA/HhE19B,EAAA4hC,UAA8B,gBAAeZ,GAG7ChhC,EAAA0e,GAAwB1e,EAAK4hC,UA6F7B5hC,EAAA4Q,OAA4D,GAAIF,GAAAA,aAShE1Q,EAAA8hC,UAA8B,EAS9B9hC,EAAAuqB,OAAwB,KAGxBvqB,EAAA8oC,+BAAuD,aAenD9oC,EAAK4oC,WAAaA,EAElB5oC,EAAK8oC,+BACHD,EAAiBE,OAAO,SAACrqB,EAAY0B,GAC/B1B,IAAO1e,EAAK0e,IAAM0B,IAASpgB,EAAKogB,OAClCpgB,EAAKshC,SAAU,OAjBzB,MA3HoCj9B,GAApCmkC,EAAAtkC,GAqBE8E,OAAFC,eACMu/B,EADNroC,UAAA,eAAE,WACyB,MAAOP,MAAKkiC,cACrC,SAAY54B,GACV,GAAM8/B,GAAkB9vB,EAAAA,sBAAsBhQ,EAC1CtJ,MAAKkiC,WAAakH,IACpBppC,KAAKkiC,SAAWkH,EACZA,GAAmBppC,KAAKgpC,YAAchpC,KAAKgpC,WAAW1/B,QAAUtJ,KAAKsJ,MACvEtJ,KAAKgpC,WAAW/lB,SAAWjjB,MACjBopC,GAAmBppC,KAAKgpC,YAAchpC,KAAKgpC,WAAW1/B,QAAUtJ,KAAKsJ,QAI/EtJ,KAAKgpC,WAAW/lB,SAAW,MAGzBmmB,GAEFppC,KAAKipC,iBAAiBI,OAAOrpC,KAAK8e,GAAI9e,KAAKwgB,MAE7CxgB,KAAK6nC,gBAAgB12B,iDAKzB/H,OAAFC,eACMu/B,EADNroC,UAAA,aAAE,WACmB,MAAOP,MAAK2qB,YAC/B,SAAUrhB,GACJtJ,KAAK2qB,SAAWrhB,IAClBtJ,KAAK2qB,OAASrhB,EACU,OAApBtJ,KAAKgpC,aACFhpC,KAAK0hC,UAER1hC,KAAK0hC,QAAU1hC,KAAKgpC,WAAW1/B,QAAUA,GAEvCtJ,KAAK0hC,UACP1hC,KAAKgpC,WAAW/lB,SAAWjjB,yCAOnCoJ,OAAFC,eACMu/B,EADNroC,UAAA,qBAAE,WAEE,MAAOP,MAAKioC,gBAAmBjoC,KAAKgpC,YAAchpC,KAAKgpC,WAAW5G,eAAkB,aAEtF,SAAkB94B,GAChBtJ,KAAKioC,eAAiB3+B,mCAKxBF,OAAFC,eACMu/B,EADNroC,UAAA,gBAAE,WAEE,MAAOP,MAAKkoC,WAAkC,OAApBloC,KAAKgpC,YAAuBhpC,KAAKgpC,WAAWxyB,cAExE,SAAalN,GACX,GAAMggC,GAAmBhwB,EAAAA,sBAAsBhQ,EAC3CtJ,MAAKkoC,YAAcoB,IACrBtpC,KAAKkoC,UAAYoB,EACjBtpC,KAAK6nC,gBAAgB12B,iDAKzB/H,OAAFC,eACMu/B,EADNroC,UAAA,gBAAE,WAEE,MAAOP,MAAKiiC,WAAcjiC,KAAKgpC,YAAchpC,KAAKgpC,WAAWhF,cAE/D,SAAa16B,GACXtJ,KAAKiiC,UAAY3oB,EAAAA,sBAAsBhQ,oCAczCF,OAAFC,eAAMu/B,EAANroC,UAAA,eAAE,WAAwB,OAAUP,KAAK8e,IAAM9e,KAAKgiC,WAApD,0CAyCE4G,EAAFroC,UAAAgS,MAAE,WACEvS,KAAKoc,cAAcqgB,SAASz8B,KAAKyiC,cAAe,aAQlDmG,EAAFroC,UAAAooC,cAAE,WAGE3oC,KAAK6nC,gBAAgB12B,gBAGvBy3B,EAAFroC,UAAA6N,SAAE,WACMpO,KAAKgpC,aAEPhpC,KAAK0hC,QAAU1hC,KAAKgpC,WAAW1/B,QAAUtJ,KAAK2qB,OAE9C3qB,KAAKwgB,KAAOxgB,KAAKgpC,WAAWxoB,OAIhCooB,EAAFroC,UAAA6d,gBAAE,WAAA,GAAFhe,GAAAJ,IACIA,MAAKoc,cACFU,QAAQ9c,KAAKW,aAAa,GAC1BR,UAAU,SAAAoiC,IACJA,GAAeniC,EAAK4oC,YACvB5oC,EAAK4oC,WAAWT,YAKxBK,EAAFroC,UAAAmF,YAAE,WACE1F,KAAKoc,cAAce,eAAend,KAAKW,aACvCX,KAAKkpC,kCAICN,EAAVroC,UAAA+sB,4BACIttB,KAAKgR,OAAOS,KAAK,GAAIi2B,IAAe1nC,KAAMA,KAAK2qB,UAGjDie,EAAFroC,UAAAgpC,kBAAE,WACE,MAAOvpC,MAAKwpC,eAAiBxpC,KAAKwW,UAGpCoyB,EAAFroC,UAAAmiC,cAAE,SAAchuB,GAQZA,EAAMqnB,mBAOR6M,EAAFroC,UAAAkpC,eAAE,SAAe/0B,GAIbA,EAAMqnB,iBAEN,IAAM2N,GAAoB1pC,KAAKgpC,YAAchpC,KAAKsJ,QAAUtJ,KAAKgpC,WAAW1/B,KAC5EtJ,MAAK0hC,SAAU,EACf1hC,KAAKstB,mBAEDttB,KAAKgpC,aACPhpC,KAAKgpC,WAAW7Z,8BAA8BnvB,KAAKsJ,OACnDtJ,KAAKgpC,WAAWT,SACZmB,GACF1pC,KAAKgpC,WAAW1b,oCApPxB7rB,KAACC,EAAAA,UAADC,OAAAC,SAAA,mBACEE,SAAU,++BACVC,QAAF,o9DACEC,QAAF,QAAA,gBAAA,YACEQ,cAAFC,EAAAA,kBAAAC,KACEb,SAAF,iBACEI,MACFC,MAAA,mBACMynC,4BAAN,UACIC,6BAAJ,WACIhY,kCAAJ,sCACIiY,YAAJ,sDAMAxnC,gBAAAC,EAAAA,wBAAAC,4GAiIAd,KAAsCsQ,EAAAA,oBApctCtQ,KAAEic,EAAAA,eAJFjc,KAAEqoC,EAAAA,4BAPFroC,KAAQyD,OAARtC,aAAAnB,KAAA2W,EAAAA,WAAA3W,KAAAoB,EAAAA,OAAAlB,MAAAkwB,EAAAA,4BAodA+W,EAAA7lC,0DA5HA0L,YAAAhN,KAAA2D,EAAAA,MAAAzD,MAAA,gBAGA+M,iBAAAjN,KAAA2D,EAAAA,MAAAzD,MAAA,qBAGAooC,kBAAGtoC,KAAH2D,EAAAA,MAAAzD,MAAA,sBAGA+/B,UAAAjgC,KAAA2D,EAAAA,QAGAkE,QAAA7H,KAAA2D,EAAAA,QAGAg9B,gBAAG3gC,KAAH2D,EAAAA,QAwBAoR,WAAA/U,KAAA2D,EAAAA,QAkBA4+B,WAAAviC,KAAA2D,EAAAA,QAUA4L,SAAAvP,KAAAuQ,EAAAA,SAaAywB,gBAAAhhC,KAAQ+M,EAAAA,UAAR7M,MAAA,YAqCAinC,mCCrdA,sBAcAnnC,KAACuB,EAAAA,SAADrB,OACEsB,SAAU2D,EAAAA,aAAcgX,GAAiB1a,IACzCC,SAAUskC,GAAemB,GAAgB1lC,IACzCG,cAAeokC,GAAemB,QAjBhCoB,KCiBa/M,IAIXC,gBAAiBruB,EAAAA,QAAQ,aAKvBC,EAAAA,MAAM,qBAAsBrC,EAAAA,OAC1BsC,UAAa,OACbrC,WAAc,aAEhBoC,EAAAA,MAAM,OAAQrC,EAAAA,OAEZw9B,aAAc,OACdv9B,WAAc,YAEhBuC,EAAAA,WAAW,uBAAwBC,EAAAA,QAAQ,QAC3CD,EAAAA,WAAW,sCACPC,EAAAA,QAAQ,8CZoBHg7B,GACT,GAAIt+B,GAAAA,eAAwB,+BAC1BC,WAAY,OACZC,QAASq+B,oBAqBb,QAAFtK,GACc3sB,EAC6Ck3B,EACrD93B,EACA2tB,EACAC,GALJ,GAAF9/B,GAMIkE,EANJ5D,KAAAV,KAMUsS,EAAY2tB,EAAkBC,IANxClgC,WACcI,GAAd8S,mBAAcA,EAC6C9S,EAA3DgqC,WAA2DA,IArD3D,MAkDsC3lC,GAAtCo7B,EAAAv7B,GAUEu7B,EAAFt/B,UAAAkF,mBAAE,WAAA,GAAFrF,GAAAJ,IACIA,MAAKoqC,WAAW3K,sBAAsBt/B,UAAU,WAC9CC,EAAK8S,mBAAmB/B,iCAxB9B1P,KAACC,EAAAA,UAADC,OAAAC,SAAA,qBACEE,SAAU,4BACVG,MACFC,MAAA,qBACMi+B,yBAAN,kCACIC,0BAAJ,oCAEA/9B,gBAAAC,EAAAA,wBAAAC,OACAC,cAAAC,EAAAA,kBAAAC,0JAzDAjB,KAAEuD,EAAAA,aAgEFvD,KAAuE4+B,EAAAA,mBA3DvE5+B,KAAEuL,EAAAA,UAMF6yB,oEAiMA7/B,MAAAW,YAAAA,EAAEX,KAAFqqC,kBAAAA;yBAAsBrqC,KAAtBoc,cAAAA,EACsBpc,KAAtBke,UAAAA,EACsBle,KAAtBiM,QAAAA,EACsBjM,KAAtBm7B,KAAAA,EACsBn7B,KAAtBo7B,qCAAA,sDAnGAp7B,KAAAq7B,MAAA,OAaAr7B,KAAAs7B,eAAA,EASAt7B,KAAAu7B,YAAA,2MAkEAv7B,KAAAw7B,aAAAr7B,UAAA,SAAAs7B,GA6GAA,GA/FAr7B,EAAsB+6B,OACtB/6B,EAAAg7B,qCAAAh7B,EAAA+6B,KAAA,eAEU/6B,EAAKs7B,qBAAft7B,EAAAu7B,YACAv7B,EAAAw7B,cAKAx7B,EAAAy7B,+OAUAz7B,EAAA07B,QACApnB,EAAiCqnB,wBAlDjC,MAwDA3yB,QAAOC,eAAP2yB,EAAAz7B,UAAA,YA7HAwc,uDAEAzT,EAAA,QAAAA,EAAA,MAAA,2BAEAtJ,KAAA8P,UAAAxG,EACQtJ,KAAKi8B,kBAAkBxqB,SAG/BwL,YAAA,EACAC,cAAA,8CAIAH,+DAEA/c,KAAAk8B,aAAA3yB,QAEA0T,YAAA,EACAC,cAAA,sDAIAH,uHAEEG,cAAF,mDAIAH,iHAEEG,cAAF,uDAkBAH,mGAEAE,YAAA,EACAC,cAAA,qDAGAH,6JAEAE,YAAA,EAIAC,cAAA,uDAGAH,mGAEAE,YAAA,EACAC,cAAA,qDAGAH,kJAEAE,YAAA,EAIAC,cAAA,6DAAAH,eAYA,MAAA/c,MAAAy7B,QAAA,SAAAz7B,KAAAm8B,MAEAlf,YAAA,EACAC,cAAA,iEAyCAld,KAAA27B,WAAAS,+BAAA/wB,KAAA,SAAAgxB,2JAmBA,GAAAC,GAAAt8B,KAAAm7B,MAAAn7B,KAAAm7B,KAAAoB,8DAEAv8B,KAAAo7B,+CAAAoB,aAEAx8B,KAAAoc,cAAAqgB,SAAAz8B,KAAAo7B,qCAAAp7B,KAAA08B,YAGA18B,KAAAW,YAAAC,cAAAyqB,QAEArrB,KAAOo7B,qCAAP,KACAp7B,KAAA08B,WAAA,+HAMA18B,KAAA27B,WAAAgB,QAAA38B,KAAA07B,6KAeA17B,KAAA27B,WAAAiB,WAGAxzB,OAAAC,eAAA2yB,EAAAz7B,UAAA,qHASE2c,cAAF,2JAqCA,YAdA,KAAA2f,IAAAA,GAAA78B,KAAAy7B,YAAA,KAAAqB,IAAAA,EAAA,WAAS98B,KAAT+8B,QAAAF,EAAAA,GAGQ78B,KAAR20B,gBAAA30B,KAAAg9B,kBAAA,OAAA,eAEQh9B,KAAR08B,WAAAI,IAGA98B,KAAA20B,gBAAA,OAAA30B,KAAA67B,iBAEM77B,KAAK27B,aACX37B,KAAA27B,WAAAgB,QAAA38B,KAAA07B,qBAGA,GAAAvwB,SAAqB,SAArBC,GACAhL,EAAAo7B,aAAA5zB,KAAAC,EAAAA,KAAA,IAAA1H,UAAA,SAAA82B,GAAA,MAAA7rB,GAAA6rB,EAAA,OAAA,+JAWA,IAAAzlB,EAAAqY,QAAA,SAAA,SAAAjY,GACA,SAAAJ,GAAuC,IAAvCI,EAAAiY,QAAA,UAEQ7pB,KAARw7B,aAAA/pB,KAA+BzR,KAA/B+8B,UAGA3zB,OAAAC,eAAA2yB,EAAAz7B,UAAA,UACAwc,sGAGAE,YAAA,EACAC,cAAA,mBAAAzb,KAAAC,EAAAA,UAAAC,OAAAC,SAAA,kCA3RAE,SAAA,0EACEgQ,YAAFmrB,GAAAC,iBACEj7B,MACFC,MAAA,aACAi7B,eAAA,kBACAC,qBAAA,4BACMC,oBAAN,0BAEIC,eAAgB,OAChBC,yBAAJ,qBACIC,0BAAJ,8DAEIC,0BAAJ,kBACIp5B,SAAJ,MAEAhC,gBAAAC,EAAAA,wBAAAC,OACAC,cAAAC,EAAAA,kBAAAC,SAIAs5B,EAAAhX,eAAA,WAAA,QACAvjB,KAAAuD,EAAAA,+EAlGAvD,KAAEuL,EAAAA,SAhBFvL,SAA8CkB,GAA9CC,aAAAnB,KAAA2W,EAAAA,WAAA3W,KAAAoB,EAAAA,OAAAlB,MAAAmB,EAAAA,eAIAk5B,EAAAj5B,gBAkBA+K,WAAArM,KAAA2D,EAAAA,QAsMA+2B,OAAA16B,KAAA2D,EAAAA,iEAjGAo2B,eAAA/5B,KAAAuQ,EAAAA,SAaA0rB,gBAAAj8B,KAAAuQ,EAAAA,OAAArQ,MAAA,YASAg8B,cAAAl8B,KAAAuQ,EAAAA,SAMA4rB,gBAAAn8B,KAAAuQ,EAAAA,OAAArQ,MAAA,YAeAk8B,cAAAp8B,KAAAuQ,EAAAA,SAKAiqB,oBAAAx6B,KAAAuQ,EAAAA,OAAArQ,MAAA,qBAMA85B,SAAAh6B,KAAA2D,EAAAA,SAeA42B,qFA6RAh8B,KAAAwiB,SAAAA,EAIcxiB,KAAdiM,QAAAA,EAJEjM,KAAFkT,mBAAAA,EAAkClT,KAAlC89B,eAAAA,EAKiE99B,KAAjE+9B,cAAA,GAAAjtB,GAAAA,aAxCA9Q,KAAAsT,WAAA,GAAAzF,GAAAA,QAgBA7N,KAAAg+B,gBAAA,GAAAnwB,GAAAA,6FAUA6C,GAEAA,EAAAM,OAAApJ,KAAAiO,EAAAA,UAAA7V,KAAAsT,aAAAnT,UAAA,4DAkBAH,KAAAi+B,UAAAC,EAvFA,MAyFA90B,QAAAC,eAAA80B,EAAA59B,UAAA,SAGIwc,mEAxFJ3T,OAAAC,eAAA80B,EAAA59B,UAAA,wEAGA6I,OAAAC,eAAA80B,EAAA59B,UAAA,6IAYA6I,OAAAC,eAAA80B,EAAA59B,UAAA,+IAQAP,KAAAo+B,mBAGA5D,8FAKEtd,cAAF,IAEA9T,OAAAC,eAAA80B,EAAA59B,UAAA,oFAmCE2c,cAAF,IAEAihB,EAAA59B,UAAAkF,8BAqBA,GAAArF,GAAAJ,6FAAAI,EAAAi+B,SAAAt2B,QAAA,SAAAu2B,GAAAl+B,EAAAm+B,mBAAAD,GACAl+B,EAAkBo+B,qBAAlBF,GACAl+B,EAAAq+B,iBAAAH,OAGAl+B,EAAAi+B,SAAA79B,QACQJ,EAAKs+B,cAAbt+B,EAAiCu+B,SACzBv+B,EAAKs+B,cAAbt+B,EAAAw+B,QACAx+B,EAAAy+B,wBAGAz+B,EAAA8S,mBAAA/B,iBAEAnR,KAAAg+B,gBAAAp2B,KAAAk3B,EAAAA,aAAA,IAGAjpB,EAAAA,UAAW7V,KAAXsT,aAA6BnT,UAA7B,WAAA,MAAAC,GAAAy+B,2BAOAV,EAAA59B,UAAAmF,uBAEA1F,KAAAg+B,gBAAA7vB,+EAOE,kFAKA,iEAEFgwB,EAAA59B,UAAAw+B,qBAEA,GAAA3+B,GAAAJ,uCAAAA,KAAAiM,QAMGM,kBANH,WAAA,MAAAnM,GAAA49B,gBAAAz0B,yMAcA,iBAAAmL,EAAAlD,SAAA,mBACoBpR,EADpB09B,gBAIA19B,EAAcoiB,SAAd5hB,cAAAI,UAAA0Y,IAAA,mDAGMtZ,EAAN8S,mBAAA/B,iBAEA,SAAAmtB,EAAAnC,MAEMmC,EAAN9C,aAAA5zB,KAAAiO,EAAAA,UAAA7V,KAAAq+B,SAAAn+B,UAAAC,UAAA,WACA,MAAAC,GAAA4+B,mBAAAV,EAAA7C,sEAeA6C,EAAArC,kBAAAr0B,KAAAiO,EAAAA,UAAA7V,KAAAq+B,SAAAn+B,UAAAC,UAAA,WACAC,EAAA6L,QAAAqpB,iBAAA5B,eAAA9rB,KAAAC,EAAAA,KAAA,IAAA1H,UAAA,6KAWAA,UAAA,qCACAC,EAAA8S,mBAAA/B,8HAWQnR,KAAKwiB,SAAb5hB,cAAAI,UAAAwY,OAAA,mDAQU,sGACoB,MAA9BpZ,EAAsBw+B,gBAIZx+B,EAAMw+B,KAAhBN,IAGA,MAAAl+B,EAAAu+B,QACAM,GAAA,SACA7+B,EAAAu+B,OAAAL,KAGAt+B,KAAAk/B,OAAAl/B,KAAAm/B,MAAA,KAEAn/B,KAAA0Q,MAAA,QAAA1Q,KAAA0Q,KAAApH,OACAtJ,KAAAm/B,MAAAn/B,KAAA4+B,KAEQ5+B,KAARk/B,OAAsBl/B,KAAtB2+B,SAIM3+B,KAAKm/B,MAAQn/B,KAAK2+B,OAClB3+B,KAAKk/B,OAASl/B,KAAK4+B,6BAQf,8KAKV5+B,KAAA+9B,cAAAtsB,iCAGA0sB,EAAA59B,UAAA6+B,6BAEA,GAAAh/B,GAAAJ,6BAAAc,OAAA,SAAAw9B,GAAA,MAAAA,KAAAA,EAAAe,cAAAj/B,EAAAk/B,iBAAAhB,KAAAv2B,QAAA,SAAAu2B,GAAA,MAAA,GAAAxC,WAKAqC,EAAA59B,UAAAg/B,8BAEA,MAAAv/B,MAAA0+B,cAAA1+B,KAAA2+B,SAAoB3+B,KAApBs/B,iBAAAt/B,KAAA2+B,uGAKU,SAAVL,8EAIU,SAAVA,8HAgBQ,GAAR,QAAYt+B,KAAKm/B,MAAjBhD,8BAGa,IAAb,QAAAn8B,KAAsBm/B,MAAtBhD,KAAA,CAEQ,GAAIpvB,GAAQ/M,KAApBm/B,MAAAK,MACA1yB,IAAAC,EAAAssB,GAAqBtsB,EAErB,GAAA/M,KAAAk/B,QAAAl/B,KAAAk/B,OAAAzD,OACA,GAAA,QAAQz7B,KAAKk/B,OAAb/C,KACA9C,GAAAr5B,KAAAk/B,OAAAM,WAGa,IAAb,QAAAx/B,KAAAk/B,OAAA/C,KAAA,CAEQ,GAARpvB,GAAA/M,KAAAk/B,OAAAM,MACAnG,IAAAtsB,EAAAD,GAAAC,4HAcQ/M,KAARiM,QAAqBiK,IAArB,WAAA,MAA8C9V,GAA9Cq/B,sBAAAl2B,KAAAnJ,EAAAs/B,oCAKAj+B,KAAUC,EAAAA,UAAVC,OAAAC,SAAA,uBACAC,SAAA,09EA7UAI,MACAC,MAAA,uBACAy9B,iDAAA,qBAEEt9B,gBAAFC,EAAAA,wBAAAC,OACEC,cAAFC,EAAAA,kBAAAC,SAIAy7B,EAAAnZ,eAAA,WAAA,QACAvjB,KAAA0W,EAAAA,eAAAvV,aAAAnB,KAAA2W,EAAAA,aACA3W,KAAAuD,EAAAA,aACAvD,KAAAuL,EAAAA,sLA9XAmxB,EAAAp7B,gBAMAs7B,WAAA58B,KAAAoE,EAAAA,gBAAAlE,MAAAq6B,MAXA9rB,WAAAzO,KAAAm+B,EAAAA,aAAAj+B,MAAAk+B,MAsdAC,eAAAr+B,KAAA+M,EAAAA,UAAA7M,MAAAk+B,MACAE,WAAAt+B,KAAA2D,EAAAA,sEAjFA+4B,oBChXE,QAAF6B,GACMrvB,EAC+CunB,EAC/C5lB,EACA2tB,EACAC,GACN,MAAI57B,GAAJ5D,KAAAV,KAAU2Q,EAAmBunB,EAAW5lB,EAAY2tB,EAAkBC,IAAtElgC,KA3BA,MAoBuCyE,GAAvCu7B,EAAA17B,kBAZA7C,KAACC,EAAAA,UAADC,OAAAC,SAAA,sBACEE,SAAU,4BACVG,MACFC,MAAA,yCACMi+B,yBAAN,kCACIC,0BAAJ,oCAEA/9B,gBAAAC,EAAAA,wBAAAC,OACAC,cAAAC,EAAAA,kBAAAC,0JA1BAjB,KAAEuD,EAAAA,aAiCFvD,KAAgE4+B,EAAAA,mBAxBhE5+B,KAAEuL,EAAAA,UACFgzB,OAoBAM,GAAA,SAAAh8B,gBAqCA,GAAAlE,GAAA,OAAAkE,GAAAA,EAAAwF,MAAA9J,KAAAukB,YAAAvkB,IAcA,+CATAI,EAAAmgC,gBAAA,EASAngC,EAZA,MAvCAqE,GAAA67B,EAAAh8B,wDAuCAyY,6HAEEG,cAAF,yKASEA,cAAF,kLASEA,cAAF,mBADAzb,KAAAC,EAAAA,UAAAC,OAAAC,SAAA,oCA9CAE,SAAA,0EACEgQ,YAAFmrB,GAAAC,iBACEj7B,MACFC,MAAA,yBACAmC,SAAA,KACA84B,eAAA,kBACMC,qBAAN,4BACIC,oBAAJ,0BAEIC,eAAgB,OAChBC,yBAAJ,qBACIC,0BAAJ,8DAEIC,0BAAJ,kBACI+C,4BAAJ,kBACIC,iBAAJ,uCACIC,oBAAJ,2CAEAr+B,gBAAAC,EAAAA,wBAAAC,OACAC,cAAAC,EAAAA,kBAAAC,SAGA49B,EAAAv9B,gBACA49B,kBAAAl/B,KAAA2D,EAAAA,QACAw7B,cAAAn/B,KAAA2D,EAAAA,yCAGAk7B,GASAtE,IASA6E,GAAA,SAAAv8B,+DAmBA,cACyCu8B,EAAzCj+B,4jFAbAX,MACAC,MAAA,6CACAy9B,iDAAA,qBAEEt9B,gBAAFC,EAAAA,wBAAAC,OACEC,cAAFC,EAAAA,kBAAAC,SAGAm+B,EAAI99B,gBACJs7B,WAAG58B,KAAHoE,EAAAA,gBAAAlE,MAAA2+B,MACApwB,WAAAzO,KAAAm+B,EAAAA,aAAAj+B,MAAAq+B,OAEAa,OC7GAC,GAAA,yBAPA,sBAgBAr/B,KAACuB,EAAAA,SAADrB,OACEsB,SACE2D,EAAAA,aACA1D,GACA69B,EAAAA,gBACAC,EAAAA,gBAEF79B,SACED,GACA84B,GACAmC,GACA0B,GACAS,GACAO,GACAb,IAEF38B,cACE24B,GACAmC,GACA0B,GACAS,GACAO,GACAb,QAtCJc,KCmBaG,GACX,GAAIr1B,GAAAA,eAA6C,oCAC/CC,WAAY,OACZC,QAAS,WAAM,OAAEo1B,oBAAoB,EAAOC,kBAAkB,MC2B9DC,GAAe,EAENC,IACXv8B,QAASw8B,EAAAA,kBACTv8B,YAAayL,EAAAA,WAAW,WAAM,MAAA+wB,MAC9BC,OAAO,GAITC,GAAA,WACE,QAAFA,GAEW7R,EAEA8R,GAFA1hC,KAAX4vB,OAAWA,EAEA5vB,KAAX0hC,QAAWA,EA/DX,MAAAD,MAoEAE,GAAA,WACE,QAAFA,GAAqBhhC,GAAAX,KAArBW,YAAqBA,EArErB,MAAAghC,MAuEaC,GAML99B,EAAc2U,EAAWzF,EAAmBjP,EAAc49B,KAAsB,0BAwGtF,QAAFJ,GAAcjvB,EAKA4L,EACQ9B,EACAlJ,EACe7O,EACf4H,EAEG41B,EACuC/D,EAC9BptB,GAbhC,GAAFtQ,GAcIkE,EAdJ5D,KAAAV,KAcUsS,IAdVtS,WAMsBI,GAAtBgc,cAAsBA,EACAhc,EAAtB8S,mBAAsBA,EAEA9S,EAAtB6L,QAAsBA,EAEG7L,EAAzByhC,SAAyBA,EACuCzhC,EAAhE09B,eAAgEA,EAC9B19B,EAAlCsQ,KAAkCA,EA5FlCtQ,EAAA0hC,SAAqB,SAACC,KACtB3hC,EAAA0tB,UAAsB,aAEtB1tB,EAAA4hC,UAA8B,uBAAsBZ,GACpDhhC,EAAA6hC,WAA+B,EAC/B7hC,EAAA8hC,UAA8B,EAG9B9hC,EAAA+hC,WAAsB,EAkBtB/hC,EAAAogB,KAAiC,KAGjCpgB,EAAA0e,GAAwB1e,EAAK4hC,UAG7B5hC,EAAAgiC,cAA+C,QAK/ChiC,EAAAqO,UAAkD,KAGlDrO,EAAAsO,eAA4D,KAgB5DtO,EAAA4Q,OAAM,GAAIF,GAAAA,aAOV1Q,EAAAiiC,aAAwD,GAAIvxB,GAAAA,aAQ5D1Q,EAAAkiC,WAAsD,GAAIxxB,GAAAA,aAuBtD1Q,EAAKiE,SAAWkY,SAASlY,IAAa,IAjB1C,MAhFoCI,GAApC88B,EAAAj9B,GA8CE8E,OAAFC,eACMk4B,EADNhhC,UAAA,gBAAE,WAC0B,MAAOP,MAAKiiC,eACtC,SAAa34B,GAAStJ,KAAKiiC,UAAY3oB,EAAAA,sBAAsBhQ,oCAG7DF,OAAFC,eACMk4B,EADNhhC,UAAA,eAAE,WACyB,MAAOP,MAAKkiC,cACrC,SAAY54B,GACVtJ,KAAKkiC,SAAW5oB,EAAAA,sBAAsBhQ,GACtCtJ,KAAKkT,mBAAmB/B,gDAsB1B/H,OAAFC,eAAMk4B,EAANhhC,UAAA,eAAE,WAAwB,OAAUP,KAAK8e,IAAM9e,KAAKgiC,WAApD,0CAuBET,EAAFhhC,UAAAkF,mBAAE,WAAA,GAAFrF,GAAAJ,IACIA,MAAKoc,cACFU,QAAQ9c,KAAKW,aAAa,GAC1BR,UAAU,SAAAoiC,GACJA,GAMHp3B,QAAQC,UAAUC,KAAK,WAAM,MAAAjL,GAAK0tB,iBAK1CyT,EAAFhhC,UAAAmF,YAAE,WACE1F,KAAKoc,cAAce,eAAend,KAAKW,cAIzC4gC,EAAFhhC,UAAAiiC,eAAE,SAAe9tB,GAcb,GAVAA,EAAMqnB,kBAED/7B,KAAKmiC,WACRniC,KAAKqiC,aAAa5wB,OAOhBzR,KAAKmiC,WAAaniC,KAAK6hC,SAASX,mBAElC,YADAlhC,KAAKyiC,cAAc7hC,cAAc8gC,QAAU1hC,KAAK0hC,QAKlD1hC,MAAK0hC,QAAU1hC,KAAKyiC,cAAc7hC,cAAc8gC,QAIhD1hC,KAAKstB,oBAIPiU,EAAFhhC,UAAAmiC,cAAE,SAAchuB,GAQZA,EAAMqnB,mBAIRwF,EAAFhhC,UAAAyvB,WAAE,SAAW1mB,GACTtJ,KAAK0hC,UAAYp4B,GAInBi4B,EAAFhhC,UAAA0vB,iBAAE,SAAiBC,GACflwB,KAAK8hC,SAAW5R,GAIlBqR,EAAFhhC,UAAA4vB,kBAAE,SAAkBD,GAChBlwB,KAAK8tB,UAAYoC,GAInBqR,EAAFhhC,UAAA6vB,iBAAE,SAAiBC,GACfrwB,KAAKwW,SAAW6Z,EAChBrwB,KAAKkT,mBAAmB/B,gBAI1BowB,EAAFhhC,UAAAgS,MAAE,WACEvS,KAAKoc,cAAcqgB,SAASz8B,KAAKyiC,cAAe,aAIlDlB,EAAFhhC,UAAAoiC,OAAE,WACE3iC,KAAK0hC,SAAW1hC,KAAK0hC,QACrB1hC,KAAK8hC,SAAS9hC,KAAK0hC,UAMbH,EAAVhhC,UAAA+sB,4BACIttB,KAAK8hC,SAAS9hC,KAAK0hC,SACnB1hC,KAAKgR,OAAOS,KAAK,GAAIgwB,IAAqBzhC,KAAMA,KAAK0hC,WAI/CH,EAAVhhC,UAAAqiC,mBAAA,SAA6BC,GACzB,GAAIhT,GAAcgT,EAAW7iC,KAAK8iC,eAAkB,GAOpD,OAJI9iC,MAAK+iC,mBACPlT,GAAc,KAGTtkB,KAAK0L,IAAI,EAAG1L,KAAKE,IAAIokB,EAAY,OAG1C0R,EAAFhhC,UAAAyiC,aAAE,WACE,IAAKhjC,KAAKwW,WAAaxW,KAAKmiC,UAAW,CACrC,GAAMc,GAAUjjC,KAAKkjC,SAAStiC,aAC9BZ,MAAK8iC,eAAiB9iC,KAAKmjC,YAAYviC,cAAcwiC,YAAcH,EAAQG,YAC3EH,EAAQjiC,UAAU0Y,IAAI,gBAEtB1Z,KAAK+iC,iBAAmB/iC,KAAK0hC,QAC7B1hC,KAAKmiC,WAAY,IAIrBZ,EAAFhhC,UAAA8iC,QAAE,SAAQ3uB,GACN,GAAI1U,KAAKmiC,UAAW,CAClB,GAAMphB,GAAY/gB,KAAK0Q,MAA4B,QAApB1Q,KAAK0Q,KAAKpH,OAAmB,EAAI,CAChEtJ,MAAKsjC,gBAAkBtjC,KAAK4iC,mBAAmBluB,EAAM6uB,OAASxiB,EAE9D,IAAMyiB,GAASxjC,KAAKsjC,gBAAkB,IAAOtjC,KAAK8iC,eAAiB/hB,CACnE/gB,MAAKkjC,SAAStiC,cAAc6L,MAAMsC,UAAY,eAAey0B,EAAnE,cAIEjC,EAAFhhC,UAAAkjC,WAAE,WAAA,GAAFrjC,GAAAJ,IACI,IAAIA,KAAKmiC,UAAW,CAClB,GAAMuB,GAAkB1jC,KAAKsjC,gBAAkB,EAE3CI,KAAoB1jC,KAAK0hC,UAC3B1hC,KAAKsiC,WAAW7wB,OACXzR,KAAK6hC,SAASV,mBACjBnhC,KAAK0hC,QAAUgC,EACf1jC,KAAKstB,qBAMTttB,KAAKiM,QAAQM,kBAAkB,WAAM,MAAA8mB,YAAW,WAC1CjzB,EAAK+hC,YACP/hC,EAAK+hC,WAAY,EACjB/hC,EAAK8iC,SAAStiC,cAAcI,UAAUwY,OAAO,gBAI7CpZ,EAAK8iC,SAAStiC,cAAc6L,MAAMsC,UAAY,UAOtDwyB,EAAFhhC,UAAAojC,mBAAE,WAME3jC,KAAKkT,mBAAmBsZ,gCA7R5B/qB,KAACC,EAAAA,UAADC,OAAAC,SAAA,mBACEC,SAAU,iBACVI,MACFC,MAAA,mBACM0hC,OAAN,KACIC,sBAAJ,UACIC,uBAAJ,WACIC,wCAAJ,4BACInS,kCAAJ,uCAEA9vB,SAAA,gpCACAC,QAAA,gnGACE8C,WAAFw8B,IACEr/B,QAAS,WAAX,gBAAA,QAAA,YACEQ,cAAFC,EAAAA,kBAAAC,KACEL,gBAAFC,EAAAA,wBAAAC,qFA7EAd,KAAEic,EAAAA,eAPFjc,KAAQsQ,EAAAA,oBAHRtQ,KAAQyD,OAARtC,aAAAnB,KAAA0D,EAAAA,UAAAxD,MAAA,gBAQAF,KAAEuL,EAAAA,SA6KFvL,SAAAkB,GAAAC,aAAAnB,KAAAoB,EAAAA,OAAAlB,MAAyBs/B,QAnKzBx/B,KAAEyD,OAAFtC,aAAAnB,KAAA2W,EAAAA,WAAA3W,KAAAoB,EAAAA,OAAAlB,MAAAkwB,EAAAA,2BAqKApwB,KAAA0W,EAAAA,eAAAvV,aAAAnB,KAAA2W,EAAAA,cAtLAmpB,EAAAx+B,0HAiHAyd,OAAA/e,KAAA2D,EAAAA,QAGA0Z,KAAArd,KAAA2D,EAAAA,QAGAg9B,gBAAA3gC,KAAA2D,EAAAA,QAGAqJ,YAAAhN,KAAA2D,EAAAA,MAAAzD,MAAA,gBAGA+M,iBAAAjN,KAAA2D,EAAAA,MAAAzD,MAAA,qBAKAqiC,WAAAviC,KAAA2D,EAAAA,QAGAs8B,UAAAjgC,KAAA2D,EAAAA,QAGA4L,SAAAvP,KAAAuQ,EAAAA,SAKAqwB,eAAA5gC,KAAQuQ,EAAAA,SAORswB,aAAA7gC,KAAAuQ,EAAAA,SAQAywB,gBAAAhhC,KAAA+M,EAAAA,UAAA7M,MAAA,YAcA4/B,mCCnLA,sBAeA9/B,KAACuB,EAAAA,SAADrB,OACEsB,SAAU2a,GAAiB1a,GAAiB2a,EAAAA,iBAC5C1a,SAAUo+B,GAAgBr+B,IAC1BG,cAAek+B,IACf18B,YACGC,QAASgtB,EAAAA,sBAAuBC,SAAUC,SApB/CiS,KfyEa3T,IACXxrB,QAASw8B,EAAAA,kBACTv8B,YAAayL,EAAAA,WAAW,WAAM,MAAAka,MAC9B8W,OAAO,GAIT7R,GAAA,yBAhFA,MAAAA,MA2FAuU,GAAA,WACE,QAAFA,GAAqBvjC,GAAAX,KAArBW,YAAqBA,EA5FrB,MAAAujC,MA8FaC,GAKLrgC,EAAc2U,EAAW1U,EAAcmgC,IAAgB,0BAyW7D,QAAFxZ,GAAcpY,EACQ8J,EACAlJ,EACYxC,EACGrM,EAE2By5B,GAN9D,GAAF19B,GAOIkE,EAPJ5D,KAAAV,KAOUsS,IAPVtS,WACsBI,GAAtBgc,cAAsBA,EACAhc,EAAtB8S,mBAAsBA,EACY9S,EAAlCsQ,KAAkCA,EAG8BtQ,EAAhE09B,eAAgEA,EAzThE19B,EAAAgkC,SAAoB,EAYpBhkC,EAAAikC,KAAyB,IAiBzBjkC,EAAAwqB,KAAyB,EAezBxqB,EAAAkkC,MAA0B,EAM1BlkC,EAAAmkC,aAAiC,EAiBjCnkC,EAAAqqB,cAA2C,EA4B3CrqB,EAAAuqB,OAAkC,KAelCvqB,EAAA8qB,WAAsB,EAGtB9qB,EAAA4Q,OAA6D,GAAIF,GAAAA,aAGjE1Q,EAAAivB,MAA4D,GAAIve,GAAAA,aAOhE1Q,EAAAgvB,YAAgE,GAAIte,GAAAA,aA6BpE1Q,EAAA0tB,UAAyB,aAIzB1tB,EAAA4qB,SAA6B,EAM7B5qB,EAAA2sB,YAAwB,EAMxB3sB,EAAA4c,WAAuB,EA2GvB5c,EAAA8rB,qBAAyC,EAGzC9rB,EAAAssB,kBAAiD,KAEjDtsB,EAAA+uB,8BAAgE,aAMhE/uB,EAAAwQ,uBAAmCpB,EAAAA,aAAaC,MA8B5CrP,EAAKiE,SAAWkY,SAASlY,IAAa,IAxB1C,MA5S+BI,GAA/BimB,EAAApmB,GAGE8E,OAAFC,eACMqhB,EADNnqB,UAAA,cAAE,WACwB,MAAOP,MAAKokC,aACpC,SAAW96B,GACTtJ,KAAKokC,QAAU9qB,EAAAA,sBAAsBhQ,oCAKvCF,OAAFC,eACMqhB,EADNnqB,UAAA,WAAE,WACoB,MAAOP,MAAKqkC,UAChC,SAAQrtB,GACNhX,KAAKqkC,KAAOxwB,EAAAA,qBAAqBmD,EAAGhX,KAAKqkC,MACzCrkC,KAAKgrB,SAAWhrB,KAAKirB,qBAAqBjrB,KAAK2qB,QAG/C3qB,KAAKkT,mBAAmB/B,gDAK1B/H,OAAFC,eACMqhB,EADNnqB,UAAA,WAAE,WACoB,MAAOP,MAAK4qB,UAChC,SAAQ5T,GACNhX,KAAK4qB,KAAO/W,EAAAA,qBAAqBmD,EAAGhX,KAAK4qB,MAGrB,OAAhB5qB,KAAK2qB,SACP3qB,KAAKsJ,MAAQtJ,KAAK4qB,MAEpB5qB,KAAKgrB,SAAWhrB,KAAKirB,qBAAqBjrB,KAAK2qB,QAG/C3qB,KAAKkT,mBAAmB/B,gDAK1B/H,OAAFC,eACMqhB,EADNnqB,UAAA,YAAE,WACqB,MAAOP,MAAKskC,WACjC,SAASttB,GACPhX,KAAKskC,MAAQzwB,EAAAA,qBAAqBmD,EAAGhX,KAAKskC,OAEtCtkC,KAAKskC,MAAQ,GAAM,IACrBtkC,KAAK6qB,gBAAkB7qB,KAAKskC,MAAME,WAAWC,MAAM,KAAKC,MAAOlkC,QAIjER,KAAKkT,mBAAmB/B,gDAK1B/H,OAAFC,eACMqhB,EADNnqB,UAAA,kBAAE,WAC4B,MAAOP,MAAKukC,iBACxC,SAAej7B,GAAkBtJ,KAAKukC,YAAcjrB,EAAAA,sBAAsBhQ,oCAO1EF,OAAFC,eACMqhB,EADNnqB,UAAA;sDAAE,WACqB,MAAOP,MAAKyqB,mBACjC,SAAiBnhB,GAEbtJ,KAAKyqB,cADO,SAAVnhB,EACmB,OACK,gBAAVA,IAAuC,gBAAVA,GACxBuK,EAAAA,qBAAqBvK,EAAOtJ,KAA4B,eAExD,mCAMzBoJ,OAAFC,eACMqhB,EADNnqB,UAAA,aAAE,WAME,MAHoB,QAAhBP,KAAK2qB,SACP3qB,KAAKsJ,MAAQtJ,KAAK4qB,MAEb5qB,KAAK2qB,YAEd,SAAU3T,GACR,GAAIA,IAAMhX,KAAK2qB,OAAQ,CACrB,GAAIrhB,GAAQuK,EAAAA,qBAAqBmD,EAI7BhX,MAAK6qB,kBACPvhB,EAAQwhB,WAAWxhB,EAAMyhB,QAAQ/qB,KAAK6qB,mBAGxC7qB,KAAK2qB,OAASrhB,EACdtJ,KAAKgrB,SAAWhrB,KAAKirB,qBAAqBjrB,KAAK2qB,QAG/C3qB,KAAKkT,mBAAmB/B,iDAa5B/H,OAAFC,eACMqhB,EADNnqB,UAAA,gBAAE,WAC0B,MAAOP,MAAKkrB,eACtC,SAAa5hB,GACXtJ,KAAKkrB,UAAY5R,EAAAA,sBAAsBhQ,oCAkBzCF,OAAFC,eAAMqhB,EAANnqB,UAAA,oBAAE,WACE,MAAIP,MAAKmrB,YACAnrB,KAAKmrB,YAAYnrB,KAAKsJ,OAM3BtJ,KAAK6qB,iBAAmB7qB,KAAKsJ,OAAStJ,KAAKsJ,MAAQ,GAAM,EACpDtJ,KAAKsJ,MAAMyhB,QAAQ/qB,KAAK6qB,iBAG1B7qB,KAAKsJ,OAAS,mCAIvBohB,EAAFnqB,UAAAgS,MAAE,WACEvS,KAAKorB,qBAIPV,EAAFnqB,UAAA8qB,KAAE,WACErrB,KAAKsrB,oBAOPliB,OAAFC,eAAMqhB,EAANnqB,UAAA,eAAE,WAAwB,MAAOP,MAAKurB,OAAOvrB,KAAKgrB,2CAmBhD5hB,OAAFC,eAAMqhB,EAANnqB,UAAA,mBAAE,WAGE,MAAOP,MAAKwrB,UAAYxrB,KAAKyrB,OAASzrB,KAAKyrB,wCAK7CriB,OAAFC,eAAMqhB,EAANnqB,UAAA,mBAAE,WACE,MAAwB,KAAjBP,KAAK0rB,yCAOdtiB,OAAFC,eAAMqhB,EAANnqB,UAAA,iBAAE,WACE,MAAIP,MAAKwW,SA3Rc,EA8RnBxW,KAAK2rB,cAAgB3rB,KAAK4rB,WACrB5rB,KAAKgd,UAzRiB,GAHG,EA8R3B,mCAIT5T,OAAFC,eAAMqhB,EAANnqB,UAAA,8BAAE,WACE,GAAMsrB,GAAO7rB,KAAKwrB,SAAW,IAAM,IAC7BM,EAAQ9rB,KAAKwrB,SAAW,OAAM,EAAIxrB,KAAK0rB,SAAjD,MAAmE,EAAI1rB,KAAK0rB,QAA5E,QAGI,QAEE3c,UAAW,YAAY8c,EAA7B,KAJiB7rB,KAAK+rB,2BAA6B,IAAM,IAIb/rB,KAAKgsB,UAAjD,eAAyEF,EAAzE,sCAKE1iB,OAAFC,eAAMqhB,EAANnqB,UAAA,wBAAE,WACE,GAAMsrB,GAAO7rB,KAAKwrB,SAAW,IAAM,IAC7BM,EAAQ9rB,KAAKwrB,SAAW,MAAMxrB,KAAK0rB,QAA7C,MAA+D1rB,KAAK0rB,QAApE,QAGI,QAEE3c,UAAW,YAAY8c,EAA7B,KAJiB7rB,KAAK+rB,2BAA6B,GAAK,KAIZ/rB,KAAKgsB,UAAjD,eAAyEF,EAAzE,sCAKE1iB,OAAFC,eAAMqhB,EAANnqB,UAAA,6BAAE,WAME,OACEwO,UAAa,aANJ/O,KAAKwrB,SAAW,IAAM,KAMrC,KAHgBxrB,KAAKwrB,UAAoC,OAAxBxrB,KAAKisB,gBAAgC,IAAL,IAChDjsB,KAAKksB,qBAAuB,EAAI,IAEjD,uCAKE9iB,OAAFC,eAAMqhB,EAANnqB,UAAA,oBAAE,WACE,GAAI4rB,GAAuC,IAA5BnsB,KAAKksB,qBAChBE,EAAiBpsB,KAAKwrB,SAAW,OAAOW,EAAhD,IAAiEA,EAAjE,QACQN,EAAO7rB,KAAKwrB,SAAW,IAAM,IAI7Ba,EAAQrsB,KAAKwrB,UAAoC,OAAxBxrB,KAAKisB,gBAAiC,GAAN,IACzDK,EAAUtsB,KAAKwrB,UAAoC,OAAxBxrB,KAAKisB,gBAA+C,GAApB,kBAC3DlqB,GACFqqB,eAAkBA,EAElBrd,UAAa,0BAA0B8c,EAA7C,IAAqDQ,EAAOF,EAAW,EAAvE,KAA6EG,EAGzE,IAAItsB,KAAK2rB,aAAe3rB,KAAKgsB,UAAW,CAItCjqB,EAAO,WAHI/B,KAAKwrB,SACXxrB,KAAKusB,YAAc,SAAW,MAC9BvsB,KAAKusB,YAAc,QAAU,SACJvsB,KAAKgsB,UAAzC,KAGI,MAAOjqB,oCAGTqH,OAAFC,eAAMqhB,EAANnqB,UAAA,6BAAE,WAOE,OACEwO,UAAa,aAPJ/O,KAAKwrB,SAAW,IAAM,KAOrC,KAFoE,MADnC,OAAxBxrB,KAAKisB,iBAA6BjsB,KAAKwrB,SAAgCxrB,KAAKusB,aAAxBvsB,KAAKusB,aACjCvsB,KAAK0rB,QAAU,EAAI1rB,KAAK0rB,SAEzD,uCA4BUhB,EAAVnqB,UAAAwrB,oCACI,MAAgC,OAAxB/rB,KAAKisB,iBAA6BjsB,KAAKwrB,SAAgCxrB,KAAKusB,aAAxBvsB,KAAKusB,aAI3D7B,EAAVnqB,UAAA0rB,yBACI,MAAQjsB,MAAK0Q,MAA2B,OAAnB1Q,KAAK0Q,KAAKpH,MAAkB,MAAQ,OAe3DohB,EAAFnqB,UAAA6N,SAAE,WAAA,GAAFhO,GAAAJ,IACIA,MAAKoc,cACAU,QAAQ9c,KAAKW,aAAa,GAC1BR,UAAU,SAAC4N,GACV3N,EAAK4c,YAAcjP,GAAqB,aAAXA,EAC7B3N,EAAK8S,mBAAmBsZ,kBAE1BxsB,KAAK0Q,OACP1Q,KAAK4Q,uBAAyB5Q,KAAK0Q,KAAKM,OAAO7Q,UAAU,WACvDC,EAAK8S,mBAAmB/B,mBAK9BuZ,EAAFnqB,UAAAmF,YAAE,WACE1F,KAAKoc,cAAce,eAAend,KAAKW,aACvCX,KAAK4Q,uBAAuBP,eAG9Bqa,EAAFnqB,UAAAksB,cAAE,WACMzsB,KAAKwW,WAMTxW,KAAK0sB,kBAAoB1sB,KAAK2sB,uBAC9B3sB,KAAK4sB,+BAGPlC,EAAFnqB,UAAAssB,SAAE,SAASnY,GACP,IAAI1U,KAAKwW,SAAT,CAIA,GAAIsW,GAAW9sB,KAAKsJ,KACpBtJ,MAAK+sB,YAAa,EAClB/sB,KAAKorB,oBACLprB,KAAKgtB,0BAA0BC,EAAGvY,EAAMwY,QAASC,EAAGzY,EAAM0Y,UAGtDN,GAAY9sB,KAAKsJ,QACnBtJ,KAAKqtB,kBACLrtB,KAAKstB,sBAIT5C,EAAFnqB,UAAAgtB,SAAE,SAAS7Y,GACP,IAAI1U,KAAKwW,SAAT,CAMKxW,KAAK+sB,YACR/sB,KAAKwtB,cAAc,MAIrB9Y,EAAMI,gBAEN,IAAIgY,GAAW9sB,KAAKsJ,KACpBtJ,MAAKgtB,0BAA0BC,EAAGvY,EAAM+Y,OAAOR,EAAGE,EAAGzY,EAAM+Y,OAAON,IAG9DL,GAAY9sB,KAAKsJ,OACnBtJ,KAAKqtB,oBAIT3C,EAAFnqB,UAAAitB,cAAE,SAAc9Y,GACR1U,KAAKwW,UAAYxW,KAAK+sB,aAK1B/sB,KAAKysB,gBAELzsB,KAAK+sB,YAAa,EAClB/sB,KAAKorB,oBACLprB,KAAK0tB,mBAAqB1tB,KAAKsJ,MAE3BoL,IACF1U,KAAKgtB,0BAA0BC,EAAGvY,EAAM+Y,OAAOR,EAAGE,EAAGzY,EAAM+Y,OAAON,IAClEzY,EAAMI,oBAIV4V,EAAFnqB,UAAAotB,YAAE,WACE3tB,KAAK+sB,YAAa,EAEd/sB,KAAK0tB,oBAAsB1tB,KAAKsJ,OAAUtJ,KAAKwW,UACjDxW,KAAKstB,mBAEPttB,KAAK0tB,mBAAqB,MAG5BhD,EAAFnqB,UAAAqtB,SAAE,WAGE5tB,KAAK0sB,kBAAoB1sB,KAAK2sB,uBAC9B3sB,KAAK4sB,8BAGPlC,EAAFnqB,UAAAstB,QAAE,WACE7tB,KAAK8tB,aAGPpD,EAAFnqB,UAAAwtB,WAAE,SAAWrZ,GACT,IAAI1U,KAAKwW,SAAT,CAEA,GAAIsW,GAAW9sB,KAAKsJ,KAEpB,QAAQoL,EAAMC,SACZ,IAAKqZ,GAAAA,QACHhuB,KAAKiuB,WAAW,GAChB,MACF,KAAKC,GAAAA,UACHluB,KAAKiuB,YAAY,GACjB,MACF,KAAKlZ,GAAAA,IACH/U,KAAKsJ,MAAQtJ,KAAKiX,GAClB,MACF,KAAKrC,GAAAA,KACH5U,KAAKsJ,MAAQtJ,KAAKyL,GAClB,MACF,KAAK0iB,GAAAA,WAQHnuB,KAAKiuB,WAAmC,OAAxBjuB,KAAKisB,gBAA2B,GAAK,EACrD,MACF,KAAKmC,GAAAA,SACHpuB,KAAKiuB,WAAW,EAChB,MACF,KAAKI,GAAAA,YAEHruB,KAAKiuB,WAAmC,OAAxBjuB,KAAKisB,iBAA4B,EAAI,EACrD,MACF,KAAKqC,GAAAA,WACHtuB,KAAKiuB,YAAY,EACjB,MACF,SAGE,OAGAnB,GAAY9sB,KAAKsJ,QACnBtJ,KAAKqtB,kBACLrtB,KAAKstB,oBAGPttB,KAAK+sB,YAAa,EAClBrY,EAAMI,mBAGR4V,EAAFnqB,UAAAguB,SAAE,WACEvuB,KAAK+sB,YAAa,GAIZrC,EAAVnqB,UAAA0tB,WAAA,SAAqBO,GACjBxuB,KAAKsJ,MAAQtJ,KAAKurB,QAAQvrB,KAAKsJ,OAAS,GAAKtJ,KAAKyuB,KAAOD,EAAUxuB,KAAKyL,IAAKzL,KAAKiX,MAI5EyT,EAAVnqB,UAAAysB,yBAAA,SAAmC0B,GAC/B,GAAK1uB,KAAK0sB,kBAAV,CAIA,GAAIiC,GAAS3uB,KAAKwrB,SAAWxrB,KAAK0sB,kBAAkBkC,IAAM5uB,KAAK0sB,kBAAkB5f,KAC7E+hB,EAAO7uB,KAAKwrB,SAAWxrB,KAAK0sB,kBAAkB/R,OAAS3a,KAAK0sB,kBAAkB3f,MAC9E+hB,EAAe9uB,KAAKwrB,SAAWkD,EAAIvB,EAAIuB,EAAIzB,EAG3CvB,EAAU1rB,KAAKurB,QAAQuD,EAAeH,GAAUE,EAUpD,IARI7uB,KAAK+rB,6BACPL,EAAU,EAAIA,GAOA,IAAZA,EACF1rB,KAAKsJ,MAAQtJ,KAAKyL,QACb,IAAgB,IAAZigB,EACT1rB,KAAKsJ,MAAQtJ,KAAKiX,QACb,CACL,GAAM8X,GAAa/uB,KAAKgvB,gBAAgBtD,GAIlCuD,EAAe1jB,KAAK2jB,OAAOH,EAAa/uB,KAAKyL,KAAOzL,KAAKyuB,MAAQzuB,KAAKyuB,KAAOzuB,KAAKyL,GAGxFzL,MAAKsJ,MAAQtJ,KAAKurB,OAAO0D,EAAcjvB,KAAKyL,IAAKzL,KAAKiX,QAKlDyT,EAAVnqB,UAAA+sB,4BACIttB,KAAKmvB,8BAA8BnvB,KAAKsJ,OACxCtJ,KAAKovB,YAAY3d,KAAKzR,KAAKsJ,OAC3BtJ,KAAKgR,OAAOS,KAAKzR,KAAK8Z,uBAIhB4Q,EAAVnqB,UAAA8sB,2BACIrtB,KAAKqvB,MAAM5d,KAAKzR,KAAK8Z,uBAIf4Q,EAAVnqB,UAAAqsB,sCACI,GAAK5sB,KAAKsvB,cAAiBtvB,KAAK0sB,kBAIhC,GAAyB,QAArB1sB,KAAKsvB,aAAwB,CAC/B,GAAIC,GAAYvvB,KAAKwrB,SAAWxrB,KAAK0sB,kBAAkB/R,OAAS3a,KAAK0sB,kBAAkB3f,MACnFyiB,EAAgBD,EAAYvvB,KAAKyuB,MAAQzuB,KAAKiX,IAAMjX,KAAKyL,KACzDgkB,EAAelkB,KAAKC,KAloBG,GAkoB6BgkB,GACpDE,EAAgBD,EAAezvB,KAAKyuB,IACxCzuB,MAAKksB,qBAAuBwD,EAAgBH,MAE5CvvB,MAAKksB,qBAAuBlsB,KAAKsvB,aAAetvB,KAAKyuB,MAAQzuB,KAAKiX,IAAMjX,KAAKyL,MAKzEif,EAAVnqB,UAAAuZ,mBAAA,SAA6BxQ,OAA7B,KAAAA,IAA6BA,EAAQtJ,KAAKsJ,MACtC,IAAIoL,GAAQ,GAAIib,GAKhB,OAHAjb,GAAMkb,OAAS5vB,KACf0U,EAAMpL,MAAQA,EAEPoL,GAIDgW,EAAVnqB,UAAA0qB,qBAAA,SAA+B3hB,GAC3B,QAASA,GAAS,GAAKtJ,KAAKyL,MAAQzL,KAAKiX,IAAMjX,KAAKyL,MAI9Cif,EAAVnqB,UAAAyuB,gBAAA,SAA0Ba,GACtB,MAAO7vB,MAAKyL,IAAMokB,GAAc7vB,KAAKiX,IAAMjX,KAAKyL,MAI1Cif,EAAVnqB,UAAAgrB,OAAA,SAAiBjiB,EAAemC,EAASwL,GACrC,WADJ,KAAAxL,IAAgCA,EAAhC,OAAA,KAAAwL,IAAyCA,EAAzC,GACW1L,KAAK0L,IAAIxL,EAAKF,KAAKE,IAAInC,EAAO2N,KAQ/ByT,EAAVnqB,UAAAosB,gCACI,MAAO3sB,MAAK8vB,eAAiB9vB,KAAK8vB,eAAelvB,cAAcmvB,wBAA0B,MAOnFrF,EAAVnqB,UAAA6qB,6BACIprB,KAAKW,YAAYC,cAAc2R,SAIzBmY,EAAVnqB,UAAA+qB,4BACItrB,KAAKW,YAAYC,cAAcyqB,QAOjCX,EAAFnqB,UAAAyvB,WAAE,SAAW1mB,GACTtJ,KAAKsJ,MAAQA,GAQfohB,EAAFnqB,UAAA0vB,iBAAE,SAAiBC,GACflwB,KAAKmvB,8BAAgCe,GAQvCxF,EAAFnqB,UAAA4vB,kBAAE,SAAkBD,GAChBlwB,KAAK8tB,UAAYoC,GAQnBxF,EAAFnqB,UAAA6vB,iBAAE,SAAiBC,GACfrwB,KAAKwW,SAAW6Z,kBA1qBpB5uB,KAACC,EAAAA,UAADC,OAAAC,SAAA,aACEC,SAAU,YACVgD,WAAFyrB,IACEruB,MACFsuB,UAAA,aACMC,SAAN,YACI/pB,UAAW,mBACXgqB,YAAJ,qBACIC,UAAW,aACXtP,eAAJ,kBACIuP,UAAW,mBACXC,aAAc,gBACdC,eAAJ,wBACI3uB,MAAJ,aACIqC,KAAJ,SACIusB,aAAJ,WACIje,uBAAJ,WACIke,uBAAwB,MACxBC,uBAAwB,MACxBC,uBAAwB,QACxBC,0BAAJ,uCACIC,8BAA+B,WAC/BC,+BAAJ,eACIC,gCAAJ,YACIC,mCAAJ,cACIC,6BAAJ,aACIC,yCAAJ,aACIC,8BAAJ,WACIC,+BAAJ,cACIC,oCAAJ,sDACIC,kCAAJ,uCAEA9vB,SAAA,ipBACAC,QAAA,4uPACEC,QAAF,WAAA,QAAA,YACEQ,cAAFC,EAAAA,kBAAAC,KACEL,gBAAFC,EAAAA,wBAA2CC,yFAnH3Cd,KAAEsQ,EAAAA,oBAlBFtQ,KAAQ0W,EAAAA,eAARvV,aAAAnB,KAAA2W,EAAAA,aAgBA3W,KAAEyD,OAAFtC,aAAAnB,KAAA0D,EAAAA,UAAAxD,MAAA,gBAfAF,KAAQyD,OAARtC,aAAAnB,KAAA2W,EAAAA,WAAA3W,KAAAoB,EAAAA,OAAAlB,MAAAkwB,EAAAA,4BAycAnH,EAAA3nB,6DA9TA0I,MAAAhK,KAAA2D,EAAAA,QAQAqpB,OAAAhtB,KAAA2D,EAAAA,QAYAwmB,aAAAnqB,KAAA2D,EAAAA,QAiBAkqB,eAAA7tB,KAAA2D,EAAAA,QAeAkE,QAAA7H,KAAA2D,EAAAA,QASA+lB,cAAA1pB,KAAA2D,EAAAA,QAcAomB,WAAA/pB,KAAA2D,EAAAA,QAgCA4L,SAAAvP,KAAAuQ,EAAAA,SAGAqd,QAAA5tB,KAAAuQ,EAAAA,SAQAod,cAAA3tB,KAAAuQ,EAAAA,SAGA8d,iBAAAruB,KAAA+M,EAAAA,UAAA7M,MAAA,oBAgLA+oB,mCC7bA,sBAeAjpB,KAACuB,EAAAA,SAADrB,OACEsB,SAAU2D,EAAAA,aAAc1D,IACxBC,SAAUunB,GAAWxnB,IACrBG,cAAeqnB,IACf7lB,YAAaC,QAASgtB,EAAAA,sBAAuBC,SAAUC,SAnBzDC,KCsBAC,GAAA,WA4BE,QAAFA,GAAcC,EACQC,GADpB,GAAFhyB,GAAAJ,IACsBA,MAAtBoyB,YAAsBA,EAlBtBpyB,KAAAqyB,gBAAqC,GAAIxkB,GAAAA,QAGzC7N,KAAAsyB,aAAkC,GAAIzkB,GAAAA,QAGtC7N,KAAAuyB,UAA+B,GAAI1kB,GAAAA,QASnC7N,KAAAwyB,oBAA+B,EAI3BxyB,KAAKmyB,kBAAoBA,EAEzBnyB,KAAKyyB,WAAWtyB,UAAU,WAAM,MAAAC,GAAKsyB,YACrCP,EAAkBQ,QAAQxyB,UAAU,WAAM,MAAAC,GAAKwyB,mBAvDnD,MA2DEV,GAAF3xB,UAAAmyB,QAAE,WACO1yB,KAAKqyB,gBAAgBQ,QACxB7yB,KAAKmyB,kBAAkBW,OAEzBC,aAAa/yB,KAAKgzB,qBAIpBd,EAAF3xB,UAAA0yB,kBAAE,WACOjzB,KAAKuyB,UAAUM,SAClB7yB,KAAKwyB,oBAAqB,EAC1BxyB,KAAKuyB,UAAUhpB,OACfvJ,KAAKuyB,UAAUpkB,aAUnB+jB,EAAF3xB,UAAA2yB,gBAAE,WACElzB,KAAKizB,qBAIPf,EAAF3xB,UAAA4yB,cAAE,SAAcC,GAAd,GAAFhzB,GAAAJ,IACIA,MAAKgzB,mBAAqBK,WAAW,WAAM,MAAAjzB,GAAKsyB,WAAWU,IAI7DlB,EAAF3xB,UAAA+yB,MAAE,WACOtzB,KAAKsyB,aAAaO,SACrB7yB,KAAKsyB,aAAa/oB,OAClBvJ,KAAKsyB,aAAankB,aAKd+jB,EAAV3xB,UAAAqyB,0BACI5yB,KAAKoyB,YAAYmB,UAEZvzB,KAAKuyB,UAAUM,QAClB7yB,KAAKuyB,UAAUpkB,WAGjBnO,KAAKqyB,gBAAgB9oB,MAAMiqB,kBAAmBxzB,KAAKwyB,qBACnDxyB,KAAKqyB,gBAAgBlkB,WACrBnO,KAAKwyB,oBAAqB,GAI5BN,EAAF3xB,UAAAkzB,eAAE,WACE,MAAOzzB,MAAKqyB,gBAAgBqB,gBAI9BxB,EAAF3xB,UAAAozB,YAAE,WACE,MAAO3zB,MAAKmyB,kBAAkByB,UAIhC1B,EAAF3xB,UAAAkyB,SAAE,WACE,MAAOzyB,MAAKuyB,UAAUmB,gBA3H1BxB,KCaa2B,GAAqB,GAAIjoB,GAAAA,eAAoB,mBAW1DkoB,GAAA,wBAEA9zB,KAAA+zB,WAAoC,YAMpC/zB,KAAAg0B,oBAAiC,GAMjCh0B,KAAAozB,SAAsB,EAStBpzB,KAAAsF,KAAoB,KAGpBtF,KAAAi0B,mBAAuD,SAGvDj0B,KAAAk0B,iBAAmD,SArDnD,MAAAJ,oBCgCE,QAAFK,GACWC,EACqB9uB,GADrBtF,KAAXo0B,YAAWA,EAEPp0B,KAAKsF,KAAOA,EADhB,MAKE6uB,GAAF5zB,UAAA8zB,OAAE,WACEr0B,KAAKo0B,YAAYnB,qBAInB7pB,OAAFC,eAAM8qB,EAAN5zB,UAAA,iBAAE,WACE,QAASP,KAAKsF,KAAK+uB,uDA5BvB5yB,KAACC,EAAAA,UAADC,OAAAC,SAAA,mBACEE,SAAU,8JACVC,QAAF,gZACES,cAAFC,EAAAA,kBAAAC,KACEL,gBAAFC,EAAAA,wBAAAC,OACEN,MACFC,MAAA,+HAWAiyB,KCjBaG,IAIXC,cAAe1lB,EAAAA,QAAQ,SACrBC,EAAAA,MAAM,eAAgBrC,EAAAA,OACpBsC,UAAW,aACXylB,QAAS,KAEX1lB,EAAAA,MAAM,UAAWrC,EAAAA,OACfsC,UAAW,WACXylB,QAAS,KAEXvlB,EAAAA,WAAW,eAAgBC,EAAAA,QAAQ,qCACnCD,EAAAA,WAAW,yBAA0BC,EAAAA,QAAQ,oCAAqCzC,EAAAA,OAChF+nB,QAAS,wBCoCb,QAAFC,GACYxoB,EACAtL,EACAuS,EAEDwhB,GALT,GAAFt0B,GAOIkE,EAPJ5D,KAAAV,OAAAA,WACYI,GAAZ6L,QAAYA,EACA7L,EAAZO,YAAYA,EACAP,EAAZ8S,mBAAYA,EAED9S,EAAXs0B,eAAWA,EAnBXt0B,EAAAkT,YAAuB,EAMvBlT,EAAAuyB,QAAmC,GAAI9kB,GAAAA,QAGvCzN,EAAAwzB,SAAoC,GAAI/lB,GAAAA,QAGxCzN,EAAAu0B,gBAAoB,SATpB,MAL0ClwB,GAA1CgwB,EAAAnwB,GA2BEmwB,EAAFl0B,UAAAq0B,sBAAE,SAAyBC,GAGvB,MAFA70B,MAAK80B,qBACL90B,KAAK+0B,wBACE/0B,KAAKg1B,cAAcJ,sBAAsBC,IAIlDJ,EAAFl0B,UAAA00B,qBAAE,SAAwBJ,GAGtB,MAFA70B,MAAK80B,qBACL90B,KAAK+0B,wBACE/0B,KAAKg1B,cAAcC,qBAAqBJ,IAIjDJ,EAAFl0B,UAAA20B,eAAE,SAAexgB,GACN,GAAA9C,GAAX8C,EAAA9C,UAAsBJ,EAAtBkD,EAAAlD,OAMI,KAJiB,SAAZA,GAAoC,SAAdI,GAAqC,WAAZJ,IAClDxR,KAAKm1B,gBAGS,YAAZ3jB,EAAuB,CAGzB,GAAM4jB,GAAUp1B,KAAK4zB,QAErB5zB,MAAKiM,QAAQiK,IAAI,WACfkf,EAAQ7rB,OACR6rB,EAAQjnB,eAMdsmB,EAAFl0B,UAAA80B,MAAE,WACOr1B,KAAKsT,aACRtT,KAAK20B,gBAAkB,UACvB30B,KAAKkT,mBAAmBsZ,kBAK5BiI,EAAFl0B,UAAAuyB,KAAE,WAKE,MADA9yB,MAAK20B,gBAAkB,SAChB30B,KAAK2yB,SAId8B,EAAFl0B,UAAAmF,YAAE,WACE1F,KAAKsT,YAAa,EAClBtT,KAAKm1B,iBAOCV,EAAVl0B,UAAA40B,mCACIn1B,MAAKiM,QAAQqpB,iBAAiB5B,eAAe9rB,KAAKC,EAAAA,KAAK,IAAI1H,UAAU,WACnEC,EAAKuyB,QAAQppB,OACbnJ,EAAKuyB,QAAQxkB,cAKTsmB,EAAVl0B,UAAAw0B,iCACI,GAAM3oB,GAAuBpM,KAAKW,YAAYC,cACxC20B,EAAev1B,KAAK00B,eAAec,UAErCD,KACE9tB,MAAMC,QAAQ6tB,GAEhBA,EAAaxtB,QAAQ,SAAA0tB,GAAY,MAAArpB,GAAQpL,UAAU0Y,IAAI+b,KAEvDrpB,EAAQpL,UAAU0Y,IAAI6b,IAIqB,WAA3Cv1B,KAAK00B,eAAeT,oBACtB7nB,EAAQpL,UAAU0Y,IAAI,wBAGqB,QAAzC1Z,KAAK00B,eAAeR,kBACtB9nB,EAAQpL,UAAU0Y,IAAI,sBAKlB+a,EAAVl0B,UAAAu0B,8BACI,GAAI90B,KAAKg1B,cAAchlB,cACrB,KAAM0lB,OAAM,4FAvIlBj0B,KAACC,EAAAA,UAADC,OAAAC,SAAA,sBACEE,SAAU,8CACVC,QAAF,0eACEM,gBAAFC,EAAAA,wBAAAC,OACEC,cAAFC,EAAAA,kBAAAC,KACEoP,YAAFwiB,GAAAC,eACEtyB,MACFsC,KAAc,QACRrC,MAAN,0BACIyzB,WAAJ,kBACIC,gBAAJ,sGAzBAn0B,KAAEsQ,EAAAA,oBAFFtQ,KAAEqyB,MAUFW,EAAA1xB,6EA2BA0xB,mDCzDA,sBAkBAhzB,KAACuB,EAAAA,SAADrB,OACEsB,SACE4yB,EAAAA,cACAlY,EAAAA,aACA/W,EAAAA,aACA4e,GACAtiB,IAEFC,SAAUsxB,GAAsBvxB,IAChCG,cAAeoxB,GAAsBN,IACrC2B,iBAAkBrB,GAAsBN,QA5B1C4B,KCiCaC,GACT,GAAIpqB,GAAAA,eAAkC,iCACpCC,WAAY,OACZC,QAASmqB,mBAkCb,QAAFC,GACcC,EACAC,EACAC,EACAC,EACwBC,EACeC,GALvCx2B,KAAdm2B,SAAcA,EACAn2B,KAAdo2B,MAAcA,EACAp2B,KAAdq2B,UAAcA,EACAr2B,KAAds2B,oBAAcA,EACwBt2B,KAAtCu2B,gBAAsCA,EACev2B,KAArDw2B,eAAqDA,EAtBrDx2B,KAAAy2B,wBAAgE,KAtDhE,MAyDErtB,QAAFC,eAAM6sB,EAAN31B,UAAA,0BAAE,WACE,GAAMm2B,GAAS12B,KAAKu2B,eACpB,OAAOG,GAASA,EAAOC,mBAAqB32B,KAAKy2B,6BAGnD,SAAuBntB,GACjBtJ,KAAKu2B,gBACPv2B,KAAKu2B,gBAAgBI,mBAAqBrtB,EAE1CtJ,KAAKy2B,wBAA0BntB,mCAmBnC4sB,EAAF31B,UAAAq2B,kBAAE,SAAqBC,EAA6BC,GAEhD,MAAO92B,MAAK+2B,QAAQF,EAAWC,IAUjCZ,EAAF31B,UAAAy2B,iBAAE,SAAiBl1B,EAA4Bg1B,GAE3C,MAAO92B,MAAK+2B,QAAQj1B,EAAUg1B,IAShCZ,EAAF31B,UAAA02B,KAAE,SAAKC,EAAiB7C,EAAqByC,OAA7C,KAAAzC,IAAwBA,EAAxB,GAEI,IAAM8C,GAAVC,MAAwBp3B,KAAKw2B,eAAmBM,EAU5C,OANAK,GAAQ7xB,MAAQ4xB,QAApBA,EAA6B7C,OAA7BA,GAES8C,EAAQnD,sBACXmD,EAAQnD,oBAAsBkD,GAGzBl3B,KAAK42B,kBAAkBzC,GAAgBgD,IAMhDjB,EAAF31B,UAAAmyB,QAAE,WACM1yB,KAAK22B,oBACP32B,KAAK22B,mBAAmBjE,WAI5BwD,EAAF31B,UAAAmF,YAAE,WAEM1F,KAAKy2B,yBACPz2B,KAAKy2B,wBAAwB/D,WAOzBwD,EAAV31B,UAAA82B,yBAAA,SAAmCC,EACAR,GAE/B,GAAMS,GAAeT,GAAUA,EAAOznB,kBAAoBynB,EAAOznB,iBAAiBmoB,SAC5EA,EAAW,GAAIC,GAAAA,eAAeF,GAAgBv3B,KAAKq2B,UAAW,GAAIqB,WACrE5D,GAAmBgD,MAGhBa,EACF,GAAIC,GAAAA,gBAAgBnD,GAAsBqC,EAAOznB,iBAAkBmoB,GACjEK,EAAmDP,EAAWrnB,OAAO0nB,EAE3E,OADAE,GAAaC,SAASpD,eAAiBoC,EAChCe,EAAaC,UAMd5B,EAAV31B,UAAAw2B,QAAA,SAAqBgB,EAA4CC,GAG7D,GAAMlB,GAAVM,MAAuB,GAAItD,IAAwB9zB,KAAKw2B,eAAmBwB,GACjEV,EAAat3B,KAAKi4B,eAAenB,GACjCoB,EAAYl4B,KAAKq3B,yBAAyBC,EAAYR,GACtD1C,EAAc,GAAIlC,IAAyCgG,EAAWZ,EAE5E,IAAIS,YAAmB7qB,GAAAA,YAAa,CAClC,GAAM2nB,GAAS,GAAIxmB,GAAAA,eAAe0pB,EAAO,MACvCI,UAAWrB,EAAOxxB,KAClB8uB,YAARA,GAGMA,GAAY0D,SAAWI,EAAUjD,qBAAqBJ,OACjD,CACL,GAAM2C,GAAWx3B,KAAKo4B,gBAAgBtB,EAAQ1C,GACxCS,EAAS,GAAI+C,GAAAA,gBAAgBG,MAASp1B,GAAW60B,GACjDa,EAAaH,EAAUtD,sBAAyBC,EAGtDT,GAAY0D,SAAWO,EAAWP,SAkBpC,MAZA93B,MAAKs2B,oBAAoBgC,QAAQC,EAAAA,YAAYC,SAAS5wB,KACpDiO,EAAAA,UAAUyhB,EAAWmB,cAAc7wB,KAAKC,EAAAA,KAAK,MAC7C1H,UAAU,SAAA2O,GACNA,EAAM4pB,QACRpB,EAAWqB,eAAe33B,UAAU0Y,IAAI,yBAExC4d,EAAWqB,eAAe33B,UAAUwY,OAAO,2BAI/CxZ,KAAK44B,iBAAiBxE,EAAa0C,GACnC92B,KAAK22B,mBAAqBvC,EACnBp0B,KAAK22B,oBAINT,EAAV31B,UAAAq4B,iBAAA,SAA2BxE,EAAkC0C,aAEzD1C,GAAYX,iBAAiBtzB,UAAU,WAEjCC,EAAKu2B,oBAAsBvC,IAC7Bh0B,EAAKu2B,mBAAqB,QAI1B32B,KAAK22B,oBAGP32B,KAAK22B,mBAAmBlD,iBAAiBtzB,UAAU,WACjDi0B,EAAYjC,kBAAkBkD,UAEhCr1B,KAAK22B,mBAAmBjE,WAGxB0B,EAAYjC,kBAAkBkD,QAI5ByB,EAAO1D,UAAY0D,EAAO1D,SAAW,GACvCgB,EAAYT,cAAcxzB,UAAU,WAAM,MAAAi0B,GAAYjB,cAAc2D,EAAe,YAGjFA,EAAO9C,qBACTh0B,KAAKo2B,MAAMyC,SAAS/B,EAAO9C,oBAAqB8C,EAAO/C,aAQnDmC,EAAV31B,UAAA03B,eAAA,SAAyBnB,GACrB,GAAMgC,GAAgB,GAAIC,GAAAA,aAC1BD,GAAc/X,UAAY+V,EAAO/V,SAEjC,IAAIiY,GAAmBh5B,KAAKm2B,SAASroB,WAAWmrB,SAE1CC,EAA6B,QAArBpC,EAAO/V,UACfoY,EAC0B,SAA9BrC,EAAO7C,oBACwB,UAA9B6C,EAAO7C,qBAAmCiF,GACZ,QAA9BpC,EAAO7C,oBAAgCiF,EACpCE,GAAWD,GAAwC,WAA9BrC,EAAO7C,kBAgBlC,OAfIkF,GACFH,EAAiBlsB,KAAK,KACbssB,EACTJ,EAAiBK,MAAM,KAEvBL,EAAiBM,qBAGa,QAA5BxC,EAAO5C,iBACT8E,EAAiBpK,IAAI,KAErBoK,EAAiBO,OAAO,KAG1BT,EAAcE,iBAAmBA,EAC1Bh5B,KAAKm2B,SAASqD,OAAOV,IAQtB5C,EAAV31B,UAAA63B,gBACA,SAAMtB,EACA1C,GAEF,GAAMmD,GAAeT,GAAUA,EAAOznB,kBAAoBynB,EAAOznB,iBAAiBmoB,QAElF,OAAO,IAAIC,GAAAA,eAAeF,GAAgBv3B,KAAKq2B,UAAW,GAAIqB,WAC3DxF,GAAgBkC,IAChBP,GAAoBiD,EAAOxxB,yBA1OlC7D,KAACsd,EAAAA,WAADpd,OAAakK,WAAYkqB,2CArCzBt0B,KAAQg4B,EAAAA,UAFRh4B,KAAQi4B,EAAAA,gBAURj4B,KAAEk4B,EAAAA,WATFl4B,KAAQm4B,EAAAA,qBAkERn4B,KAAuDy0B,EAAvDtzB,aAAAnB,KAAO2W,EAAAA,WAAP3W,KAAmB0d,EAAAA,aAjDnB1d,KAA4BqyB,GAA5BlxB,aAAAnB,KAkDOoB,EAAAA,OAlDPlB,MAkDcq0B,uOA5EdE,KC0DA2D,GAAA,yBA1DA,MAAAA,MA2DaC,GACTC,EAAiBh2B,EAAc81B,qFAWnCz5B,GAAA45B,UAAc,GAAIC,KAGlB75B,EAAAwN,cAA2B,GAAIC,GAAAA,QAS/BzN,EAAA8gB,MAAiD,MAWjD9gB,EAAA85B,WAAsC,GAYtC95B,EAAA8f,WAAqE,GAAIpP,GAAAA,eA1GzE,MAoE6BrM,GAA7Bqd,EAAAxd,GAkBE8E,OAAFC,eACMyY,EADNvhB,UAAA,iBAAE,WACiC,MAAOP,MAAKk6B,gBAC7C,SAAcnZ,GACZ,GAAI1C,EAAAA,aAAe0C,GAA2B,QAAdA,GAAqC,SAAdA,EACrD,KAAMoZ,IAA6BpZ,EAErC/gB,MAAKk6B,WAAanZ,mCAQpB3X,OAAFC,eACMyY,EADNvhB,UAAA,oBAAE,WAC8B,MAAOP,MAAKugB,mBAC1C,SAAiBvJ,GAAchX,KAAKugB,cAAgBjH,EAAAA,sBAAsBtC,oCAU1E8K,EAAFvhB,UAAAkgB,SAAE,SAAS2Z,GACP,IAAKA,EAAStb,GACZ,KAAMub,KAGR,IAAIr6B,KAAKg6B,UAAUM,IAAIF,EAAStb,IAC9B,KAAMyb,IAAgCH,EAAStb,GAEjD9e,MAAKg6B,UAAUQ,IAAIJ,EAAStb,GAAIsb,IAOlCtY,EAAFvhB,UAAAmgB,WAAE,SAAW0Z,GACTp6B,KAAKg6B,UAAUS,OAAOL,EAAStb,KAIjCgD,EAAFvhB,UAAAoK,KAAE,SAAKyvB,GACCp6B,KAAK+b,QAAUqe,EAAStb,IAC1B9e,KAAK+b,OAASqe,EAAStb,GACvB9e,KAAK+gB,UAAYqZ,EAASlZ,MAAQkZ,EAASlZ,MAAQlhB,KAAKkhB,OAExDlhB,KAAK+gB,UAAY/gB,KAAK06B,qBAAqBN,GAG7Cp6B,KAAKkgB,WAAWzO,MAAMsK,OAAQ/b,KAAK+b,OAAQgF,UAAW/gB,KAAK+gB,aAI7De,EAAFvhB,UAAAm6B,qBAAE,SAAqBN,GACnB,IAAKA,EAAY,MAAO,EAGxB,IAAMpY,GAAwC,MAAzBoY,EAASpY,aAAuBoY,EAASpY,aAAehiB,KAAKgiB,aAC9E2Y,EAAqBC,GAAsBR,EAASlZ,OAASlhB,KAAKkhB,MAAOc,GAGzE6Y,EAAqBF,EAAmB9Q,QAAQ7pB,KAAK+gB,WAAa,CAEtE,OADI8Z,IAAsBF,EAAmBn6B,SAAUq6B,EAAqB,GACrEF,EAAmBE,IAG5B/Y,EAAFvhB,UAAA6N,SAAE,WACEpO,KAAK86B,oBAGPhZ,EAAFvhB,UAAA0N,YAAE,WACEjO,KAAK4N,cAAcrE,QAGrBuY,EAAFvhB,UAAAmF,YAAE,WACE1F,KAAK4N,cAAcO,2BAvGvB1M,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,YACVC,SAAU,UACVG,QAAS,mDAWX+Z,SAAAta,KAAG2D,EAAAA,MAAHzD,MAAS,mBAMTuf,QAAAzf,KAAG2D,EAAAA,MAAHzD,MAAS,kBAGTof,YAAAtf,KAAG2D,EAAAA,MAAHzD,MAAS,sBAcTqgB,eAAAvgB,KAAG2D,EAAAA,MAAHzD,MAAS,yBAMTue,aAAAze,KAAGuQ,EAAAA,OAAHrQ,MAAU,oBA1GVmgB,GAoE6BgY,IzBlDvBvb,GAA4Bwc,GAAmBC,SAAW,IAC9BC,GAAgBC,eAGrCzZ,IASXC,UAAW7S,EAAAA,QAAQ,aACjBC,EAAAA,MAAM,kBAAmBrC,EAAAA,OAAOsC,UAAW,qBAE3CD,EAAAA,MAAM,oBAAqBrC,EAAAA,OAAOsC,UAAW,sBAC7CE,EAAAA,WAAW,6BAA8BC,EAAAA,QAAQqP,OAInDoD,YAAa9S,EAAAA,QAAQ,eACnBC,EAAAA,MAAM,kBAAmBrC,EAAAA,OAAOsC,UAAW,oBAC3CD,EAAAA,MAAM,oBAAqBrC,EAAAA,OAAOsC,UAAW,mBAC7CE,EAAAA,WAAW,6BAA8BC,EAAAA,QAAQqP,OAInDqD,aAAc/S,EAAAA,QAAQ,gBACpBC,EAAAA,MAAM,kBAAmBrC,EAAAA,OAAOsC,UAAW,mBAC3CD,EAAAA,MAAM,oBAAqBrC,EAAAA,OAAOsC,UAAW,oBAC7CE,EAAAA,WAAW,6BAA8BC,EAAAA,QAAQqP,OAInDsD,aAAchT,EAAAA,QAAQ,gBACpBC,EAAAA,MAAM,wCAAyCrC,EAAAA,OAAO+nB,QAAS,KAC/D1lB,EAAAA,MAAM,kCAAmCrC,EAAAA,OAAO+nB,QAAS,OACzD1lB,EAAAA,MAAM,4EACFrC,EAAAA,OAAO+nB,QAAS,KAEpBvlB,EAAAA,WAAW,yDAA0DC,EAAAA,QAAQ,QAC7ED,EAAAA,WAAW,UAAWC,EAAAA,QAAQqP,OAUhCwB,cAAelR,EAAAA,QAAQ,iBAErBI,EAAAA,WAAW,yCACPC,EAAAA,QAAQqP,GAA2BC,EAAAA,WACjC/R,EAAAA,OAAOsC,UAAW;+BAClBtC,EAAAA,OAAOsC,UAAW,sBAGxBE,EAAAA,WAAW,yCACPC,EAAAA,QAAQqP,GAA2BC,EAAAA,WACjC/R,EAAAA,OAAOsC,UAAW,kBAClBtC,EAAAA,OAAOsC,UAAW,wBAGxBE,EAAAA,WAAW,uCACPC,EAAAA,QAAQqP,GAA2BC,EAAAA,WACjC/R,EAAAA,OAAOsC,UAAW,oBAClBtC,EAAAA,OAAOsC,UAAW,sBAGxBE,EAAAA,WAAW,uCACPC,EAAAA,QAAQqP,GAA2BC,EAAAA,WACjC/R,EAAAA,OAAOsC,UAAW,kBAClBtC,EAAAA,OAAOsC,UAAW,yBAExBD,EAAAA,MAAM,yEACFrC,EAAAA,OAAOsC,UAAW,mBACtBD,EAAAA,MAAM,qCACFrC,EAAAA,OAAOsC,UAAW,sBACtBD,EAAAA,MAAM,kCACFrC,EAAAA,OAAOsC,UAAW,uBAIxB0P,cAAe5P,EAAAA,QAAQ,iBACrBI,EAAAA,WAAW,WACTyP,EAAAA,MAAM,KAAMC,EAAAA,gBAAiBC,UAAU,oCCrF7C5e,KAAAE,QAAoC,GAAI2N,GAAAA,QAGxC7N,KAAA6e,gBAAoB,SAACC,GACjB,MAAO,sBAAsBA,GAzBjC,sBAeArd,KAACsd,EAAAA,WAADpd,OAAakK,WAAY,8GAfzBmT,KAkCaC,IAEXna,QAASka,GACTE,OAAQ,GAAI9G,GAAAA,SAAY,GAAI+G,GAAAA,SAAYH,KACxCI,WAAYC,ICPdC,GAAA,yBA/BA,MAAAA,MAgCaC,GACTxb,EAAcub,mBAoGhB,QAAFE,GAAqBC,EACP9O,EACmB+O,EACAC,GAH/B,GAAFvf,GAKIkE,EALJ5D,KAAAV,OAAAA,IAOI,IAPiBI,EAArBqf,MAAqBA,EAEYrf,EAAjCsf,MAAiCA,EACAtf,EAAjCuf,cAAiCA,EAtCjCvf,EAAAwf,oBAAgC,EAUhCxf,EAAAyf,gBAAmC,GAKnCzf,EAAA0f,4BAA+B,EAS/B1f,EAAA2f,cAA+C,SAkBtCL,EACH,KAAMM,YAGR5f,GAAK6f,sBAAwBpW,EAAAA,MAAM6V,EAAMQ,WAAYR,EAAM9R,cAAe6R,EAAMvf,SAC3EC,UAAU,WACLC,EAAK+f,aACP/f,EAAKggB,yBAIFhgB,EAAK+f,aAAe/f,EAAKigB,YAA0C,WAA5BjgB,EAAKigB,WAAW7O,UAC1DpR,EAAK0f,4BAA6B,EAClC1f,EAAKkgB,8BAA8B1O,UAAW,SAAUJ,QAASpR,EAAKyf,mBAGxElP,EAAkBQ,mBA5B5B,MAtCmC1M,GAAnC+a,EAAAlb,GAsCE8E,OAAFC,eACMmW,EADNjf,UAAA,oBAAE,WAC8B,MAAOP,MAAKugB,mBAC1C,SAAiBvJ,GAAKhX,KAAKugB,cAAgBjH,EAAAA,sBAAsBtC,oCA8BjEwI,EAAFjf,UAAA6N,SAAE,YACOpO,KAAK8e,IAAM9e,KAAK2f,gBACnB3f,KAAK8e,GAAK9e,KAAK2f,cAAca,MAI/BxgB,KAAKogB,wBACLpgB,KAAKsgB,8BACA9O,QAASxR,KAAKmgB,YAAc,SAAWngB,KAAK6f,kBAEjD7f,KAAK0f,MAAMe,SAASzgB,OAGtBwf,EAAFjf,UAAAmF,YAAE,WACE1F,KAAK0f,MAAMgB,WAAW1gB,MACtBA,KAAKigB,sBAAsB5P,eAO7BmP,EAAFjf,UAAAogB,yBAAE,SAAyBC,GAEnB5gB,KAAK6gB,eAAiBD,IAE1B5gB,KAAK4f,mBAAqBgB,EAErB5gB,KAAKmgB,cACRngB,KAAKogB,wBACDpgB,KAAK4f,mBACP5f,KAAKsgB,8BAA8B1O,UAAW5R,KAAK6f,gBAAiBrO,QAAS,SAE7ExR,KAAKsgB,8BAA8B1O,UAAW,OAAQJ,QAASxR,KAAK6f,qBAU1EL,EAAFjf,UAAA+f,6BAAE,SAA6BQ,GAC3B9gB,KAAKqgB,WAAaS,EAId9gB,KAAK8f,6BACP9f,KAAKqgB,YAAc7O,QAASsP,EAAUtP,WAK1CgO,EAAFjf,UAAAua,aAAE,WACE,IAAI9a,KAAK6gB,cAAT,CAEA7gB,KAAK0f,MAAM/U,KAAK3K,MAGgB,SAA5BA,KAAKqgB,WAAW7O,SAAkD,WAA5BxR,KAAKqgB,WAAW7O,UACxDxR,KAAK8f,4BAA6B,EAKpC,IAAMgB,GAAsC9gB,KAAKmgB,aAC5CvO,UAAW5R,KAAK6f,gBAAiBrO,QAAS,WAC1CI,UAAW,SAAUJ,QAASxR,KAAK6f,gBACxC7f,MAAKsgB,6BAA6BQ,GAElC9gB,KAAK4f,oBAAqB,IAI5BJ,EAAFjf,UAAA4f,UAAE,WACE,MAAOngB,MAAK0f,MAAM3D,QAAU/b,KAAK8e,KACH,QAAzB9e,KAAK0f,MAAMqB,WAAgD,SAAzB/gB,KAAK0f,MAAMqB,YAIpDvB,EAAFjf,UAAAygB,wBAAE,WACE,OAAUhhB,KAAKmgB,YAAc,UAAY,IAAKngB,KAAK6f,iBAIrDL,EAAFjf,UAAA0gB,mBAAE,WACE,GAAMrP,GAAY5R,KAAKqgB,WAAWzO,SAClC,QAAQA,EAAeA,EAA3B,OAA6C,IAAM5R,KAAKqgB,WAAW7O,SAajEgO,EAAFjf,UAAA6f,sBAAE,WACEpgB,KAAK6f,gBAAkB7f,KAAKmgB,YACxBngB,KAAK0f,MAAMqB,UACV/gB,KAAKkhB,OAASlhB,KAAK0f,MAAMwB,OAGhC1B,EAAFjf,UAAAsgB,YAAE,WACE,MAAO7gB,MAAK0f,MAAMlJ,UAAYxW,KAAKwW,UASrCgJ,EAAFjf,UAAA4gB,sBAAE,WACE,MAAKnhB,MAAKmgB,YAEqB,OAAxBngB,KAAK0f,MAAMqB,UAAqB,YAAc,aAFrB,qBAtNpCtf,KAACC,EAAAA,UAADC,OAAAC,SAAA,oBACEC,SAAU,gBACVC,SAAU,qiCACVC,QAAF,6nDACEE,MACFwE,UAAA,iBACM2a,eAAN,iCACIC,cAAJ,iCACIC,eAAgB,kCAChBC,mBAAJ,0BACIC,mCAAJ,iBAEAhf,cAAAC,EAAAA,kBAAAC,KACAL,gBAAAC,EAAAA,wBAAAC,OACEP,QAAF,YACE8P,YACF2P,GAAAC,UACAD,GAAAE,YACIF,GAAkBG,aAClBH,GAAkBI,aAClBJ,GAAkB1B,cAClB0B,GAAkBhD,4FA3DtBhd,KAAQqgB,GAARlf,aAAAnB,KAAA2W,EAAAA,aAdA3W,KAAEsgB,EAAAA,aAAFnf,aAAAnB,KAAA2W,EAAAA,cAHAoH,EAAAzc,4FA8GAme,QAAAzf,KAAA2D,EAAAA,QAGA4c,eAAAvgB,KAAA2D,EAAAA,SAMAoa,mCChIA,sBAeA/d,KAACuB,EAAAA,SAADrB,OACEsB,SAAU2D,EAAAA,cACVzD,SAAU2e,GAAStC,IACnBnc,cAAeye,GAAStC,IACxB3a,WAAYoa,QAnBdgD,KCYaC,GAAgBC,EAAAA,wFAZ7B,MAiBkC1d,GAAlC2d,EAAA9d,kBAHA7C,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,qBAfZwgB,GAiBkCF,+BCElCliB,KAAAE,QAAoC,GAAI2N,GAAAA,QAGxC7N,KAAAqiB,cAA0B,WAtB1B,sBAaA5gB,KAACsd,EAAAA,WAADpd,OAAakK,WAAY,8GAbzByW,mBCgEE,QAAFC,GACW9C,EACCrD,EACAoG,EACR7R,GAHO3Q,KAAXyf,MAAWA,EACCzf,KAAZoc,cAAYA,EACApc,KAAZwiB,SAAYA,EAERpG,EAAcU,QAAQ0F,GAAU,GAChCxiB,KAAKyiB,kBAAoBhD,EAAMvf,QAAQC,UAAU,WAAM,MAAAwQ,GAAkBQ,iBAR7E,MAWEoR,GAAFhiB,UAAAmF,YAAE,WACE1F,KAAKyiB,kBAAkBpS,cACvBrQ,KAAKoc,cAAce,eAAend,KAAKwiB,WAIzCD,EAAFhiB,UAAAmiB,aAAE,WACE,MAAO1iB,MAAK2iB,gBAAiBP,IAAe,KAAOpiB,KAAK2iB,OAI1DJ,EAAFhiB,UAAAqiB,eAAE,WACE,MAAO5iB,MAAK2iB,gBAAiBP,IAAepiB,KAAK2iB,MAAQ,MAI3DJ,EAAFhiB,UAAAsiB,gBAAE,WACE,MAAO7iB,MAAKwiB,SAAS5hB,eAIvB2hB,EAAFhiB,UAAAuiB,gBAAE,WACE,OACE7a,MAAOjI,KAAKiI,MACZ8T,OAAQ/b,KAAK+b,OACb6C,SAAU5e,KAAK4e,WAInB2D,EAAFhiB,UAAAgS,MAAE,WACEvS,KAAK6iB,kBAAkBtQ,wBA9E3B9Q,KAACC,EAAAA,UAADC,OAAAC,SAAA,kBACEE,SAAU,muEACVC,QAAF,mzBACEE,MACFC,MAAA,kBACMqC,KAAN,OAEA/B,cAAAC,EAAAA,kBAAAC,KACAL,gBAAAC,EAAAA,wBAAAC,+EAZAd,KAAQuD,EAAAA,aAbRvD,KAAQsQ,EAAAA,qBAGRwQ,EAAAxf,8DA8BAggB,eAAAthB,KAAA2D,EAAAA,QAGA4d,gBAAAvhB,KAAA2D,EAAAA,QAGA6C,QAAAxG,KAAA2D,EAAAA,QAGA6d,WAAAxhB,KAAA2D,EAAAA,QAGA2W,SAAAta,KAAA2D,EAAAA,QAGAwZ,WAAAnd,KAAG2D,EAAAA,SAMHmd,KC7CaW,IAKXC,yBAA0BtU,EAAAA,QAAQ,kBAChCC,EAAAA,MAAM,WAAYrC,EAAAA,OAAOsC,UAAW,2BAA4BrC,WAAY,YAC5EoC,EAAAA,MAAM,UAAWrC,EAAAA,OAAOsC,UAAW,OAAQrC,WAAY,aACvDoC,EAAAA,MAAM,OAAQrC,EAAAA,OAAOsC,UAAW,0BAA2BrC,WAAY,YACvEuC,EAAAA,WAAW,SAAUC,EAAAA,QAAQ,2CAI/BkU,uBAAwBvU,EAAAA,QAAQ,kBAC9BC,EAAAA,MAAM,WAAYrC,EAAAA,OAAOkO,OAAQ,MAAOjO,WAAY,YACpDoC,EAAAA,MAAM,OAAQrC,EAAAA,OAAOkO,OAAQ,MAAOjO,WAAY,YAChDoC,EAAAA,MAAM,UAAWrC,EAAAA,OAAOkO,OAAQ,IAAKjO,WAAY,aACjDuC,EAAAA,WAAW,gBAAiBC,EAAAA,QAAQ,0DCHtC,QAAFmU,GAAqBC,GAAAtjB,KAArBsjB,YAAqBA,EA/BrB,sBAwBA7hB,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,sEAjBZH,KAA0ByL,EAAAA,iCAqB1BsT,OAAA/e,KAAG2D,EAAAA,MAAHzD,MAAS,qBA7BT0hB,KC+CaE,GAAcC,EAAAA,0BAgBzB,QAAFC,GAAoDC,EAClBC,EAC4BC,GAF5D,GAAFxjB,GAGIkE,EAHJ5D,KAAAV,KAGU0jB,EAASE,IAHnB5jB,WACkCI,GAAlCujB,mBAAkCA,IAJlC,MAF6Blf,GAA7Bgf,EAAAnf,GAYEmf,EAAFljB,UAAAsjB,aAAE,SAAaC,EAA6BC,GACxC,GAAMC,GAAqBhkB,KAAK2jB,mBAAmBE,aAAaC,EAASC,GAKnEE,KAAsBH,GAAWA,EAAQI,SAAWlkB,KAAKmkB,WAE/D,OAAOH,IAAsBC,kBA7BjCxiB,KAACC,EAAAA,UAADC,OAAAC,SAAA,WACEE,SAAU,uDACV+C,YAAFC,QAAAsf,GAAArf,YAAA0e,IACEjhB,cAAFC,EAAAA,kBAAAC,KACEb,SAAF,UACEQ,gBAAFC,EAAAA,wBAAAC,0KASAd,SAA6DkB,GAA7DC,aAAAnB,KAAA2W,EAAAA,WAAA3W,KAAAoB,EAAAA,OAAAlB,MAAA0iB,EAAAA,iCAEAZ,EAAA1gB,6DALA0gB,cA5DAa,GAAA,SAAAhgB,gBAsFA,GAAAlE,GAAA,OAAAkE,GAAAA,EAAAwF,MAAA9J,KAAAukB,YAAAvkB,qEAWA,kEAKAA,MAMGwkB,OANHjO,8BACU,GAAViK,GAAAiE,EAAAjE,KAA8B8C,EAA9BmB,EAAAnB,WACA,OAAAljB,GAAAskB,eAAAlE,GAAA8C,IAA2CtjB,KAA3C2kB,OAAAzkB,QAAA0H,KAAAiO,EAAAA,UAAA7V,KAAAsT,aAAAnT,UAAA,WAAA,MAAAC,GAAAwkB,iFAMA5kB,KAAAmZ,cAAA1H,QAGA6S,EAAA1hB,aACAnB,KAAAgC,EAAAA,UAAA9B,mCA7BA2iB,EAAAvhB,0GAGAyhB,SAAA/iB,KAAAoE,EAAAA,gBAAelE,MAAf0hB,MAGAlK,gBAAA1X,KAAAuQ,EAAAA,UAMAsS,OAjGAO,GAAA,SAAAvgB,gBAsIA,MAAA,QAAAA,GAAAA,EAAAwF,MAAA9J,KAAAukB,YAAAvkB,KAHA,uHAdA8B,SAAA,24CACEC,QAAF,s6CACEC,QAAF,iBACEC,MACFC,MAAe,yBACf4iB,mBAAA,aACAvgB,KAAA,WAEAuN,YAAaoR,GAAbC,0BACAte,YAAAC,QAAAwf,GAAAvf,YAAA8f,IACAriB,cAAAC,EAAAA,kBAAAC,KACAL,gBAAAC,EAAAA,wBAAAC,WAGAsiB,GACAP,IACAS,GAAA,SAAAzgB,GACA,QAAAygB,GAAA9T,EAAAN,EAmBwC2B,EAAxCnR,GACA,GAAAf,GAAAkE,EAAA5D,KACgBV,KADhBiR,EAAAN,EAAA2B,EAAAnR,IAAAnB,IAIA,kCAAAI,QA9JAqE,GAAAsgB,EAAAzgB,GA0JAygB,EAAAniB,aAOAnB,KAAAC,EAAAA,UAAAC,OAAAC,SAAA,qDACAE,SAAA,iuFA1BAE,QAAA,iBACEC,MACFC,MAAA,uBACA4iB,mBAAA,WACAvgB,KAAA,WAEEuN,YAAFoR,GAAAE,wBACEve,YAAFC,QAAAwf,GAAAvf,YAAAggB,IACAviB,cAAAC,EAAAA,kBAAAC,KACAL,gBAAAC,EAAAA,wBAAAC,WAIAwiB,EAAAC,eAAA,WAAA,QACAvjB,KAAA0W,EAAAA,eAAAvV,aAAAnB,KAAmC2W,EAAAA,aACnC3W,KAAAsQ,EAAAA,oBACAtQ,KAAAuD,EAAAA,8EAhJAsf,ICKaW,GAAkBC,EAAAA,eAClBC,GAAsBC,EAAAA,8FAdnC,MA0BoC3gB,GAApC4gB,EAAA/gB,kBATA7C,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,yBACVK,MACEwE,UAAW,kBACX6e,SAAU,QAEZtjB,QAAS,QACT6C,YAAaC,QAAS0e,EAAAA,WAAYze,YAAauf,SAxBjDe,GA0BoCJ,+EA1BpC,MAsCwCxgB,GAAxC8gB,EAAAjhB,kBATA7C,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,6BACVK,MACEwE,UAAW,sBACX6e,SAAU,QAEZtjB,QAAS,QACT6C,YAAaC,QAAS0e,EAAAA,WAAYze,YAAauf,SApCjDiB,GAsCwCJ,gCCtCxC,sBAuBA1jB,KAACuB,EAAAA,SAADrB,OACEsB,SACEC,GACA0D,EAAAA,aACA+W,EAAAA,aACA6H,GACAC,EAAAA,iBACAC,GACA9H,IAEFza,SACED,GACA2hB,GACAE,GACAtB,GACArB,GACAkC,GACAe,GACAE,GACAhD,GACAc,IAEFhgB,cACEwhB,GACAE,GACAtB,GACArB,GACAkC,GACAe,GACAE,GACAhD,GACAc,IAEFxe,WAAYyd,GAAgB8B,QAxD9BuB,KCYaC,GAAYC,EAAAA,yFAmBzBzlB,GAAA0lB,eAA6B,qBAH7B,MACiCrhB,GAAjCshB,EAAAzhB,kBAZA7C,KAACC,EAAAA,UAADC,OAAAC,SAAA,8BACEC,SAAU,WACVC,SAAUkkB,EAAAA,mBACVjkB,QAAF,+wDACEE,MACFC,MAAA,aAEAM,cAAAC,EAAAA,kBAAAC,KACAL,gBAAAC,EAAAA,wBAAAC,WAGAwjB,OCVaE,GAAcC,EAAAA,WACdC,GAAoBC,EAAAA,iBACpBC,GAAoBC,EAAAA,4FApBjC,MA8BgC7hB,GAAhC8hB,EAAAjiB,kBAJA7C,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,eACViD,YAAaC,QAASohB,EAAAA,WAAYnhB,YAAawhB,QA5BjDA,GA8BgCN,+EA9BhC,MAwCsCxhB,GAAtC+hB,EAAAliB,kBAJA7C,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,qBACViD,YAAaC,QAASshB,EAAAA,iBAAkBrhB,YAAayhB,QAtCvDA,GAwCsCL,+EAxCtC,MAkDsC1hB,GAAtCgiB,EAAAniB,kBAJA7C,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,qBACViD,YAAaC,QAASwhB,EAAAA,iBAAkBvhB,YAAa0hB,QAhDvDA,GAkDsCJ,+EAlDtC,MA4DkC5hB,GAAlCiiB,EAAApiB,kBAJA7C,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,iBACViD,YAAaC,QAASid,EAAAA,aAAchd,YAAa2hB,0BAInDlG,OAAA/e,KAAG2D,EAAAA,MAAHzD,MAAS,kBAGTglB,SAAAllB,KAAG2D,EAAAA,QAGHwhB,YAAAnlB,KAAG2D,EAAAA,SApEHshB,GA4DkC3E,EAAAA,6BAoBhC,QAAF8E,GAAcC,EACAxU,GADZ,GAAFlS,GAEIkE,EAFJ5D,KAAAV,KAEU8mB,EAAWxU,IAFrBtS,WAGIsS,GAAW1R,cAAcI,UAAU0Y,IAAI,cAAcoN,EAAUC,wBAnFnE,MA+EmCtiB,GAAnCoiB,EAAAviB,kBAPA7C,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,uCACVK,MACEC,MAAS,kBACTqC,KAAQ,wDAhEZ9C,KAAEsgB,EAAAA,eAJFtgB,KAAmBuD,EAAAA,cARnB6hB,GA+EmCG,EAAAA,8BAiBjC,QAAFC,GAAcH,EACAxU,GADZ,GAAFlS,GAEIkE,EAFJ5D,KAAAV,KAEU8mB,EAAWxU,IAFrBtS,WAGIsS,GAAW1R,cAAcI,UAAU0Y,IAAI,cAAcoN,EAAUC,wBAnGnE,MA+FmCtiB,GAAnCwiB,EAAA3iB,kBAPA7C,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,uCACVK,MACEC,MAAS,kBACTqC,KAAQ,oDAhFZ9C,KAAEsgB,EAAAA,eAJFtgB,KAAmBuD,EAAAA,cARnBiiB,GA+FmCC,EAAAA,8BAiBjC,QAAFC,GAAcL,EACAxU,GADZ,GAAFlS,GAEIkE,EAFJ5D,KAAAV,KAEU8mB,EAAWxU,IAFrBtS,WAGIsS,GAAW1R,cAAcI,UAAU0Y,IAAI,cAAcoN,EAAUC,wBAnHnE,MA+G6BtiB,GAA7B0iB,EAAA7iB,kBAPA7C,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,yBACVK,MACEC,MAAS,WACTqC,KAAQ,oDAhGZ9C,KAAEsgB,EAAAA,eAJFtgB,KAAmBuD,EAAAA,cARnBmiB,GA+G6BC,EAAAA,SCxFhBC,GAAmBC,EAAAA,gBACnBC,GAAmBC,EAAAA,gBACnBC,GAAaC,EAAAA,qFAzB1B,MAoCqCjjB,GAArCkjB,EAAArjB,kBALA7C,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,oBACViD,YAAaC,QAASwiB,EAAAA,gBAAiBviB,YAAa4iB,IACpD3lB,QAAS,2BAA4B,qCAlCvC2lB,GAoCqCN,+EApCrC,MA+CqC5iB,GAArCmjB,EAAAtjB,kBALA7C,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,oBACViD,YAAaC,QAAS0iB,EAAAA,gBAAiBziB,YAAa6iB,IACpD5lB,QAAS,2BAA4B,qCA7CvC4lB,GA+CqCL,+EA/CrC,MA2DkC9iB,GAAlCojB,EAAAvjB,kBALA7C,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,cACViD,YAAaC,QAAS4iB,EAAAA,UAAW3iB,YAAa8iB,IAC9C7lB,QAAS,4BAA6B,2BAzDxC6lB,GA2DkCJ,+EAelC,MACkChjB,GAAlCqjB,EAAAxjB,kBAbA7C,KAACC,EAAAA,UAADC,OAAAC,SAAA,qCACEE,SAAUimB,EAAAA,iBACV9lB,MACFC,MAAA,iBACMqC,KAAN,OAEAlC,gBAAiBC,EAAAA,wBAAjBC,OACAC,cAAAC,EAAAA,kBAAAC,KACEb,SAAF,eACEgD,YAAFC,QAAAkjB,EAAAA,aAAuCjjB,YAAvC+iB,QAGAA,+CAiBA,MAAA,QAAAxjB,GAAAA,EAAAwF,MAAA9J,KAAAukB,YAAAvkB,KAHA,+HAVAiC,MACAC,MAAA,iBACAqC,KAAA,OAEElC,gBAAFC,EAAAA,wBAAAC,OACAC,cAAAC,EAAAA,kBAAAC,KACAb,SAAU,eACVgD,YAAAC,QAAAmjB,EAAAA,aAAAljB,YAAAmjB,QAGAA,GACAD,EAAAA,cAEAE,GAAA,SAAA7jB,+DAWA,cAK4B6jB,EAA5BvlB,uHAbA2B,KAAA,OAEElC,gBAAFC,EAAAA,wBAAAC,OACEC,cAAFC,EAAAA,kBAAAC,KACEb,SAAF,SACAgD,YAAAC,QAAAsjB,EAAAA,OAAArjB,YAAAojB,QAGAA,GACAC,EAAAA,QCxEMC,IAEJtC,GAGAS,GACAmB,GACAjB,GACAH,GACAsB,GACApB,GACAmB,GAGAf,GACAM,GACAF,GAGAa,GACAK,GACAD,gCApDF,sBAuDAzmB,KAACuB,EAAAA,SAADrB,OACEsB,SAAUqlB,EAAAA,eAAgB1hB,EAAAA,aAAc1D,IACxCC,QAASklB,GACThlB,aAAcglB,OA1DhBE,K3B0BMC,GAAmB,iBAUzB/d,GAAA,SAAAnG,GAoJE,QAAFmG,GAAc1B,OAAd,KAAAA,IAAcA,KAAZ,IAAF3I,GACIkE,EADJ5D,KAAAV,OAAAA,WA/IAI,GAAAsL,YAAiC,GAAIzC,GAAAA,oBAGrC7I,EAAAqoB,QAA6B,GAAIxf,GAAAA,gBAAwB,IAMzD7I,EAAAsoB,2BAA+BlZ,EAAAA,aAAaC,MA2D5CrP,EAAAuoB,oBAAM,SAACrjB,EAASsjB,GACZ,GAAMtf,GAAahE,EAAKsjB,EAExB,IAAIC,EAAAA,eAAevf,GAAQ,CACzB,GAAMwf,GAActkB,OAAO8E,EAI3B,OAAOwf,GAAcN,GAAmBM,EAAcxf,EAGxD,MAAOA,IAYXlJ,EAAAwK,SAAkD,SAACtF,EAAWqF,GAC1D,GAAMoR,GAASpR,EAAKoR,OACdgF,EAAYpW,EAAKoW,SACvB,OAAKhF,IAAuB,IAAbgF,EAERzb,EAAKqF,KAAK,SAACoe,EAAGC,GACnB,GAAIC,GAAS7oB,EAAKuoB,oBAAoBI,EAAGhN,GACrCmN,EAAS9oB,EAAKuoB,oBAAoBK,EAAGjN,GAMrCoN,EAAmB,CAcvB,OAbc,OAAVF,GAA4B,MAAVC,EAEhBD,EAASC,EACXC,EAAmB,EACVF,EAASC,IAClBC,GAAoB,GAEH,MAAVF,EACTE,EAAmB,EACA,MAAVD,IACTC,GAAoB,GAGfA,GAAiC,OAAbpI,EAAqB,GAAK,KAxBdzb,GAsC7ClF,EAAAgpB,gBAA4D,SAAC9jB,EAASxE,GAElE,GAAMuoB,GAAc,SAACC,EAAaC,GAAQ,MAAAD,GAAchkB,EAAKikB,IACvDC,EAAUpgB,OAAOqgB,KAAKnkB,GAAMokB,OAAOL,EAAa,IAAIM,cAGpDC,EAAoB9oB,EAAOS,OAAOooB,aAExC,QAA8C,GAAvCH,EAAQK,QAAQD,IAKvBxpB,EAAK+I,MAAQ,GAAIF,GAAAA,gBAAqBF,GACtC3I,EAAK0pB,8BA3LT,MAoC2CrlB,GAA3CgG,EAAAnG,GAyBE8E,OAAFC,eAAMoB,EAANlK,UAAA,YAAE,WAAa,MAAOP,MAAKmJ,MAAMG,WAC/B,SAAShE,GAAatF,KAAKmJ,MAAMI,KAAKjE,oCAMtC8D,OAAFC,eAAMoB,EAANlK,UAAA,cAAE,WAAuB,MAAOP,MAAKyoB,QAAQnf,WAC3C,SAAWxI,GAAkBd,KAAKyoB,QAAQlf,KAAKzI,oCAM/CsI,OAAFC,eAAMoB,EAANlK,UAAA,YAAE,WAA6B,MAAOP,MAAK0f,WACzC,SAAS/U,GACP3K,KAAK0f,MAAQ/U,EACb3K,KAAK8pB,6DAcP1gB,OAAFC,eAAMoB,EAANlK,UAAA,iBAAE,WAAuC,MAAOP,MAAK+pB,gBACnD,SAAczf,GACZtK,KAAK+pB,WAAazf,EAClBtK,KAAK8pB,6DAoGPrf,EAAFlK,UAAAupB,0BAAE,WAAA,GAAF1pB,GAAAJ,KAOUkgB,EAAyClgB,KAAK0f,MAChD7V,EAAAA,MAAiB7J,KAAK0f,MAAMQ,WAAYlgB,KAAK0f,MAAMsK,aACnD1U,EAAAA,GAAa,MACX2U,EAA8CjqB,KAAK+pB,WACrDlgB,EAAAA,MAAsB7J,KAAK+pB,WAAWG,KAAMlqB,KAAK+pB,WAAWC,aAC5D1U,EAAAA,GAAa,MAEX6U,EAAanqB,KAAKmJ,MAElBqB,EAAe4f,EAAAA,cAAcD,EAAYnqB,KAAKyoB,SACjD7gB,KAAKmC,EAAAA,IAAI,SAAC0a,GAAjB,GAAkBnf,GAAlBmf,EAAA,EAA4B,OAAArkB,GAAKiqB,YAAY/kB,MAEnCglB,EAAcF,EAAAA,cAAc5f,EAAc0V,GAC7CtY,KAAKmC,EAAAA,IAAI,SAAC0a,GAAjB,GAAkBnf,GAAlBmf,EAAA,EAA4B,OAAArkB,GAAKsK,WAAWpF,MAElCilB,EAAgBH,EAAAA,cAAcE,EAAaL,GAC9CriB,KAAKmC,EAAAA,IAAI,SAAC0a,GAAjB,GAAkBnf,GAAlBmf,EAAA,EAA4B,OAAArkB,GAAKyK,UAAUvF,KAEvCtF,MAAK0oB,2BAA2BrY,cAChCrQ,KAAK0oB,2BAA6B6B,EAAcpqB,UAAU,SAAAmF,GAAQ,MAAAlF,GAAKsL,YAAYnC,KAAKjE,MAQ1FmF,EAAFlK,UAAA8pB,YAAE,SAAY/kB,GAAZ,GAAFlF,GAAAJ,IASI,OALAA,MAAKwK,aACAxK,KAAKc,OAAgBwE,EAAKxE,OAAO,SAAA0pB,GAAO,MAAApqB,GAAKgpB,gBAAgBoB,EAAKpqB,EAAKU;uCAAzDwE,EAEftF,KAAKsK,WAAatK,KAAKuK,iBAAiBvK,KAAKwK,aAAahK,QAEvDR,KAAKwK,cAQdC,EAAFlK,UAAAmK,WAAE,SAAWpF,GAET,MAAKtF,MAAK2K,KAEH3K,KAAK4K,SAAStF,EAAK7E,QAAST,KAAK2K,MAFfrF,GAS3BmF,EAAFlK,UAAAsK,UAAE,SAAUvF,GACR,IAAKtF,KAAKsK,UAAa,MAAOhF,EAE9B,IAAMwF,GAAa9K,KAAKsK,UAAUS,UAAY/K,KAAKsK,UAAUU,QAC7D,OAAO1F,GAAK7E,QAAQwK,OAAOH,EAAY9K,KAAKsK,UAAUU,WAQxDP,EAAFlK,UAAAgK,iBAAE,SAAiBW,GAAjB,GAAF9K,GAAAJ,IACImL,SAAQC,UAAUC,KAAK,WACrB,GAAKjL,EAAKkK,YAEVlK,EAAKkK,UAAU9J,OAAS0K,EAGpB9K,EAAKkK,UAAUS,UAAY,GAAG,CAChC,GAAMO,GAAgBC,KAAKC,KAAKpL,EAAKkK,UAAU9J,OAASJ,EAAKkK,UAAUU,UAAY,GAAK,CACxF5K,GAAKkK,UAAUS,UAAYQ,KAAKE,IAAIrL,EAAKkK,UAAUS,UAAWO,OASpEb,EAAFlK,UAAAkJ,QAAE,WAAY,MAAOzJ,MAAK0L,aAMxBjB,EAAFlK,UAAAyJ,WAAE,aArSFS,GAoC2CR,EAAAA,YCf9B0B,GACX,GAAIC,GAAAA,eAAqC,uBACvCC,WAAY,OACZC,QAASC,mBA2BX,QAAFC,GACYrL,EACAsL,EACiCC,GAFjClM,KAAZW,YAAYA,EACAX,KAAZiM,QAAYA,EACiCjM,KAA7CkM,kBAA6CA,EAtD7C,MA6DEF,GAAFzL,UAAA4L,eAAE,SAAeC,GAAf,GAAFhM,GAAAJ,IACIA,MAAKqM,OAEgC,mBAA1BC,uBACTtM,KAAKiM,QAAQM,kBAAkB,WAC7BD,sBAAsB,WAAM,MAAAlM,GAAKoM,WAAWJ,OAG9CpM,KAAKwM,WAAWJ,IAKpBJ,EAAFzL,UAAA8L,KAAE,WACErM,KAAKW,YAAYC,cAAc6L,MAAMC,WAAa,WAIpDV,EAAFzL,UAAAoM,KAAE,WACE3M,KAAKW,YAAYC,cAAc6L,MAAMC,WAAa,UAO5CV,EAAVzL,UAAAiM,WAAA,SAAqBJ,GACjB,GAAMQ,GAAY5M,KAAKkM,kBAAkBE,GACnCS,EAAsB7M,KAAKW,YAAYC,aAE7CiM,GAAOJ,MAAMK,KAAOF,EAAUE,KAC9BD,EAAOJ,MAAMM,MAAQH,EAAUG,sBAhDnCtL,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,cACVK,MACEC,MAAS,uDAvCbT,KAAmBuD,EAAAA,aAAnBvD,KAAuDuL,EAAAA,SA8CvDvL,SAAAkB,GAAAC,aAAAnB,KAAKoB,EAAAA,OAALlB,MAAYgK,SAtDZK,mBCaE,QAAFiB,GAAqBnL,GAAA9B,KAArB8B,SAAqBA,EAbrB,sBAWAL,KAACgC,EAAAA,UAAD9B,OAAYC,SAAU,0DAHtBH,KAAmByL,EAAAA,eARnBD,KCYaE,GAAaC,EAAAA,qFAZ1B,MAkBiC3I,GAAjC4I,EAAA/I,kBAHA7C,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,qCAhBZyL,GAkBiCF,ICajCG,GAAA,yBA/BA,MAAAA,MAgCaC,GACTxJ,EAAcuJ,mBA+DhB,QAAFE,GAAsBC,GAApB,GAAFrN,GACIkE,EADJ5D,KAAAV,OAAAA,WAAsBI,GAAtBqN,kBAAsBA,EAvCtBrN,EAAAsN,UAAsC,GAYtCtN,EAAAuN,eAAkD,KAQlDvN,EAAAwN,cAA2B,GAAIC,GAAAA,QAM/BzN,EAAA0N,SAA4B,KAM5B1N,EAAA2N,OAA0B,KAK1B3N,EAAA4N,UAAa,IA5Bb,MAtB4BvJ,GAA5B+I,EAAAlJ,GA4BE8E,OAAFC,eAAMmE,EAANjN,UAAA,eAAE,WACE,MAAOP,MAAK2N,gDA2BdH,EAAFjN,UAAA0N,YAAE,SAAY/N,IACNA,EAAQgO,eAAe,cAAgBhO,EAAQgO,eAAe,cAChElO,KAAK4N,cAAcrE,QAIvBiE,EAAFjN,UAAAmF,YAAE,WACE1F,KAAK4N,cAAcO,YAGrBX,EAAFjN,UAAA6N,SAAE,WACEpO,KAAK2N,eAAiB,GAAIU,GAAAA,eACtBrO,KAAKsO,kBAAoBtO,KAAKuO,iBAAkBvO,KAAKyN,mCA7E7DhM,KAACC,EAAAA,UAADC,OAAAC,SAAA,UACEE,SAAU,uDACVE,QAAF,YACEK,gBAAFC,EAAAA,wBAAAC,OACEC,cAAFC,EAAAA,kBAAAC,KACEb,SAAF,4EApBA2L,EAAAzK,wIA0BAwL,mBAAA9M,KAAA+M,EAAAA,UAAA7M,MAAgBuL,EAAAA,eAKhBQ,YAAAjM,KAAA2D,EAAAA,MAAGzD,MAAH,WAGA8M,YAAAhN,KAAA2D,EAAAA,MAAGzD,MAAH,gBAGA+M,iBAAAjN,KAAQ2D,EAAAA,MAARzD,MAAA,sBASA6L,OCjDamB,IAIXC,aAAcC,EAAAA,QAAQ,gBAEpBC,EAAAA,MAAM,wDAAyDrC,EAAAA,OAAOsC,UAAW,UAMjFD,EAAAA,MAAM,OAAQrC,EAAAA,OAAOsC,UAAW,2BAA4BC,UAAW,SACvEF,EAAAA,MAAM,QAASrC,EAAAA,OAAOsC,UAAW,0BAA2BC,UAAW,SAEvEC,EAAAA,WAAW,yDACPC,EAAAA,QAAQ,yCACZD,EAAAA,WAAW,8BACTxC,EAAAA,OAAOsC,UAAW,6BAClBG,EAAAA,QAAQ,0CAEVD,EAAAA,WAAW,+BACTxC,EAAAA,OAAOsC,UAAW,4BAClBG,EAAAA,QAAQ,4DC4BZ,QAAFC,GACIC,EACAC,EAC8CC,GAHhD,GAAFlP,GAIMkE,EAJN5D,KAAAV,KAIYoP,EAA0BC,IAJtCrP,WAGkDI,GAAlDkP,MAAkDA,EAPlDlP,EAAAmP,cAA0BC,EAAAA,aAAaC,MAEvCrP,EAAAsP,YAAwBF,EAAAA,aAAaC,QAlErC,MA8DsChL,GAAtC0K,EAAA7K,GAcE6K,EAAF5O,UAAA6N,SAAE,WAAA,GAAFhO,GAAAJ,IACIsE,GAAJ/D,UAAU6N,SAAV1N,KAAAV,MAEIA,KAAKuP,cAAgBvP,KAAKsP,MAAMK,iBAC7B/H,KAAKgI,EAAAA,UAAU5P,KAAKsP,MAAMO,kBAAkB7P,KAAKsP,MAAMQ,aACvD3P,UAAU,SAAC4P,GACNA,IAAgB3P,EAAK4P,eACvB5P,EAAK6P,OAAO7P,EAAKkP,MAAMY,YAI7BlQ,KAAK0P,YAAc1P,KAAKsP,MAAMa,oBAAoBhQ,UAAU,WAC1DC,EAAKgQ,YAKTjB,EAAF5O,UAAAmF,YAAE,WACEpB,EAAJ/D,UAAUmF,YAAVhF,KAAAV,MACIA,KAAKuP,cAAcc,cACnBrQ,KAAK0P,YAAYW,8BArCrB5O,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,2DAtCZH,KAAE6O,EAAAA,2BACF7O,KAAEiC,EAAAA,mBAgDFjC,KAAyD8O,GAAzD3N,aAAAnB,KAAKoB,EAAAA,OAALlB,MAAY6O,EAAAA,WAAW,WAAM,MAAAD,YAvE7BpB,GA8DsCsB,EAAAA,+BA6FpC,QAAFF,GAAsB5P,EACY+P,EAIpBC,GALZ,GAAFvQ,GAAAJ,IAAsBA,MAAtBW,YAAsBA,EACYX,KAAlC0Q,KAAkCA,EAlClC1Q,KAAA4Q,uBAAmCpB,EAAAA,aAAaC,MAMhDzP,KAAA6Q,aAA0D,GAAIC,GAAAA,aAG9D9Q,KAAA2P,iBAA+D,GAAImB,GAAAA,aAGnE9Q,KAAAmQ,oBAAkE,GAAIW,GAAAA,aAGtE9Q,KAAA+Q,YAAuD,GAAID,GAAAA,cAAmB,GAyBtE9Q,KAAK0Q,MAAQC,IACf3Q,KAAK4Q,uBAAyB5Q,KAAK0Q,KAAKM,OAAO7Q,UAAU,SAAA8Q,GACvD7Q,EAAK8Q,+BAA+BD,GACpCN,EAAkBQ,kBAhB1B,MAAE/H,QAAFC,eACMkH,EADNhQ,UAAA,gBAAE,SACauN,GACX9N,KAAKoR,eAAiBtD,EACtB9N,KAAKkR,kEAsBPX,EAAFhQ,UAAA6N,SAAE,WACwB,UAAlBpO,KAAK8P,WAAwC,MAAf9P,KAAK+N,SACrC/N,KAAK8P,UAAY9P,KAAKqR,+BAI1Bd,EAAFhQ,UAAAmF,YAAE,WACE1F,KAAK4Q,uBAAuBP,eAG9BE,EAAFhQ,UAAA+Q,uBAAE,SAAuBC,GACrB,GAAMxB,GAAc/P,KAAK6P,kBAAkB0B,EAAEC,QAC7CxR,MAAK2P,iBAAiB8B,KAAK1B,GACvBA,GACF/P,KAAK6Q,aAAaY,KAAKzR,KAAKW,YAAYC,cAAc8Q,eAI1DnB,EAAFhQ,UAAAoR,wBAAE,SAAwBJ,GAElBvR,KAAK6P,kBAAkB0B,EAAEC,UAAYxR,KAAK6P,kBAAkB7P,KAAK8P,YACnE9P,KAAK+Q,YAAYU,OAGfzR,KAAK6P,kBAAkB0B,EAAEK,aAAe5R,KAAK6P,kBAAkB7P,KAAK8P,YACtE9P,KAAKmQ,oBAAoBsB,QAK7BlB,EAAFhQ,UAAAsR,oBAAE,WACE,MAAO7R,MAAK0Q,MAA4B,QAApB1Q,KAAK0Q,KAAKpH,MAAkB,MAAQ,OAI1DiH,EAAFhQ,UAAAsP,kBAAE,SAAkB/B,GAChB,MAAmB,UAAZA,GACS,sBAAZA,GACY,uBAAZA,GAIEyC,EAAVhQ,UAAA2Q,+BAAA,SAAyCD,OAAzC,KAAAA,IAAyCA,EAAiBjR,KAAK6R,uBACvD7R,KAAKoR,eAAiB,EACxBpR,KAAK8P,UAAmB,OAAPmB,EAAe,OAAS,QAChCjR,KAAKoR,eAAiB,EAC/BpR,KAAK8P,UAAmB,OAAPmB,EAAe,QAAU,OAE1CjR,KAAK8P,UAAY,UAQbS,EAAVhQ,UAAA8Q,sCACI,GAAMJ,GAAMjR,KAAK6R,qBAEjB,OAAY,OAAPZ,GAAgBjR,KAAK+N,QAAU,GAAc,OAAPkD,GAAgBjR,KAAK+N,OAAS,EAChE,qBAGF,sCArIXtM,KAACC,EAAAA,UAADC,OAAAC,SAAA,eACEE,SAAU,wOACVC,QAAF,wHACES,cAAFC,EAAAA,kBAAAC,KACEL,gBAAFC,EAAAA,wBAAAC,OACEuP,YAAanD,GAAfC,cACE3M,MACFC,MAAe,mIA9FfT,KAAEsQ,EAAAA,qBAPFxB,EAAAxN,kFAsHAoN,sBAAA1O,KAAAuQ,EAAAA,SAGAjB,cAAAtP,KAAAuQ,EAAAA,SAGAC,cAAAxQ,KAAA+M,EAAAA,UAAA7M,MAAAuQ,EAAAA,uBAGAhC,WAAAzO,KAAA2D,EAAAA,MAAAzD,MAAA,aAGAoM,SAAAtM,KAAA2D,EAAAA,QAGA0I,WAAArM,KAAG2D,EAAAA,SAMHmL,KCvIA4B,GAAA,yBAdA,MAAAA,MAeaC,GACTrO,EAAcoO,mBAehB,QAAFE,GAAqBC,GAAnB,GAAFlS,GACIkE,EADJ5D,KAAAV,OAAAA,WAAqBI,GAArBkS,WAAqBA,IA/BrB,MA8BwC7N,GAAxC4N,EAAA/N,GAME+N,EAAF9R,UAAAgS,MAAE,WACEvS,KAAKsS,WAAW1R,cAAc2R,SAGhCF,EAAF9R,UAAAiS,cAAE,WACE,MAAOxS,MAAKsS,WAAW1R,cAAc6R,YAGvCJ,EAAF9R,UAAAmS,eAAE,WACE,MAAO1S,MAAKsS,WAAW1R,cAAc+R,4BAvBzClR,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,uBACVI,QAAS,YACTC,MACE2Q,2BAA4B,WAC5BC,uBAAwB,sDAnB5BpR,KAAmBuD,EAAAA,cARnBqN,GA8BwCD,ICuBxCU,GAAA,yBArDA,MAAAA,MAsDaC,GACTC,EAAmBF,mBAkFrB,QAAFG,GAAsBtS,EACAuS,EACAC,EACYzC,EAEZzE,GALpB,GAAF7L,GAMIkE,EANJ5D,KAAAV,OAAAA,WAAsBI,GAAtBO,YAAsBA,EACAP,EAAtB8S,mBAAsBA,EACA9S,EAAtB+S,eAAsBA,EACY/S,EAAlCsQ,KAAkCA,EAEZtQ,EAAtB6L,QAAsBA,EAvDtB7L,EAAAgT,gBAA4B,EAG5BhT,EAAAiT,uBAAkC,EAGlCjT,EAAAkT,WAAgC,GAAIzF,GAAAA,QAGpCzN,EAAAmT,yBAA4B,EAG5BnT,EAAAoT,qBAAwB,EAGxBpT,EAAAqT,sBAAyB,EAczBrT,EAAAsT,eAAmC,EAgBnCtT,EAAAuT,mBAA0C,GAAI7C,GAAAA,aAG9C1Q,EAAAwT,aAAoC,GAAI9C,GAAAA,eAAxC,MAzDkCrM,GAAlCwO,EAAA3O,GAyCE8E,OAAFC,eACM4J,EADN1S,UAAA,qBAAE,WAC8B,MAAOP,MAAK0T,oBAC1C,SAAkBpK,GAChBA,EAAQuK,EAAAA,qBAAqBvK,GAC7BtJ,KAAKqT,sBAAwBrT,KAAK0T,gBAAkBpK,EACpDtJ,KAAK0T,eAAiBpK,EAElBtJ,KAAK8T,aACP9T,KAAK8T,YAAYC,sBAAsBzK,oCAmB3C2J,EAAF1S,UAAAyT,sBAAE,WAEMhU,KAAKiU,gBAAkBjU,KAAKkU,eAAe1T,SAC7CR,KAAKmU,oBACLnU,KAAKiU,eAAiBjU,KAAKkU,eAAe1T,OAC1CR,KAAKkT,mBAAmB/B,gBAKtBnR,KAAKqT,wBACPrT,KAAKoU,eAAepU,KAAK0T,gBACzB1T,KAAKqU,0BACLrU,KAAKsU,4BACLtU,KAAKqT,uBAAwB,EAC7BrT,KAAKkT,mBAAmB/B,gBAKtBnR,KAAKuU,yBACPvU,KAAKwU,2BACLxU,KAAKuU,wBAAyB,EAC9BvU,KAAKkT,mBAAmB/B,iBAI5B8B,EAAF1S,UAAAkU,eAAE,SAAeC,GACb,OAAQA,EAAMC,SACZ,IAAKC,GAAAA,KACH5U,KAAK8T,YAAYe,qBACjBH,EAAMI,gBACN,MACF,KAAKC,GAAAA,IACH/U,KAAK8T,YAAYkB,oBACjBN,EAAMI,gBACN,MACF,KAAKG,GAAAA,MACL,IAAKC,GAAAA,MACHlV,KAAK2T,mBAAmBlC,KAAKzR,KAAKmV,YAClCT,EAAMI,gBACN,MACF,SACE9U,KAAK8T,YAAYsB,UAAUV,KAOjCzB,EAAF1S,UAAAkF,mBAAE,WAAA,GAAFrF,GAAAJ,KACUqV,EAAYrV,KAAK0Q,KAAO1Q,KAAK0Q,KAAKM,OAASsE,EAAAA,GAAa,MACxDC,EAASvV,KAAKmT,eAAenC,OAAO,KACpCwE,EAAU,WACdpV,EAAK+T,oBACL/T,EAAKkU,4BAGPtU,MAAK8T,YAAc,GAAI2B,GAAAA,gBAAgBzV,KAAKkU,gBACzCwB,0BAA0B1V,KAAK6R,uBAC/B8D,WAEH3V,KAAK8T,YAAY8B,iBAAiB,GAID,mBAA1BtJ,uBAAwCA,sBAAsBkJ,GAAWA,IAIhF3L,EAAAA,MAAMwL,EAAWE,GAAQ3N,KAAKiO,EAAAA,UAAU7V,KAAKsT,aAAanT,UAAU,WAClEqV,IACApV,EAAK0T,YAAY4B,0BAA0BtV,EAAKyR,yBAMlD7R,KAAK8T,YAAY9C,OAAOpJ,KAAKiO,EAAAA,UAAU7V,KAAKsT,aAAanT,UAAU,SAAA2V,GACjE1V,EAAKwT,aAAanC,KAAKqE,GACvB1V,EAAK2V,aAAaD,MAItB7C,EAAF1S,UAAAmF,YAAE,WACE1F,KAAKsT,WAAW/J,OAChBvJ,KAAKsT,WAAWnF,YAMlB8E,EAAF1S,UAAAyV,kBAAE,WAAA,GAAF5V,GAAAJ,KACUiW,EAAe,WACnB7V,EAAK+T,oBACL/T,EAAKkU,4BACLlU,EAAK8S,mBAAmB/B,eAM1BnR,MAAKiM,QAAUjM,KAAKiM,QAAQiK,IAAID,GAAgBA,KAMlDhD,EAAF1S,UAAA4T,kBAAE,WACEnU,KAAKmW,0BACLnW,KAAKqU,0BACLrU,KAAKwU,4BAIPpL,OAAFC,eAAM4J,EAAN1S,UAAA,kBAAE,WACE,MAAOP,MAAK8T,YAAc9T,KAAK8T,YAA2B,gBAAI,OAIhE,SAAexK,GACRtJ,KAAKoW,cAAc9M,IAAUtJ,KAAKmV,aAAe7L,GAAUtJ,KAAK8T,aAIrE9T,KAAK8T,YAAYuC,cAAc/M,oCAOjC2J,EAAF1S,UAAA6V,cAAE,SAAcnO,GACZ,IAAKjI,KAAKkU,eAAkB,OAAO,CAEnC,IAAMoC,GAAMtW,KAAKkU,eAAiBlU,KAAKkU,eAAeqC,UAAUtO,GAAS,IACzE,SAASqO,IAAQA,EAAIE,UAOvBvD,EAAF1S,UAAAwV,aAAE,SAAa1R,GAKX,GAJIrE,KAAKuT,yBACPvT,KAAKoU,eAAe/P,GAGlBrE,KAAKkU,gBAAkBlU,KAAKkU,eAAe1T,OAAQ,CACrDR,KAAKkU,eAAeqC,UAAUlS,GAAUkO,OAKxC,IAAMkE,GAAczW,KAAK0W,kBAAkB9V,cACrCqQ,EAAMjR,KAAK6R,qBAGf4E,GAAYE,WADH,OAAP1F,EACuB,EAEAwF,EAAYG,YAAcH,EAAY9D,cAMrEM,EAAF1S,UAAAsR,oBAAE,WACE,MAAO7R,MAAK0Q,MAA4B,QAApB1Q,KAAK0Q,KAAKpH,MAAkB,MAAQ,OAI1D2J,EAAF1S,UAAAiU,yBAAE,WACE,GAAMqC,GAAiB7W,KAAK6W,eACtBC,EAA4C,QAA/B9W,KAAK6R,uBAAmCgF,EAAiBA,CAM5E7W,MAAK+W,SAASnW,cAAc6L,MAAMsC,UAAY,cAAc+H,EAAhE,OAIE1N,OAAFC,eAAM4J,EAAN1S,UAAA,sBAAE,WAA+B,MAAOP,MAAKoT,qBAC3C,SAAmB4D,GACjBhX,KAAKoT,gBAAkB7H,KAAK0L,IAAI,EAAG1L,KAAKE,IAAIzL,KAAKkX,wBAAyBF,IAI1EhX,KAAKuU,wBAAyB,EAC9BvU,KAAKqU,2DAWPpB,EAAF1S,UAAA4W,cAAE,SAAcC,GACZ,GAAMC,GAAarX,KAAK0W,kBAAkB9V,cAAc+R,WAGxD3S,MAAK6W,iBAAgC,UAAbO,GAAyB,EAAI,GAAKC,EAAa,GASzEpE,EAAF1S,UAAA6T,eAAE,SAAekD,GACb,GAAMC,GAAgBvX,KAAKkU,eAAiBlU,KAAKkU,eAAeqC,UAAUe,GAAc,IAExF,IAAKC,EAAL,CAGA,GAEIC,GAAwBC,EAFtBJ,EAAarX,KAAK0W,kBAAkB9V,cAAc+R,WAGtB,QAA9B3S,KAAK6R,uBACP2F,EAAiBD,EAAc/E,gBAC/BiF,EAAgBD,EAAiBD,EAAc7E,mBAE/C+E,EAAgBzX,KAAK+W,SAASnW,cAAc+R,YAAc4E,EAAc/E,gBACxEgF,EAAiBC,EAAgBF,EAAc7E,iBAGjD,IAAMgF,GAAmB1X,KAAK6W,eACxBc,EAAkB3X,KAAK6W,eAAiBQ,CAE1CG,GAAiBE,EAEnB1X,KAAK6W,gBAAkBa,EAAmBF,EA7UjB,GA8UhBC,EAAgBE,IAEzB3X,KAAK6W,gBAAkBY,EAAgBE,EAhVd,MA4V7B1E,EAAF1S,UAAA4V,wBAAE,WACE,GAAMyB,GACF5X,KAAK+W,SAASnW,cAAcgW,YAAc5W,KAAKW,YAAYC,cAAc+R,WAExEiF,KACH5X,KAAK6W,eAAiB,GAGpBe,IAAc5X,KAAKuT,yBACrBvT,KAAKkT,mBAAmB/B,eAG1BnR,KAAKuT,wBAA0BqE,GAYjC3E,EAAF1S,UAAA8T,wBAAE,WAEErU,KAAKyT,qBAA8C,GAAvBzT,KAAK6W,eACjC7W,KAAKwT,oBAAsBxT,KAAK6W,gBAAkB7W,KAAKkX,wBACvDlX,KAAKkT,mBAAmB/B,gBAU1B8B,EAAF1S,UAAA2W,sBAAE,WAGE,MAFwBlX,MAAK+W,SAASnW,cAAcgW,YACjC5W,KAAK0W,kBAAkB9V,cAAc+R,aACf,GAI3CM,EAAF1S,UAAA+T,0BAAE,WACE,GAAMuD,GAAuB7X,KAAKkU,gBAAkBlU,KAAKkU,eAAe1T,OACpER,KAAKkU,eAAeqC,UAAUvW,KAAK8X,eAAexF,WAAW1R,cAC7D,IAEJZ,MAAK+X,QAAQ5L,eAAc,mBA/X/B1K,KAACC,EAAAA,UAADC,OAAAC,SAAA,iBACEE,SAAU,+7BACVC,QAAF,guEACEC,QAAF,iBACEQ,cAAFC,EAAAA,kBAAAC,KACEL,gBAAFC,EAAAA,wBAAAC,OACEN,MACFC,MAAA,iBACM8V,qDAAN,0BACIC,6BAAJ,yHAtDAxW,KAAEyW,EAAAA,gBAHFzW,KAAE0W,EAAAA,eAAFvV,aAAAnB,KAAA2W,EAAAA,aALA3W,KAAQuL,EAAAA,UAWRiG,EAAAlQ,2GA2DA2T,oBAAAjV,KAAA+M,EAAAA,UAAA7M,MAAA,sBACAoV,WAAAtV,KAAA+M,EAAAA,UAAA7M,MAAA,aACAmW,gBAAArW,KAAA2D,EAAAA,QACAuO,qBAAAlS,KAAAuQ,EAAAA,SAmCA4B,eAAAnS,KAAAuQ,EAAAA,UAgBAiB,OC/FIoF,GAAS,EAGbC,GAAA,yBA3CA,MAAAA,MAuDAC,GAAA,WACE,QAAFA,GAAqB5X,GAAAX,KAArBW,YAAqBA,EAxDrB,MAAA4X,MA0DaC,GACTC,EAAWzF,EAAmBuF,IAAkB,0BA4FlD,QAAFG,GAAcpG,EACQY,GADpB,GAAF9S,GAEIkE,EAFJ5D,KAAAV,KAEUsS,IAFVtS,WACsBI,GAAtB8S,mBAAsBA,EA7DtB9S,EAAAuY,eAA0C,EAG1CvY,EAAAwY,sBAA0C,EAG1CxY,EAAAyY,kBAA8BrJ,EAAAA,aAAaC,MAG3CrP,EAAA0Y,sBAAkCtJ,EAAAA,aAAaC,MAM/CrP,EAAA2Y,gBAAoC,EAQpC3Y,EAAAsT,eAA0C,KAG1CtT,EAAA4Y,eAAkD,QAmBlD5Y,EAAA6Y,oBAAiE,GAAInI,GAAAA,aAIrE1Q,EAAA8Y,YAAM,GAAIpI,GAAAA,aAGV1Q,EAAA+Y,cAAyD,GAAIrI,GAAAA,aAI7D1Q,EAAAgZ,kBAAM,GAAItI,GAAAA,cAAgC,GAOtC1Q,EAAKiZ,SAAWhB,OARpB,MAjEiC5T,GAAjCiU,EAAApU,GAsBE8E,OAAFC,eACMqP,EADNnY,UAAA,qBAAE,WAC+B,MAAOP,MAAK+Y,oBAC3C,SAAkBzP,GAAkBtJ,KAAK+Y,eAAiBO,EAAAA,sBAAsBhQ,oCAIhFF,OAAFC,eACMqP,EADNnY,UAAA,qBAAE,WACqC,MAAOP,MAAK0T,oBACjD,SAAkBpK,GAChBtJ,KAAK2Y,eAAiB9E,EAAAA,qBAAqBvK,EAAO,uCAQpDF,OAAFC,eACMqP,EADNnY,UAAA,uBAAE,WACsC,MAAOP,MAAKuZ,sBAClD,SAAoBjQ,GAClB,GAAM1I,GAA6BZ,KAAKW,YAAYC,aAEpDA,GAAcI,UAAUwY,OAAO,kBAAkBxZ,KAAKyZ,iBAElDnQ,GACF1I,EAAcI,UAAU0Y,IAAI,kBAAkBpQ,GAGhDtJ,KAAKuZ,iBAAmBjQ,mCAgC1BoP,EAAFnY,UAAAyT,sBAAE,WAAA,GAAF5T,GAAAJ,KAGU2Z,EAAgB3Z,KAAK2Y,eAAiB3Y,KAAK4Z,eAAe5Z,KAAK2Y,eAIrE,IAAI3Y,KAAK0T,gBAAkBiG,EAAe,CACxC,GAAME,GAAoC,MAAvB7Z,KAAK0T,cAEnBmG,IACH7Z,KAAKoZ,kBAAkB3H,KAAKzR,KAAK8Z,mBAAmBH,IAKtDxO,QAAQC,UAAUC,KAAK,WACrBjL,EAAK2Z,MAAMhS,QAAQ,SAACuO,EAAKrO,GAAU,MAAAqO,GAAItI,SAAW/F,IAAU0R,IAEvDE,GACHzZ,EAAK6Y,oBAAoBxH,KAAKkI,KAMpC3Z,KAAK+Z,MAAMhS,QAAQ,SAACuO,EAAarO,GAC/BqO,EAAIxI,SAAW7F,EAAQ0R,EAII,MAAvBvZ,EAAKsT,gBAA0C,GAAhB4C,EAAIxI,UAAkBwI,EAAIvI,SAC3DuI,EAAIvI,OAAS4L,EAAgBvZ,EAAKsT,kBAIlC1T,KAAK0T,iBAAmBiG,IAC1B3Z,KAAK0T,eAAiBiG,EACtB3Z,KAAKkT,mBAAmB/B,iBAI5BuH,EAAFnY,UAAAkF,mBAAE,WAAA,GAAFrF,GAAAJ,IACIA,MAAKga,wBAILha,KAAK6Y,kBAAoB7Y,KAAK+Z,MAAM7Z,QAAQC,UAAU,WAKpD,GAJsBC,EAAKwZ,eAAexZ,EAAKuY,kBAIzBvY,EAAKsT,eAGzB,IAAK,GAFCuG,GAAO7Z,EAAK2Z,MAAMxD,UAEf5N,EAAI,EAAGA,EAAIsR,EAAKzZ,OAAQmI,IAC/B,GAAIsR,EAAKtR,GAAGqF,SAAU,CAIpB5N,EAAKuY,eAAiBvY,EAAKsT,eAAiB/K,CAC5C,OAKNvI,EAAK4Z,wBACL5Z,EAAK8S,mBAAmB/B,kBAI5BuH,EAAFnY,UAAAmF,YAAE,WACE1F,KAAK6Y,kBAAkBxI,cACvBrQ,KAAK8Y,sBAAsBzI,eAI7BqI,EAAFnY,UAAA2Z,cAAE,WACMla,KAAKma,YACPna,KAAKma,WAAW7F,6BAIpBoE,EAAFnY,UAAA6Z,cAAE,SAAcnS,GACZjI,KAAKkZ,YAAYzH,KAAKzR,KAAK8Z,mBAAmB7R,KAGxCyQ,EAAVnY,UAAAuZ,mBAAA,SAA6B7R,GACzB,GAAMyM,GAAQ,GAAI4D,GAKlB,OAJA5D,GAAMzM,MAAQA,EACVjI,KAAK+Z,OAAS/Z,KAAK+Z,MAAMvZ,SAC3BkU,EAAM4B,IAAMtW,KAAK+Z,MAAMxD,UAAUtO,IAE5ByM,GASDgE,EAAVnY,UAAAyZ,2CACQha,MAAK8Y,uBACP9Y,KAAK8Y,sBAAsBzI,cAG7BrQ,KAAK8Y,sBAAwBjP,EAAAA,MAAjCC,UAAA,GAA0C9J,KAAK+Z,MAAMhQ,IAAI,SAAAuM,GAAO,MAAAA,GAAI1I,iBAC7DzN,UAAU,WAAM,MAAAC,GAAK8S,mBAAmB/B,kBAIrCuH,EAAVnY,UAAAqZ,eAAA,SAAyB3R,GAIrB,MAAOsD,MAAKE,IAAIzL,KAAK+Z,MAAMvZ,OAAS,EAAG+K,KAAK0L,IAAIhP,GAAS,EAAG,KAI9DyQ,EAAFnY,UAAA8Z,eAAE,SAAe1R,GACb,MAAO,iBAAiB3I,KAAKqZ,SAAjC,IAA6C1Q,GAI3C+P,EAAFnY,UAAA+Z,iBAAE,SAAiB3R,GACf,MAAO,mBAAmB3I,KAAKqZ,SAAnC,IAA+C1Q,GAO7C+P,EAAFnY,UAAAga,yBAAE,SAAyBC,GACvB,GAAKxa,KAAK+Y,gBAAmB/Y,KAAK4Y,sBAAlC,CAEA,GAAM6B,GAAuBza,KAAK0a,gBAAgB9Z,aAElD6Z,GAAQhO,MAAMkO,OAAS3a,KAAK4Y,sBAAwB,KAIhD5Y,KAAK0a,gBAAgB9Z,cAAcga,eACrCH,EAAQhO,MAAMkO,OAASH,EAAY,QAKvC9B,EAAFnY,UAAAsa,4BAAE,WACE7a,KAAK4Y,sBAAwB5Y,KAAK0a,gBAAgB9Z,cAAc8Q,aAChE1R,KAAK0a,gBAAgB9Z,cAAc6L,MAAMkO,OAAS,GAClD3a,KAAKmZ,cAAc1H,QAIrBiH,EAAFnY,UAAAua,aAAE,SAAaxE,EAAayE,EAAyBC,GAC5C1E,EAAIE,WACPxW,KAAK8X,cAAgBiD,EAAU5F,WAAa6F,IAKhDtC,EAAFnY,UAAA0a,aAAE,SAAa3E,EAAa0E,GACxB,MAAI1E,GAAIE,SACC,KAEFxW,KAAK8X,gBAAkBkD,EAAM,GAAK,kBAvQ7CvZ,KAACC,EAAAA,UAADC,OAAAC,SAAA,gBACEC,SAAU,cACVC,SAAU,w+CACVC,QAAF,u8CACES,cAAFC,EAAAA,kBAAAC,KACEL,gBAAFC,EAAAA,wBAAAC,OACEP,QAAF,QAAA,iBACEC,MACFC,MAAA,gBACMgZ,uCAAN,gBACIC,wCAAJ,sHA/DAzC,EAAE3V,wHAuEFoX,aAAA1Y,KAAA+M,EAAAA,UAAA7M,MAAA,eAEAyZ,gBAAA3Z,KAAA2D,EAAAA,QAEA0S,gBAAArW,KAAA2D,EAAAA,QAeA4T,iBAAAvX,KAAA2D,EAAAA,QAMAqU,kBAAAhY,KAAA2D,EAAAA,QAQA6T,sBAAAxX,KAAQuQ,EAAAA,SAGRkH,cAAAzX,KAAAuQ,EAAAA,SAgBAmH,gBAAA1X,KAAAuQ,EAAAA,SAGAoH,oBAAG3X,KAAMuQ,EAAAA,UAOT0G,OC7FA2C,GAAA,WACE,QAAFA,GAAqB1a,GAAAX,KAArBW,YAAqBA,EAtDrB,MAAA0a,MAwDaC,GACTtI,EAAmByF,EAAW4C,GAAe,2BAgD/C,QAAFE,GAAcjJ,EACoB5B,EACZzE,EACAiH,EACAC,GAJpB,GAAF/S,GAKIkE,EALJ5D,KAAAV,KAKUsS,IALVtS,WACkCI,GAAlCsQ,KAAkCA,EACZtQ,EAAtB6L,QAAsBA,EACA7L,EAAtB8S,mBAAsBA,EACA9S,EAAtB+S,eAAsBA,EA/BtB/S,EAAAob,WAAgC,GAAI3N,GAAAA,UAYpC,MAhB+BpJ,GAA/B8W,EAAAjX,GAgBE8E,OAAFC,eACMkS,EADNhb,UAAA,uBAAE,WACsC,MAAOP,MAAKuZ,sBAClD,SAAoBjQ,GAClB,GAAM1I,GAA6BZ,KAAKW,YAAYC,aAEpDA,GAAcI,UAAUwY,OAAO,kBAAkBxZ,KAAKyZ,iBAElDnQ,GACF1I,EAAcI,UAAU0Y,IAAI,kBAAkBpQ,GAGhDtJ,KAAKuZ,iBAAmBjQ,mCAgB1BiS,EAAFhb,UAAAkb,iBAAE,SAAiBrP,GAGfpM,KAAK0b,qBAAuBtP,EAC5BpM,KAAKkT,mBAAmB/B,gBAG1BoK,EAAFhb,UAAAkF,mBAAE,WAAA,GAAFrF,GAAAJ,IACIA,MAAKiM,QAAQM,kBAAkB,WAC7B,GAAM8I,GAAYjV,EAAKsQ,KAAOtQ,EAAKsQ,KAAKM,OAASsE,EAAAA,GAAa,KAE9D,OAAOzL,GAAAA,MAAMwL,EAAWjV,EAAK+S,eAAenC,OAAO,KAC9CpJ,KAAKiO,EAAAA,UAAUzV,EAAKob,aACpBrb,UAAU,WAAM,MAAAC,GAAKub,oBAK9BJ,EAAFhb,UAAAyT,sBAAE,WACE,GAAIhU,KAAK0b,mBAAoB,CAC3B,GAAME,GAAY5b,KAAK6b,UAAUC,KAAK,SAAAxF,GAAO,MAAAA,GAAIyF,QAEjD/b,MAAKgc,mBAAqBJ,EAAYA,EAAUjb,YAAc,KAC9DX,KAAK2b,eACL3b,KAAK0b,oBAAqB,IAI9BH,EAAFhb,UAAAmF,YAAE,WACE1F,KAAKwb,WAAWjS,OAChBvJ,KAAKwb,WAAWrN,YAIlBoN,EAAFhb,UAAAob,aAAE,WACM3b,KAAKgc,oBACPhc,KAAK+X,QAAQ1L,OACbrM,KAAK+X,QAAQ5L,eAAenM,KAAKgc,mBAAmBpb,gBAEpDZ,KAAK+X,QAAQpL,uBA7FnBlL,KAACC,EAAAA,UAADC,OAAAC,SAAA,oBACEC,SAAU,0BACVG,QAAF,QAAA,iBACEF,SAAU,6HACVC,QAAS,4vCACTE,MAAFC,MAAA,mBACEM,cAAFC,EAAAA,kBAAAC,KACEL,gBAAgBC,EAAAA,wBAAlBC,0HAnDAd,KAAEuL,EAAAA,SAZFvL,KAAQsQ,EAAAA,oBAgBRtQ,KAAEyW,EAAAA,iBAdFqD,EAAAxY,wJA0EA0W,kBAAAhY,KAAA2D,EAAAA,SAOAmW,OA1FAU,GAAA,qCAmKAC,GAAApY,EAAAkP,EAAAjP,EAAAkY,+CAsBA,GAAA7b,GAAAkE,EAAA5D,KAAAV,OAAAA,IAkEA,OA7BAI,GAAA+b,WAAAA,EAAE/b,EAAFO,YAAAA,EAAsBP,EAAtBgc,cAAAA,kGAXAhc,EAAAic,eAA+BC,mBAA/B3b,EAAAC,eAwBIR,EAAKiE,SAATkY,SAAAlY,IAAA,EACAmY,IAEApc,EAAAqc,2BAA0CD,EAA1ChG,yBAKAkG,qBAAAF,EAAAE,qBAAAC,YAAAH,EAAAI,gBACQC,UAARL,EAAAK,YAGAT,GACAA,EAAAU,QAAAnc,GAGAP,EArDA,0DAAA2c,2EAEA/c,KAAAgd,UAAA1T,EACQtJ,KAAKmc,WAAbV,iBAAAzb,KAAAW,eAGAsc,YAAA,EACAC,cAAA,gJAYAld,KAAAyc,0BAEAQ,YAAU,EACVC,cAAA,kFAmCAld,KAAAoc,eACQpc,KAARoc,cAAAe,eAAAnd,KAA+CW,kEAU/C+T,EAAAI,kBAGAsI,EAAAxa,aACAnB,KAAAgC,EAAAA,UAAA9B,+CAnGAE,SAAA,aACEG,QAAF,WAAA,gBAAA,YACEC,MACFC,MAAA,eACMmb,sBAAN,SACIxK,uBAAJ,sBACIyK,kBAAJ,WACI1K,2BAAJ,WACI2K,+BAAJ,SACI9W,UAAJ,8FA0CAhF,KAAkCuL,EAAAA,SA3MlCvL,KAAE+b,EAAAA,WAIF/b,SAAEkB,GAAFC,aAAAnB,KAAA2W,EAAAA,WAAA3W,KAAAoB,EAAAA,OAAAlB,MAAA8b,QAfAhc,KAAQyD,OAAQtC,aAAhBnB,KAAA0D,EAAAA,UAAAxD,MAAA,gBA0NAF,KAAAic,EAAAA,gBAlLAN,EAAAra,yCAsJAqa,mCCtMA,sBAyBA3b,KAACuB,EAAAA,SAADrB,OACEsB,SACE2D,EAAAA,aACA1D,GACAya,EAAAA,aACAC,GACAC,EAAAA,gBACAC,EAAAA,YAGF3a,SACED,GACAwV,GACArL,GACAG,GACA+N,GACA6B,GACAnQ,IAEF5J,cACEqV,GACArL,GACAG,GACAxB,GACAqG,GACAkJ,GACA6B,GACA7M,GACApB,GACA8D,GACAhG,QAvDJ8Q,K3B2BAC,GAAA,WACE,QAAFA,GAAqBrd,GAAAX,KAArBW,YAAqBA,EA5BrB,MAAAqd,MA8BaC,GACTxF,EAAWuF,gCA/Bf,sBAiCAvc,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,kBACVC,SAAU,gBACVI,MAAOC,MAAS,uBApClBkB,KAsCA9C,GAAA,SAAAgE,GAuBE,QAAFhE,GACIgS,EACQ4L,EACUC,GAHpB,GAAF/d,GAIIkE,EAJJ5D,KAAAV,KAIUsS,IAJVtS,WAEYI,GAAZ8d,UAAYA,EAKR9d,EAAKe,UAAYgd,IATrB,MAJgC1Z,GAAhCnE,EAAAgE,GAgBEhE,EAAFC,UAAA6d,gBAAE,WAAA,GAAFhe,GAAAJ,IACSqe,GAAAA,aAAgBre,KAAKke,UAAUI,YAIpCte,KAAKK;0EACLL,KAAKC,aAAaC,QAAQC,UAAU,WAAM,MAAAC,GAAKC,8BAMzCC,EAAVC,UAAAF,6CACI,IAAKL,KAAKC,aAAaO,OAAvB,IAM2BC,MAAMC,KAAKV,KAAKW,YAAYC,cAAcC,YAClEC,OAAO,SAAAC,GAAQ,QAAEA,EAAKC,WAAaD,EAAKC,UAAUC,SAAS,sBAC3DH,OAAO,SAAAC,GAAQ,MAAAA,GAAKG,YAAcd,EAAKe,UAAYf,EAAKe,UAAUC,aAAe,KACjFC,KAAK,SAAAN,GAAQ,MAAAA,GAAKO,YAAYC,UAG/BC,sBAxDNC,KAACC,EAAAA,UAADC,OAAAC,SAAA,cACEC,SAAU,aACVC,SAAU,8EACVC,QAAF,yiBACEC,QAAF,SACEC,MACFC,MAAA,cACMC,oCAAN,0BACIC,iCAAJ,6BAEAC,gBAAAC,EAAAA,wBAAAC,OACAC,cAAAC,EAAAA,kBAAAC,mFAnCAjB,SAAEkB,GAAFC,aAAAnB,KAAAoB,EAAAA,OAAAlB,MAAAmB,EAAAA,eAgDAxC,EAAAyC,mEALAzC,mCC3DA,sBAaAmB,KAACuB,EAAAA,SAADrB,OACEsB,SAAUC,IACVC,SAAU7C,GAAY8C,GAAeF,IACrCG,cAAe/C,GAAY8C,QAhB7BE,mBCqBE,QAAFC,GAAqBC,GAAAxD,KAArBwD,cAAqBA,EArBrB,sBAiBA/B,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,8DARZH,KAAEiC,EAAAA,oBAVFH,KC8BaI,GAAkBC,EAAAA,eAElBC,GACTC,EAAcC,EAAcC,EAAAA,cAEnBC,GAELH,EAAcC,EAAcG,EAAAA,mCAqBlC,QAAFC,GAAwBxD,EACAyD,EACaC,GAFnC,GAAFjE,GAGIkE,EAHJ5D,KAAAV,KAGUW,EAAayD,IAHvBpE,WAAwBI,GAAxBO,YAAwBA,EACAP,EAAxBgE,MAAwBA,EAHxBhE,EAAAmE,KAAwC,WAOpCnE,EAAKiE,SAAWG,OAAOH,IAAa,IA/DxC,MAsDoCI,GAApCN,EAAAG,kBAZA7C,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,gBACVC,SAAU,cACVG,QAAS,WAAY,YACrBC,MACEyC,uBAAwB,aACxBC,oBAAqB,qCACrBC,cAAe,OACf1C,MAAS,iBAEX2C,YAAaC,QAASd,EAAAA,YAAae,YAAaZ,4CAtClD1C,KAAEuD,EAAAA,aANFvD,KAA2BwD,EAAAA,UAoD3BxD,KAAAyD,OAAAtC,aAAAnB,KAAe0D,EAAAA,UAAfxD,MAAyB,mCAJzB4C,OAAA9C,KAAG2D,EAAAA,SAxDHjB,GAsDoCN,+EAtDpC,MA6EuCY,GAAvCY,EAAAf,kBAPA7C,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,mBACVI,QACE,4BAEF6C,YAAaC,QAASlB,EAAAA,eAAgBmB,YAAaM,0BAGrDC,OAAA7D,KAAG2D,EAAAA,MAAHzD,MAAS,kBA9ET0D,GA6EuC1B,mBA4BrC,QAAF4B,GAAwB5E,EACAyD,EACAoB,EACanB,GAHnC,GAAFjE,GAIIkE,EAJJ5D,KAAAV,KAIUW,EAAayD,EAAOoB,IAJ9BxF,WAAwBI,GAAxBO,YAAwBA,EACAP,EAAxBgE,MAAwBA,EACAhE,EAAxBoF,SAAwBA,EAIpBpF,EAAKiE,SAAWG,OAAOH,IAAa,IA/GxC,MAkG0CI,GAA1Cc,EAAAjB,GAmBEiB,EAAFhF,UAAAkF,mBAAE,WACEnB,EAAJ/D,UAAUkF,mBAAV/E,KAAAV,OAGEuF,EAAFhF,UAAAmF,YAAE,WACEpB,EAAJ/D,UAAUmF,YAAVhF,KAAAV,sBAtCAyB,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,uBACVC,SAAU,oBACVI,MACEyC,uBAAwB,aACxBE,cAAe,OACf1C,MAAS,wBAEXF,QAAS,WAAY,YACrB6C,YACGC,QAASZ,EAAAA,kBAAmBa,YAAaQ,IACzCT,QAASd,EAAAA,YAAae,YAAaQ,4CAjFxC9D,KAAEuD,EAAAA,aANFvD,KAA2BwD,EAAAA,UAQ3BxD,KAAEkE,EAAAA,kBA4FFlE,KAAAyD,OAAAtC,aAAAnB,KAAe0D,EAAAA,UAAfxD,MAAyB,mCAPzBZ,OAAAU,KAAG2D,EAAAA,MAAHzD,MAAS,uBAETiE,aAAAnE,KAAGoE,EAAAA,gBAAHlE,MAAmB4B,OAvGnBgC,GAkG0CtB,ICvF7B6B,GAAsBC,EAAAA,8FAXnC,MAoB2CtB,GAA3CuB,EAAA1B,kBAJA7C,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,uBACViD,YAAaC,QAASiB,EAAAA,mBAAoBhB,YAAaiB,0BAKzDC,QAAAxE,KAAG2D,EAAAA,MAAHzD,MAAS,wBAGTuE,SAAAzE,KAAG2D,EAAAA,MAAHzD,MAAS,+BA1BTqE,GAoB2CF,ICP9BK,GAAWlB,EAAAA,mFAqBxB,MAFgCR,GAAhC2B,EAAA9B,kBAdA7C,KAACC,EAAAA,UAADC,OAAAC,SAAA,WACEC,SAAU,UACVC,SAAU,kDACVG,MACFC,MAAA,WACMqC,KAAN,QAEAxC,QAAA,mLACAS,cAAAC,EAAAA,kBAAAC,KACEL,gBAAFC,EAAAA,wBAAAC,OACEsC,YAAFC,QAAAG,EAAAA,QAAkCF,YAAlCqB,QAGAA,EAAArD,4DAGAqD,OCtBaC,GAAqBC,EAAAA,kGAalClG,GAAAmG,WAA4D,IAzB5D,MAwB0C9B,GAA1C+B,EAAAlC,kBAPA7C,KAACgC,EAAAA,UAAD9B,OACEC,SAAU,sBACVK,MACEwE,UAAW,mBAEb5B,YAAaC,QAASwB,EAAAA,kBAAmBvB,YAAayB,0BAGxDD,YAAA9E,KAAG2D,EAAAA,MAAHzD,MAAS,iCAzBT6E,GAwB0CH,ICLpCK,IACJnB,GACAF,GACAW,GACAQ,GACAJ,GACAjC,GACAZ,gCA1BF,sBA6BA9B,KAACuB,EAAAA,SAADrB,OACEsB,SAAU0D,EAAAA,cAAeC,EAAAA,aAAc1D,IACvCC,QAASuD,GACTrD,aAAcqD,OAhChBG,KC+CAC,GAAA,WAEE,QAAFA,GAAqBC,EACAC,EACAC,EACAC,GAHAlH,KAArB+G,kBAAqBA,EACA/G,KAArBgH,SAAqBA,EACAhH,KAArBiH,aAAqBA,EACAjH,KAArBkH,YAAqBA,EApDrB,MAsDEJ,GAAFvG,UAAA4G,aAAE,SAAapG,EAASkF,EACTmB,EAAkBC,GAD/B,GAAFjH,GAAAJ,KAEUsH,EAAWtH,KAAK+G,kBAAkBhG,EAAMkF,EAG9C,IAFAmB,EAAYG,KAAKD,GAEbtH,KAAKiH,aAAaK,GAAW,CAC/B,GAAME,GAAgBxH,KAAKkH,YAAYnG,EACnC0G,OAAMC,QAAQF,GAChBxH,KAAK2H,iBAAiBH,EAAevB,EAAOmB,EAAaC,GAEzDG,EAAcI,KAAKC,EAAAA,KAAK,IAAI1H,UAAU,SAAA2H,GACpC1H,EAAKuH,iBAAiBG,EAAU7B,EAAOmB,EAAaC,KAI1D,MAAOD,IAGTN,EAAFvG,UAAAoH,iBAAE,SAAiBG,EAAe7B,EACfmB,EAAkBC,GADnC,GAAFjH,GAAAJ,IAEI8H,GAASC,QAAQ,SAACC,EAAOC,GACvB,GAAIC,GAA4Bb,EAAU5G,OAC1CyH,GAAeX,KAAKU,GAASH,EAAStH,OAAS,GAC/CJ,EAAK+G,aAAaa,EAAO/B,EAAQ,EAAGmB,EAAac,MASrDpB,EAAFvG,UAAA4H,aAAE,SAAaC,GAAb,GAAFhI,GAAAJ,KACQoH,IAEJ,OADAgB,GAAeL,QAAQ,SAAAhH,GAAQ,MAAAX,GAAK+G,aAAapG,EAAM,EAAGqG,QACnDA,GAOTN,EAAFvG,UAAA8H,qBAAE,SAAqBC,EAAYC,GAAjC,GAAFnI,GAAAJ,KACQwI,KACAC,IAeJ,OAdAA,GAAc,IAAK,EAEnBH,EAAMP,QAAQ,SAAAhH,GAEZ,IAAK,GADD2H,IAAS,EACJC,EAAI,EAAGA,GAAKvI,EAAK4G,SAASjG,GAAO4H,IACxCD,EAASA,GAAUD,EAAcE,EAE/BD,IACFF,EAAQjB,KAAKxG,GAEXX,EAAK6G,aAAalG,KACpB0H,EAAcrI,EAAK4G,SAASjG,GAAQ,GAAKwH,EAAYK,WAAW7H,MAG7DyH,GAjHX1B,KA6HA+B,GAAA,SAAAvE,GAaE,QAAFuE,GAAsBN,EACAO,EACRC,OAAd,KAAAA,IAAcA,KAFZ,IAAF3I,GAGIkE,EAHJ5D,KAAAV,OAAAA,WAAsBI,GAAtBmI,YAAsBA,EACAnI,EAAtB0I,cAAsBA,EAbtB1I,EAAA4I,eAAmB,GAAIC,GAAAA,oBAEvB7I,EAAA8I,cAAkB,GAAID,GAAAA,oBAclB7I,EAAK+I,MAAQ,GAAIF,GAAAA,gBAAqBF,KA9I1C,MA6HiDtE,GAAjDoE,EAAAvE,GAME8E,OAAFC,eAAMR,EAANtI,UAAA,YAAE,WAAa,MAAOP,MAAKmJ,MAAMG,WAC/B,SAASA,GACPtJ,KAAKmJ,MAAMI,KAAKD,GAChBtJ,KAAKgJ,eAAeO,KAAKvJ,KAAK8I,cAAcX,aAAanI,KAAKsF,OAC9DtF,KAAKuI,YAAYiB,UAAYxJ,KAAKgJ,eAAeM,uCAUnDT,EAAFtI,UAAAkJ,QAAE,SAAQC,GAAR,GAAFtJ,GAAAJ,KACUE,GACJwJ,EAAiBC,WACjB3J,KAAKuI,YAAYqB,eAAuB,SACxC5J,KAAKgJ,eAEP,OAAOa,GAAAA,MAAXC,UAAA,GAAoB5J,GAAS0H,KAAKmC,EAAAA,IAAI,WAGhC,MAFA3J,GAAK8I,cAAcK,KACjBnJ,EAAK0I,cAAcT,qBAAqBjI,EAAK4I,eAAeM,MAAOlJ,EAAKmI,cACnEnI,EAAK8I,cAAcI,UAI9BT,EAAFtI,UAAAyJ,WAAE,aA9JFnB,GA6HiDoB,EAAAA,YC1GjDC,GAAA,SAAA5F,oEACAlE,GAAA+I,MAAU,GAAIF,GAAAA,sBApBd,MAmBgDxE,GAAhDyF,EAAA5F,GAME8E,OAAFC,eAAMa,EAAN3J,UAAA,YAAE,WAAa,MAAOP,MAAKmJ,MAAMG,WAC/B,SAASA,GAActJ,KAAKmJ,MAAMI,KAAKD,oCAEvCY,EAAF3J,UAAAkJ,QAAE,SAAQC,GAAR,GAAFtJ,GAAAJ,IACI,OAAO6J,GAAAA,MAAXC,UAAA,IAAqBJ,EAAiBC,WAAY3J,KAAKmJ,QAChDvB,KAAKmC,EAAAA,IAAI,WACR,MAAO3J,GAAKkF,SAIlB4E,EAAF3J,UAAAyJ,WAAE,aAnCFE,GAmBgDD,EAAAA,YCRnCE,GAAU,GAAIC,GAAAA,QAAQ,2XC6CO,+BAGD,skFC/CtB,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACjF,QAAS,SAAU,g5CCOmB,quFCwFT,6BAGD,mCAGOC,2BAGR,kCAkBQ,41FCnFV"}